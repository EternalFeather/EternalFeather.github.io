{"meta":{"title":"指尖の岁月","subtitle":"世间点滴，莫忘于心","description":null,"author":"Eternal","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-07-21T02:56:54.989Z","updated":"2017-07-21T02:56:54.985Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-07-21T02:56:33.725Z","updated":"2017-07-21T02:56:33.693Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2017-07-21T08:30:36.397Z","updated":"2016-03-01T10:00:22.000Z","comments":true,"path":"about/css/base.css","permalink":"http://yoursite.com/about/css/base.css","excerpt":"","text":"/** * =================================================================== * * Kards v1.0 Base Stylesheet * url: styleshout.com * 03-01-2016 * ------------------------------------------------------------------ * TOC: * 01. reset * 02. basic/base setup styles * 03. grid * 04. MISC * * =================================================================== */ /** * =================================================================== * 01. reset - normalize.css v3.0.2 | MIT License | git.io/normalize * * ------------------------------------------------------------------- */ html { font-family: sans-serif; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; } body { margin: 0; } article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary { display: block; } audio, canvas, progress, video { display: inline-block; vertical-align: baseline; } audio:not([controls]) { display: none; height: 0; } [hidden], template { display: none; } a { background: transparent; } a:active, a:hover { outline: 0; } abbr[title] { border-bottom: 1px dotted; } b, strong { font-weight: bold; } dfn { font-style: italic; } h1 { font-size: 2em; margin: 0.67em 0; } mark { background: #ff0; color: #000; } small { font-size: 80%; } sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } sup { top: -0.5em; } sub { bottom: -0.25em; } img { border: 0; } svg:not(:root) { overflow: hidden; } figure { margin: 1em 40px; } hr { -moz-box-sizing: content-box; box-sizing: content-box; height: 0; } pre { overflow: auto; } code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; } button, input, optgroup, select, textarea { color: inherit; font: inherit; margin: 0; } button { overflow: visible; } button, select { text-transform: none; } button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] { -webkit-appearance: button; cursor: pointer; } button[disabled], html input[disabled] { cursor: default; } button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; } input { line-height: normal; } input[type=\"checkbox\"], input[type=\"radio\"] { box-sizing: border-box; padding: 0; } input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button { height: auto; } input[type=\"search\"] { -webkit-appearance: textfield; -moz-box-sizing: content-box; -webkit-box-sizing: content-box; box-sizing: content-box; } input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration { -webkit-appearance: none; } fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; } legend { border: 0; padding: 0; } textarea { overflow: auto; } optgroup { font-weight: bold; } table { border-collapse: collapse; border-spacing: 0; } td, th { padding: 0; } /** * =================================================================== * 02. basic/base setup styles - (_basic.scss) * * ------------------------------------------------------------------- */ html { font-size: 62.5%; box-sizing: border-box; } *, *::before, *::after { box-sizing: inherit; } body { font-weight: normal; line-height: 1; text-rendering: optimizeLegibility; word-wrap: break-word; -webkit-overflow-scrolling: touch; -webkit-text-size-adjust: none; } body, input, button { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; } /** * Media - (_basic.scss) * ------------------------------------------------------------------- */ img, video { max-width: 100%; height: auto; } /** * Typography resets - (_basic.scss) * ------------------------------------------------------------------- */ div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, form, p, blockquote, th, td { margin: 0; padding: 0; } h1, h2, h3, h4, h5, h6 { -webkit-font-variant-ligatures: common-ligatures; -moz-font-variant-ligatures: common-ligatures; font-variant-ligatures: common-ligatures; text-rendering: optimizeLegibility; } em, i { font-style: italic; line-height: inherit; } strong, b { font-weight: bold; line-height: inherit; } small { font-size: 60%; line-height: inherit; } ol, ul { list-style: none; } li { display: block; } /** * links - (_basic.scss) * ------------------------------------------------------------------- */ a { text-decoration: none; line-height: inherit; } a img { border: none; } /** * inputs - (_basic.scss) * ------------------------------------------------------------------- */ fieldset { margin: 0; padding: 0; } input[type=\"email\"], input[type=\"number\"], input[type=\"search\"], input[type=\"text\"], input[type=\"tel\"], input[type=\"url\"], input[type=\"password\"], textarea { -webkit-appearance: none; -moz-appearance: none; -ms-appearance: none; -o-appearance: none; appearance: none; } /** * =================================================================== * 03. grid - (_grid.scss) * * ------------------------------------------------------------------- */ .row { width: 94%; max-width: 1140px; margin: 0 auto; } .row:before, .row:after { content: \"\"; display: table; } .row:after { clear: both; } .row .row { width: auto; max-width: none; margin-left: -20px; margin-right: -20px; } [class*=\"col-\"], .bgrid { float: left; } [class*=\"col-\"] + [class*=\"col-\"].end { float: right; } [class*=\"col-\"] { padding: 0 20px; } .col-one { width: 8.33333%; } .col-two, .col-1-6 { width: 16.66667%; } .col-three, .col-1-4 { width: 25%; } .col-four, .col-1-3 { width: 33.33333%; } .col-five { width: 41.66667%; } .col-six, .col-1-2 { width: 50%; } .col-seven { width: 58.33333%; } .col-eight, .col-2-3 { width: 66.66667%; } .col-nine, .col-3-4 { width: 75%; } .col-ten, .col-5-6 { width: 83.33333%; } .col-eleven { width: 91.66667%; } .col-twelve, .col-full { width: 100%; } /** * small screens - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:1024px) { .row .row { margin-left: -18px; margin-right: -18px; } [class*=\"col-\"] { padding: 0 18px; } } /** * tablets - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:768px) { .row { width: auto; padding-left: 30px; padding-right: 30px; } .row .row { padding-left: 0; padding-right: 0; margin-left: -15px; margin-right: -15px; } [class*=\"col-\"] { padding: 0 15px; } .tab-1-4 { width: 25%; } .tab-1-3 { width: 33.33333%; } .tab-1-2 { width: 50%; } .tab-2-3 { width: 66.66667%; } .tab-3-4 { width: 75%; } .tab-full { width: 100%; } } /** * large mobile devices - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:600px) { .row { padding-left: 25px; padding-right: 25px; } .row .row { margin-left: -10px; margin-right: -10px; } [class*=\"col-\"] { padding: 0 10px; } .mob-1-4 { width: 25%; } .mob-1-2 { width: 50%; } .mob-3-4 { width: 75%; } .mob-full { width: 100%; } } /** * small mobile devices - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:400px) { .row .row { padding-left: 0; padding-right: 0; margin-left: 0; margin-right: 0; } [class*=\"col-\"] { width: 100% !important; float: none !important; clear: both !important; margin-left: 0; margin-right: 0; padding: 0; } [class*=\"col-\"] + [class*=\"col-\"].end { float: none; } } /** * =================================================================== * block grids - (_grid.scss) * * ------------------------------------------------------------------- */ [class*=\"block-\"]:before, [class*=\"block-\"]:after { content: \"\"; display: table; } [class*=\"block-\"]:after { clear: both; } .block-1-6 .bgrid { width: 16.66667%; } .block-1-4 .bgrid { width: 25%; } .block-1-3 .bgrid { width: 33.33333%; } .block-1-2 .bgrid { width: 50%; } /** * Clearing for block grid columns. Allow columns with * different heights to align properly. */ .block-1-6 .bgrid:nth-child(6n+1), .block-1-4 .bgrid:nth-child(4n+1), .block-1-3 .bgrid:nth-child(3n+1), .block-1-2 .bgrid:nth-child(2n+1) { clear: both; } /** * small screens - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:1024px) { .block-s-1-6 .bgrid { width: 16.66667%; } .block-s-1-4 .bgrid { width: 25%; } .block-s-1-3 .bgrid { width: 33.33333%; } .block-s-1-2 .bgrid { width: 50%; } .block-s-full .bgrid { width: 100%; clear: both; } [class*=\"block-s-\"] .bgrid:nth-child(n) { clear: none; } .block-s-1-6 .bgrid:nth-child(6n+1), .block-s-1-4 .bgrid:nth-child(4n+1), .block-s-1-3 .bgrid:nth-child(3n+1), .block-s-1-2 .bgrid:nth-child(2n+1) { clear: both; } } /** * tablets - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:768px) { .block-tab-1-6 .bgrid { width: 16.66667%; } .block-tab-1-4 .bgrid { width: 25%; } .block-tab-1-3 .bgrid { width: 33.33333%; } .block-tab-1-2 .bgrid { width: 50%; } .block-tab-full .bgrid { width: 100%; clear: both; } [class*=\"block-tab-\"] .bgrid:nth-child(n) { clear: none; } .block-tab-1-6 .bgrid:nth-child(6n+1), .block-tab-1-4 .bgrid:nth-child(4n+1), .block-tab-1-3 .bgrid:nth-child(3n+1), .block-tab-1-2 .bgrid:nth-child(2n+1) { clear: both; } } /** * large mobile devices - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:600px) { .block-mob-1-6 .bgrid { width: 16.66667%; } .block-mob-1-4 .bgrid { width: 25%; } .block-mob-1-3 .bgrid { width: 33.33333%; } .block-mob-1-2 .bgrid { width: 50%; } .block-mob-full .bgrid { width: 100%; clear: both; } [class*=\"block-mob-\"] .bgrid:nth-child(n) { clear: none; } .block-mob-1-6 .bgrid:nth-child(6n+1), .block-mob-1-4 .bgrid:nth-child(4n+1), .block-mob-1-3 .bgrid:nth-child(3n+1), .block-mob-1-2 .bgrid:nth-child(2n+1) { clear: both; } } /** * stack on small mobile devices - (_grid.scss) * --------------------------------------------------------------- */ @media screen and (max-width:400px) { .stack .bgrid { width: 100% !important; float: none !important; clear: both !important; margin-left: 0; margin-right: 0; } } /** * =================================================================== * 04. MISC - (_grid.scss) * * ------------------------------------------------------------------- */ /** * Clearing - (http://nicolasgallagher.com/micro-clearfix-hack/ */ .group:before, .group:after { content: \"\"; display: table; } .group:after { clear: both; } /** * Misc Helper Styles */ .hide { display: none; } .invisible { visibility: hidden; } .antialiased { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .remove-bottom { margin-bottom: 0; } .half-bottom { margin-bottom: 1.5rem !important; } .add-bottom { margin-bottom: 3rem !important; } .no-border { border: none; } .full-width { width: 100%; } .text-center { text-align: center; } .text-left { text-align: left; } .text-right { text-align: right; } .pull-left { float: left; } .pull-right { float: right; } .align-center { margin-left: auto; margin-right: auto; text-align: center; } /*# sourceMappingURL=base.css.map */"},{"title":"","date":"2017-07-21T08:30:36.397Z","updated":"2016-03-01T09:53:22.000Z","comments":true,"path":"about/css/fonts.css","permalink":"http://yoursite.com/about/css/fonts.css","excerpt":"","text":"/* Generated by Font Squirrel (http://www.fontsquirrel.com) */ /* * Lora ================================================================================ */ @font-face { font-family: 'lora-bold'; src: url('../fonts/lora/lora-bold-webfont.eot'); src: url('../fonts/lora/lora-bold-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/lora/lora-bold-webfont.woff') format('woff'), url('../fonts/lora/lora-bold-webfont.ttf') format('truetype'), url('../fonts/lora/lora-bold-webfont.svg#lorabold') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'lora-bold-italic'; src: url('../fonts/lora/lora-bolditalic-webfont.eot'); src: url('../fonts/lora/lora-bolditalic-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/lora/lora-bolditalic-webfont.woff') format('woff'), url('../fonts/lora/lora-bolditalic-webfont.ttf') format('truetype'), url('../fonts/lora/lora-bolditalic-webfont.svg#lorabold_italic') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'lora-italic'; src: url('../fonts/lora/lora-italic-webfont.eot'); src: url('../fonts/lora/lora-italic-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/lora/lora-italic-webfont.woff') format('woff'), url('../fonts/lora/lora-italic-webfont.ttf') format('truetype'), url('../fonts/lora/lora-italic-webfont.svg#loraitalic') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'lora-regular'; src: url('../fonts/lora/lora-regular-webfont.eot'); src: url('../fonts/lora/lora-regular-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/lora/lora-regular-webfont.woff') format('woff'), url('../fonts/lora/lora-regular-webfont.ttf') format('truetype'), url('../fonts/lora/lora-regular-webfont.svg#loraregular') format('svg'); font-weight: normal; font-style: normal; } /* * Poppins ================================================================================ */ @font-face { font-family: 'poppins-bold'; src: url('../fonts/poppins/poppins-bold-webfont.eot'); src: url('../fonts/poppins/poppins-bold-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/poppins/poppins-bold-webfont.woff2') format('woff2'), url('../fonts/poppins/poppins-bold-webfont.woff') format('woff'), url('../fonts/poppins/poppins-bold-webfont.ttf') format('truetype'), url('../fonts/poppins/poppins-bold-webfont.svg#poppinsbold') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppins-light'; src: url('../fonts/poppins/poppins-light-webfont.eot'); src: url('../fonts/poppins/poppins-light-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/poppins/poppins-light-webfont.woff2') format('woff2'), url('../fonts/poppins/poppins-light-webfont.woff') format('woff'), url('../fonts/poppins/poppins-light-webfont.ttf') format('truetype'), url('../fonts/poppins/poppins-light-webfont.svg#poppinslight') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppins-medium'; src: url('../fonts/poppins/poppins-medium-webfont.eot'); src: url('../fonts/poppins/poppins-medium-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/poppins/poppins-medium-webfont.woff2') format('woff2'), url('../fonts/poppins/poppins-medium-webfont.woff') format('woff'), url('../fonts/poppins/poppins-medium-webfont.ttf') format('truetype'), url('../fonts/poppins/poppins-medium-webfont.svg#poppinsmedium') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppins-regular'; src: url('../fonts/poppins/poppins-regular-webfont.eot'); src: url('../fonts/poppins/poppins-regular-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/poppins/poppins-regular-webfont.woff2') format('woff2'), url('../fonts/poppins/poppins-regular-webfont.woff') format('woff'), url('../fonts/poppins/poppins-regular-webfont.ttf') format('truetype'), url('../fonts/poppins/poppins-regular-webfont.svg#poppinsregular') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppins-semibold'; src: url('../fonts/poppins/poppins-semibold-webfont.eot'); src: url('../fonts/poppins/poppins-semibold-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/poppins/poppins-semibold-webfont.woff2') format('woff2'), url('../fonts/poppins/poppins-semibold-webfont.woff') format('woff'), url('../fonts/poppins/poppins-semibold-webfont.ttf') format('truetype'), url('../fonts/poppins/poppins-semibold-webfont.svg#poppinssemibold') format('svg'); font-weight: normal; font-style: normal; }"},{"title":"","date":"2017-07-21T08:30:36.397Z","updated":"2016-03-01T09:56:46.000Z","comments":true,"path":"about/css/vendor.css","permalink":"http://yoursite.com/about/css/vendor.css","excerpt":"","text":"/** * =================================================================== * * Kards v1.0 Vendor/Third Party CSS * url: styleshout.com * 03-01-2016 * ------------------------------------------------------------------ * TOC: * 01. Core Owl Carousel CSS File * 02. Magnific Popup CSS * * =================================================================== */ /* * 01. Core Owl Carousel CSS File * v1.3.3 */ /* clearfix */ .owl-carousel .owl-wrapper:after { content: \".\"; display: block; clear: both; visibility: hidden; line-height: 0; height: 0; } /* display none until init */ .owl-carousel { display: none; position: relative; width: 100%; -ms-touch-action: pan-y; } .owl-carousel .owl-wrapper { display: none; position: relative; -webkit-transform: translate3d(0px, 0px, 0px); } .owl-carousel .owl-wrapper-outer { overflow: hidden; position: relative; width: 100%; } .owl-carousel .owl-wrapper-outer.autoHeight { -webkit-transition: height 500ms ease-in-out; -moz-transition: height 500ms ease-in-out; -ms-transition: height 500ms ease-in-out; -o-transition: height 500ms ease-in-out; transition: height 500ms ease-in-out; } .owl-carousel .owl-item { float: left; } .owl-controls .owl-page, .owl-controls .owl-buttons div { cursor: pointer; } .owl-controls { -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-tap-highlight-color: transparent; } /* mouse grab icon */ .grabbing { cursor: url(grabbing.png) 8 8, move; } /* fix */ .owl-carousel .owl-wrapper, .owl-carousel .owl-item { -webkit-backface-visibility: hidden; -moz-backface-visibility: hidden; -ms-backface-visibility: hidden; -webkit-transform: translate3d(0, 0, 0); -moz-transform: translate3d(0, 0, 0); -ms-transform: translate3d(0, 0, 0); } /* * Owl Carousel CSS3 Transitions * v1.3.2 */ .owl-origin { -webkit-perspective: 1200px; -webkit-perspective-origin-x: 50%; -webkit-perspective-origin-y: 50%; -moz-perspective: 1200px; -moz-perspective-origin-x: 50%; -moz-perspective-origin-y: 50%; perspective: 1200px; } /* fade */ .owl-fade-out { z-index: 10; -webkit-animation: fadeOut .7s both ease; -moz-animation: fadeOut .7s both ease; animation: fadeOut .7s both ease; } .owl-fade-in { -webkit-animation: fadeIn .7s both ease; -moz-animation: fadeIn .7s both ease; animation: fadeIn .7s both ease; } /* backSlide */ .owl-backSlide-out { -webkit-animation: backSlideOut 1s both ease; -moz-animation: backSlideOut 1s both ease; animation: backSlideOut 1s both ease; } .owl-backSlide-in { -webkit-animation: backSlideIn 1s both ease; -moz-animation: backSlideIn 1s both ease; animation: backSlideIn 1s both ease; } /* goDown */ .owl-goDown-out { -webkit-animation: scaleToFade .7s ease both; -moz-animation: scaleToFade .7s ease both; animation: scaleToFade .7s ease both; } .owl-goDown-in { -webkit-animation: goDown .6s ease both; -moz-animation: goDown .6s ease both; animation: goDown .6s ease both; } /* scaleUp */ .owl-fadeUp-in { -webkit-animation: scaleUpFrom .5s ease both; -moz-animation: scaleUpFrom .5s ease both; animation: scaleUpFrom .5s ease both; } .owl-fadeUp-out { -webkit-animation: scaleUpTo .5s ease both; -moz-animation: scaleUpTo .5s ease both; animation: scaleUpTo .5s ease both; } /* Keyframes */ /*empty*/ @-webkit-keyframes empty { 0% { opacity: 1; } } @-moz-keyframes empty { 0% { opacity: 1; } } @keyframes empty { 0% { opacity: 1; } } @-webkit-keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } @-moz-keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } @keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } @-webkit-keyframes fadeOut { 0% { opacity: 1; } 100% { opacity: 0; } } @-moz-keyframes fadeOut { 0% { opacity: 1; } 100% { opacity: 0; } } @keyframes fadeOut { 0% { opacity: 1; } 100% { opacity: 0; } } @-webkit-keyframes backSlideOut { 25% { opacity: .5; -webkit-transform: translateZ(-500px); } 75% { opacity: .5; -webkit-transform: translateZ(-500px) translateX(-200%); } 100% { opacity: .5; -webkit-transform: translateZ(-500px) translateX(-200%); } } @-moz-keyframes backSlideOut { 25% { opacity: .5; -moz-transform: translateZ(-500px); } 75% { opacity: .5; -moz-transform: translateZ(-500px) translateX(-200%); } 100% { opacity: .5; -moz-transform: translateZ(-500px) translateX(-200%); } } @keyframes backSlideOut { 25% { opacity: .5; transform: translateZ(-500px); } 75% { opacity: .5; transform: translateZ(-500px) translateX(-200%); } 100% { opacity: .5; transform: translateZ(-500px) translateX(-200%); } } @-webkit-keyframes backSlideIn { 0%, 25% { opacity: .5; -webkit-transform: translateZ(-500px) translateX(200%); } 75% { opacity: .5; -webkit-transform: translateZ(-500px); } 100% { opacity: 1; -webkit-transform: translateZ(0) translateX(0); } } @-moz-keyframes backSlideIn { 0%, 25% { opacity: .5; -moz-transform: translateZ(-500px) translateX(200%); } 75% { opacity: .5; -moz-transform: translateZ(-500px); } 100% { opacity: 1; -moz-transform: translateZ(0) translateX(0); } } @keyframes backSlideIn { 0%, 25% { opacity: .5; transform: translateZ(-500px) translateX(200%); } 75% { opacity: .5; transform: translateZ(-500px); } 100% { opacity: 1; transform: translateZ(0) translateX(0); } } @-webkit-keyframes scaleToFade { to { opacity: 0; -webkit-transform: scale(0.8); } } @-moz-keyframes scaleToFade { to { opacity: 0; -moz-transform: scale(0.8); } } @keyframes scaleToFade { to { opacity: 0; transform: scale(0.8); } } @-webkit-keyframes goDown { from { -webkit-transform: translateY(-100%); } } @-moz-keyframes goDown { from { -moz-transform: translateY(-100%); } } @keyframes goDown { from { transform: translateY(-100%); } } @-webkit-keyframes scaleUpFrom { from { opacity: 0; -webkit-transform: scale(1.5); } } @-moz-keyframes scaleUpFrom { from { opacity: 0; -moz-transform: scale(1.5); } } @keyframes scaleUpFrom { from { opacity: 0; transform: scale(1.5); } } @-webkit-keyframes scaleUpTo { to { opacity: 0; -webkit-transform: scale(1.5); } } @-moz-keyframes scaleUpTo { to { opacity: 0; -moz-transform: scale(1.5); } } @keyframes scaleUpTo { to { opacity: 0; transform: scale(1.5); } } /* * 02. Magnific Popup CSS */ .mfp-bg { top: 0; left: 0; width: 100%; height: 100%; z-index: 1042; overflow: hidden; position: fixed; background: #0b0b0b; opacity: 0.8; filter: alpha(opacity=80); } .mfp-wrap { top: 0; left: 0; width: 100%; height: 100%; z-index: 1043; position: fixed; outline: none !important; -webkit-backface-visibility: hidden; } .mfp-container { text-align: center; position: absolute; width: 100%; height: 100%; left: 0; top: 0; padding: 0 8px; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } .mfp-container:before { content: ''; display: inline-block; height: 100%; vertical-align: middle; } .mfp-align-top .mfp-container:before { display: none; } .mfp-content { position: relative; display: inline-block; vertical-align: middle; margin: 0 auto; text-align: left; z-index: 1045; } .mfp-inline-holder .mfp-content, .mfp-ajax-holder .mfp-content { width: 100%; cursor: auto; } .mfp-ajax-cur { cursor: progress; } .mfp-zoom-out-cur, .mfp-zoom-out-cur .mfp-image-holder .mfp-close { cursor: -moz-zoom-out; cursor: -webkit-zoom-out; cursor: zoom-out; } .mfp-zoom { cursor: pointer; cursor: -webkit-zoom-in; cursor: -moz-zoom-in; cursor: zoom-in; } .mfp-auto-cursor .mfp-content { cursor: auto; } .mfp-close, .mfp-arrow, .mfp-preloader, .mfp-counter { -webkit-user-select: none; -moz-user-select: none; user-select: none; } .mfp-loading.mfp-figure { display: none; } .mfp-hide { display: none !important; } .mfp-preloader { color: #CCC; position: absolute; top: 50%; width: auto; text-align: center; margin-top: -0.8em; left: 8px; right: 8px; z-index: 1044; } .mfp-preloader a { color: #CCC; } .mfp-preloader a:hover { color: #FFF; } .mfp-s-ready .mfp-preloader { display: none; } .mfp-s-error .mfp-content { display: none; } button.mfp-close, button.mfp-arrow { overflow: visible; cursor: pointer; background: transparent; border: 0; -webkit-appearance: none; display: block; outline: none; padding: 0; z-index: 1046; -webkit-box-shadow: none; box-shadow: none; } button::-moz-focus-inner { padding: 0; border: 0; } .mfp-close { width: 44px; height: 44px; line-height: 44px; position: absolute; right: 0; top: 0; text-decoration: none; text-align: center; opacity: 0.65; filter: alpha(opacity=65); padding: 0 0 18px 10px; color: #FFF; font-style: normal; font-size: 28px; font-family: Arial, Baskerville, monospace; } .mfp-close:hover, .mfp-close:focus { opacity: 1; filter: alpha(opacity=100); } .mfp-close:active { top: 1px; } .mfp-close-btn-in .mfp-close { color: #333; } .mfp-image-holder .mfp-close, .mfp-iframe-holder .mfp-close { color: #FFF; right: -6px; text-align: right; padding-right: 6px; width: 100%; } .mfp-counter { position: absolute; top: 0; right: 0; color: #CCC; font-size: 12px; line-height: 18px; white-space: nowrap; } .mfp-arrow { position: absolute; opacity: 0.65; filter: alpha(opacity=65); margin: 0; top: 50%; margin-top: -55px; padding: 0; width: 90px; height: 110px; -webkit-tap-highlight-color: transparent; } .mfp-arrow:active { margin-top: -54px; } .mfp-arrow:hover, .mfp-arrow:focus { opacity: 1; filter: alpha(opacity=100); } .mfp-arrow:before, .mfp-arrow:after, .mfp-arrow .mfp-b, .mfp-arrow .mfp-a { content: ''; display: block; width: 0; height: 0; position: absolute; left: 0; top: 0; margin-top: 35px; margin-left: 35px; border: medium inset transparent; } .mfp-arrow:after, .mfp-arrow .mfp-a { border-top-width: 13px; border-bottom-width: 13px; top: 8px; } .mfp-arrow:before, .mfp-arrow .mfp-b { border-top-width: 21px; border-bottom-width: 21px; opacity: 0.7; } .mfp-arrow-left { left: 0; } .mfp-arrow-left:after, .mfp-arrow-left .mfp-a { border-right: 17px solid #FFF; margin-left: 31px; } .mfp-arrow-left:before, .mfp-arrow-left .mfp-b { margin-left: 25px; border-right: 27px solid #3F3F3F; } .mfp-arrow-right { right: 0; } .mfp-arrow-right:after, .mfp-arrow-right .mfp-a { border-left: 17px solid #FFF; margin-left: 39px; } .mfp-arrow-right:before, .mfp-arrow-right .mfp-b { border-left: 27px solid #3F3F3F; } .mfp-iframe-holder { padding-top: 40px; padding-bottom: 40px; } .mfp-iframe-holder .mfp-content { line-height: 0; width: 100%; max-width: 900px; } .mfp-iframe-holder .mfp-close { top: -40px; } .mfp-iframe-scaler { width: 100%; height: 0; overflow: hidden; padding-top: 56.25%; } .mfp-iframe-scaler iframe { position: absolute; display: block; top: 0; left: 0; width: 100%; height: 100%; box-shadow: 0 0 8px rgba(0, 0, 0, 0.6); background: #000; } /* Main image in popup */ img.mfp-img { width: auto; max-width: 100%; height: auto; display: block; line-height: 0; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; padding: 40px 0 40px; margin: 0 auto; } /* The shadow behind the image */ .mfp-figure { line-height: 0; } .mfp-figure:after { content: ''; position: absolute; left: 0; top: 40px; bottom: 40px; display: block; right: 0; width: auto; height: auto; z-index: -1; box-shadow: 0 0 8px rgba(0, 0, 0, 0.6); background: #444; } .mfp-figure small { color: #BDBDBD; display: block; font-size: 12px; line-height: 14px; } .mfp-figure figure { margin: 0; } .mfp-bottom-bar { margin-top: -36px; position: absolute; top: 100%; left: 0; width: 100%; cursor: auto; } .mfp-title { text-align: left; line-height: 18px; color: #F3F3F3; word-wrap: break-word; padding-right: 36px; } .mfp-image-holder .mfp-content { max-width: 100%; } .mfp-gallery .mfp-image-holder .mfp-figure { cursor: pointer; } @media screen and (max-width:800px) and (orientation:landscape), screen and (max-height:300px) { /** * Remove all paddings around the image on small screen */ .mfp-img-mobile .mfp-image-holder { padding-left: 0; padding-right: 0; } .mfp-img-mobile img.mfp-img { padding: 0; } .mfp-img-mobile .mfp-figure:after { top: 0; bottom: 0; } .mfp-img-mobile .mfp-figure small { display: inline; margin-left: 5px; } .mfp-img-mobile .mfp-bottom-bar { background: rgba(0, 0, 0, 0.6); bottom: 0; margin: 0; top: auto; padding: 3px 5px; position: fixed; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } .mfp-img-mobile .mfp-bottom-bar:empty { padding: 0; } .mfp-img-mobile .mfp-counter { right: 5px; top: 3px; } .mfp-img-mobile .mfp-close { top: 0; right: 0; width: 35px; height: 35px; line-height: 35px; background: rgba(0, 0, 0, 0.6); position: fixed; text-align: center; padding: 0; } } @media all and (max-width:900px) { .mfp-arrow { -webkit-transform: scale(0.75); transform: scale(0.75); } .mfp-arrow-left { -webkit-transform-origin: 0; transform-origin: 0; } .mfp-arrow-right { -webkit-transform-origin: 100%; transform-origin: 100%; } .mfp-container { padding-left: 6px; padding-right: 6px; } } .mfp-ie7 .mfp-img { padding: 0; } .mfp-ie7 .mfp-bottom-bar { width: 600px; left: 50%; margin-left: -300px; margin-top: 5px; padding-bottom: 5px; } .mfp-ie7 .mfp-container { padding: 0; } .mfp-ie7 .mfp-content { padding-top: 44px; } .mfp-ie7 .mfp-close { top: 0; right: 0; padding-top: 0; } /*# sourceMappingURL=vendor.css.map */"},{"title":"","date":"2017-07-21T09:09:41.826Z","updated":"2017-07-21T09:09:41.822Z","comments":true,"path":"about/js/main.js","permalink":"http://yoursite.com/about/js/main.js","excerpt":"","text":"/** * =================================================================== * main js * * ------------------------------------------------------------------- */ (function($) { \"use strict\"; /*---------------------------------------------------- */ /* Preloader ------------------------------------------------------ */ $(window).on('load', function() { // will first fade out the loading animation $(\"#loader\").fadeOut(\"slow\", function(){ // will fade out the whole DIV that covers the website. $(\"#preloader\").delay(300).fadeOut(\"slow\"); }); }) /*---------------------------------------------------- */ /* FitText Settings ------------------------------------------------------ */ setTimeout(function() { $('#intro h1').fitText(1, { minFontSize: '42px', maxFontSize: '84px' }); }, 100); /*---------------------------------------------------- */ /* FitVids ------------------------------------------------------ */ $(\".fluid-video-wrapper\").fitVids(); /*---------------------------------------------------- */ /* Owl Carousel ------------------------------------------------------ */ $(\"#owl-slider\").owlCarousel({ navigation: false, pagination: true, itemsCustom : [ [0, 1], [700, 2], [960, 3] ], navigationText: false }); /*----------------------------------------------------- */ /* Alert Boxes ------------------------------------------------------- */ $('.alert-box').on('click', '.close', function() { $(this).parent().fadeOut(500); }); /*----------------------------------------------------- */ /* Stat Counter ------------------------------------------------------- */ var statSection = $(\"#stats\"), stats = $(\".stat-count\"); statSection.waypoint({ handler: function(direction) { if (direction === \"down\") { stats.each(function () { var $this = $(this); $({ Counter: 0 }).animate({ Counter: $this.text() }, { duration: 4000, easing: 'swing', step: function (curValue) { $this.text(Math.ceil(curValue)); } }); }); } // trigger once only this.destroy(); }, offset: \"90%\" }); /*---------------------------------------------------- */ /* Masonry ------------------------------------------------------ */ var containerProjects = $('#folio-wrapper'); containerProjects.imagesLoaded( function() { containerProjects.masonry( { itemSelector: '.folio-item', resize: true }); }); /*----------------------------------------------------*/ /* Modal Popup ------------------------------------------------------*/ $('.item-wrap a').magnificPopup({ type:'inline', fixedContentPos: false, removalDelay: 300, showCloseBtn: false, mainClass: 'mfp-fade' }); $(document).on('click', '.popup-modal-dismiss', function (e) { e.preventDefault(); $.magnificPopup.close(); }); /*-----------------------------------------------------*/ /* Navigation Menu ------------------------------------------------------ */ var toggleButton = $('.menu-toggle'), nav = $('.main-navigation'); // toggle button toggleButton.on('click', function(e) { e.preventDefault(); toggleButton.toggleClass('is-clicked'); nav.slideToggle(); }); // nav items nav.find('li a').on(\"click\", function() { // update the toggle button toggleButton.toggleClass('is-clicked'); // fadeout the navigation panel nav.fadeOut(); }); /*---------------------------------------------------- */ /* Highlight the current section in the navigation bar ------------------------------------------------------ */ var sections = $(\"section\"), navigation_links = $(\"#main-nav-wrap li a\"); sections.waypoint( { handler: function(direction) { var active_section; active_section = $('section#' + this.element.id); if (direction === \"up\") active_section = active_section.prev(); var active_link = $('#main-nav-wrap a[href=\"#' + active_section.attr(\"id\") + '\"]'); navigation_links.parent().removeClass(\"current\"); active_link.parent().addClass(\"current\"); }, offset: '25%' }); /*---------------------------------------------------- */ /* Smooth Scrolling ------------------------------------------------------ */ $('.smoothscroll').on('click', function (e) { e.preventDefault(); var target = this.hash, $target = $(target); $('html, body').stop().animate({ 'scrollTop': $target.offset().top }, 800, 'swing', function () { window.location.hash = target; }); }); /*---------------------------------------------------- */ /* Placeholder Plugin Settings ------------------------------------------------------ */ $('input, textarea, select').placeholder() /*---------------------------------------------------- */ /* contact form ------------------------------------------------------ */ /* local validation */ $('#contactForm').validate({ /* submit via ajax */ submitHandler: function(form) { var sLoader = $('#submit-loader'); $.ajax({ type: \"POST\", url: \"inc/sendEmail.php\", data: $(form).serialize(), beforeSend: function() { sLoader.fadeIn(); }, success: function(msg) { // Message was sent if (msg == 'OK') { sLoader.fadeOut(); $('#message-warning').hide(); $('#contactForm').fadeOut(); $('#message-success').fadeIn(); } // There was an error else { sLoader.fadeOut(); $('#message-warning').html(msg); $('#message-warning').fadeIn(); } }, error: function() { sLoader.fadeOut(); $('#message-warning').html(\"Something went wrong. Please try again.\"); $('#message-warning').fadeIn(); } }); } }); /*----------------------------------------------------- */ /* Back to top ------------------------------------------------------- */ var pxShow = 300; // height on which the button will show var fadeInTime = 400; // how slow/fast you want the button to show var fadeOutTime = 400; // how slow/fast you want the button to hide var scrollSpeed = 300; // how slow/fast you want the button to scroll to top. can be a value, 'slow', 'normal' or 'fast' // Show or hide the sticky footer button jQuery(window).scroll(function() { if (!( $(\"#header-search\").hasClass('is-visible'))) { if (jQuery(window).scrollTop() >= pxShow) { jQuery(\"#go-top\").fadeIn(fadeInTime); } else { jQuery(\"#go-top\").fadeOut(fadeOutTime); } } }); })(jQuery);"},{"title":"","date":"2017-07-21T09:08:25.842Z","updated":"2017-07-21T09:08:25.838Z","comments":true,"path":"about/js/amain.js","permalink":"http://yoursite.com/about/js/amain.js","excerpt":"","text":"/** * =================================================================== * main js * * ------------------------------------------------------------------- */ (function($) { \"use strict\"; /*---------------------------------------------------- */ /* Preloader ------------------------------------------------------ */ $(window).load(function() { // will first fade out the loading animation $(\"#loader\").fadeOut(\"slow\", function(){ // will fade out the whole DIV that covers the website. $(\"#preloader\").delay(300).fadeOut(\"slow\"); }); }) /*---------------------------------------------------- */ /* FitText Settings ------------------------------------------------------ */ setTimeout(function() { $('#intro h1').fitText(1, { minFontSize: '42px', maxFontSize: '84px' }); }, 100); /*---------------------------------------------------- */ /* FitVids ------------------------------------------------------ */ $(\".fluid-video-wrapper\").fitVids(); /*---------------------------------------------------- */ /* Owl Carousel ------------------------------------------------------ */ $(\"#owl-slider\").owlCarousel({ navigation: false, pagination: true, itemsCustom : [ [0, 1], [700, 2], [960, 3] ], navigationText: false }); /*----------------------------------------------------- */ /* Alert Boxes ------------------------------------------------------- */ $('.alert-box').on('click', '.close', function() { $(this).parent().fadeOut(500); }); /*----------------------------------------------------- */ /* Stat Counter ------------------------------------------------------- */ var statSection = $(\"#stats\"), stats = $(\".stat-count\"); statSection.waypoint({ handler: function(direction) { if (direction === \"down\") { stats.each(function () { var $this = $(this); $({ Counter: 0 }).animate({ Counter: $this.text() }, { duration: 4000, easing: 'swing', step: function (curValue) { $this.text(Math.ceil(curValue)); } }); }); } // trigger once only this.destroy(); }, offset: \"90%\" }); /*---------------------------------------------------- */ /* Masonry ------------------------------------------------------ */ var containerProjects = $('#folio-wrapper'); containerProjects.imagesLoaded( function() { containerProjects.masonry( { itemSelector: '.folio-item', resize: true }); }); /*----------------------------------------------------*/ /* Modal Popup ------------------------------------------------------*/ $('.item-wrap a').magnificPopup({ type:'inline', fixedContentPos: false, removalDelay: 300, showCloseBtn: false, mainClass: 'mfp-fade' }); $(document).on('click', '.popup-modal-dismiss', function (e) { e.preventDefault(); $.magnificPopup.close(); }); /*-----------------------------------------------------*/ /* Navigation Menu ------------------------------------------------------ */ var toggleButton = $('.menu-toggle'), nav = $('.main-navigation'); // toggle button toggleButton.on('click', function(e) { e.preventDefault(); toggleButton.toggleClass('is-clicked'); nav.slideToggle(); }); // nav items nav.find('li a').on(\"click\", function() { // update the toggle button toggleButton.toggleClass('is-clicked'); // fadeout the navigation panel nav.fadeOut(); }); /*---------------------------------------------------- */ /* Highlight the current section in the navigation bar ------------------------------------------------------ */ var sections = $(\"section\"), navigation_links = $(\"#main-nav-wrap li a\"); sections.waypoint( { handler: function(direction) { var active_section; active_section = $('section#' + this.element.id); if (direction === \"up\") active_section = active_section.prev(); var active_link = $('#main-nav-wrap a[href=\"#' + active_section.attr(\"id\") + '\"]'); navigation_links.parent().removeClass(\"current\"); active_link.parent().addClass(\"current\"); }, offset: '25%' }); /*---------------------------------------------------- */ /* Smooth Scrolling ------------------------------------------------------ */ $('.smoothscroll').on('click', function (e) { e.preventDefault(); var target = this.hash, $target = $(target); $('html, body').stop().animate({ 'scrollTop': $target.offset().top }, 800, 'swing', function () { window.location.hash = target; }); }); /*---------------------------------------------------- */ /* Placeholder Plugin Settings ------------------------------------------------------ */ $('input, textarea, select').placeholder() /*---------------------------------------------------- */ /* contact form ------------------------------------------------------ */ /* local validation */ $('#contactForm').validate({ /* submit via ajax */ submitHandler: function(form) { var sLoader = $('#submit-loader'); $.ajax({ type: \"POST\", url: \"inc/sendEmail.php\", data: $(form).serialize(), beforeSend: function() { sLoader.fadeIn(); }, success: function(msg) { // Message was sent if (msg == 'OK') { sLoader.fadeOut(); $('#message-warning').hide(); $('#contactForm').fadeOut(); $('#message-success').fadeIn(); } // There was an error else { sLoader.fadeOut(); $('#message-warning').html(msg); $('#message-warning').fadeIn(); } }, error: function() { sLoader.fadeOut(); $('#message-warning').html(\"Something went wrong. Please try again.\"); $('#message-warning').fadeIn(); } }); } }); /*----------------------------------------------------- */ /* Back to top ------------------------------------------------------- */ var pxShow = 300; // height on which the button will show var fadeInTime = 400; // how slow/fast you want the button to show var fadeOutTime = 400; // how slow/fast you want the button to hide var scrollSpeed = 300; // how slow/fast you want the button to scroll to top. can be a value, 'slow', 'normal' or 'fast' // Show or hide the sticky footer button jQuery(window).scroll(function() { if (!( $(\"#header-search\").hasClass('is-visible'))) { if (jQuery(window).scrollTop() >= pxShow) { jQuery(\"#go-top\").fadeIn(fadeInTime); } else { jQuery(\"#go-top\").fadeOut(fadeOutTime); } } }); })(jQuery);"},{"title":"","date":"2017-07-21T08:30:36.397Z","updated":"2016-03-01T10:21:22.000Z","comments":true,"path":"about/css/main.css","permalink":"http://yoursite.com/about/css/main.css","excerpt":"","text":"/** * =================================================================== * * Kards v1.0 Main Stylesheet * url: styleshout.com * 03-01-2016 * ------------------------------------------------------------------ * TOC: * 01. webfonts and iconfonts * 02. base style overrides * 03. typography & general theme styles * 04. preloader * 05. forms * 06. buttons * 07. other components * 08. common styles * 09. header styles * 10. intro * 11. about * 12. resume * 13. portfolio * 14. call-to-action section * 15. services * 16. stats * 17. contact * 18. footer * * =================================================================== */ /** * =================================================================== * 01. webfonts and iconfonts - (_document-setup.scss) * * ------------------------------------------------------------------- */ @import url(\"fonts.css\"); @import url(\"font-awesome/css/font-awesome.min.css\"); @import url(\"micons/micons.css\"); /** * =================================================================== * 02. base style overrides - (_document-setup.scss) * * ------------------------------------------------------------------- */ html { font-size: 10px; } @media only screen and (max-width:1024px) { html { font-size: 9.411764705882353px; } } @media only screen and (max-width:768px) { html { font-size: 10px; } } @media only screen and (max-width:400px) { html { font-size: 9.411764705882353px; } } html, body { height: 100%; } body { background: #151515; font-family: \"lora-regular\", serif; font-size: 1.7rem; line-height: 3rem; color: #6e6e6e; } /** * links - (_document-setup.scss) * ------------------------------------------------------------------- */ a, a:visited { color: #000000; -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } a:hover, a:focus, a:active { color: #FF0077; outline: 0; } /** * =================================================================== * 03. typography & general theme styles - (_document-setup.scss) * * ------------------------------------------------------------------- */ h1, h2, h3, h4, h5, h6, .h01, .h02, .h03, .h04, .h05, .h06 { font-family: \"poppins-semibold\", sans-serif; color: #313131; font-style: normal; text-rendering: optimizeLegibility; margin-bottom: 2.1rem; } h3, .h03, h4, .h04 { margin-bottom: 1.8rem; } h5, .h05, h6, .h06 { font-family: \"poppins-bold\"; margin-bottom: 1.2rem; } h1, .h01 { font-size: 3.1rem; line-height: 1.355; letter-spacing: -.1rem; } @media only screen and (max-width:600px) { h1, .h01 { font-size: 2.6rem; letter-spacing: -.07rem; } } h2, .h02 { font-size: 2.4rem; line-height: 1.25; } h3, .h03 { font-size: 2rem; line-height: 1.5; } h4, .h04 { font-size: 1.7rem; line-height: 1.765; } h5, .h05 { font-size: 1.4rem; line-height: 1.714; text-transform: uppercase; letter-spacing: .15rem; } h6, .h06 { font-size: 1.3rem; line-height: 1.846; text-transform: uppercase; letter-spacing: .15rem; } p img { margin: 0; } p.lead { font-family: \"lora-regular\", serif; font-size: 2rem; line-height: 1.8; color: #888888; } @media only screen and (max-width:768px) { p.lead { font-size: 1.7rem; } } em, i, strong, b { font-size: 1.7rem; line-height: 3rem; font-style: normal; font-weight: normal; } em, i { font-family: \"lora-italic\", serif; } strong, b { font-family: \"lora-bold\", serif; } small { font-size: 1.2rem; line-height: inherit; } blockquote { margin: 3rem 0; padding-left: 4rem; position: relative; } blockquote:before { content: \"\\201C\"; font-size: 8rem; line-height: 0px; margin: 0; color: #313131; font-family: arial, sans-serif; position: absolute; top: 3rem; left: 0; } blockquote p { font-family: georgia, serif; font-style: italic; padding: 0; font-size: 1.9rem; line-height: 1.737; } blockquote cite { display: block; font-size: 1.3rem; font-style: normal; line-height: 1.616; } blockquote cite:before { content: \"\\2014 \\0020\"; } blockquote cite a, blockquote cite a:visited { color: #888888; border: none; } abbr { font-family: \"poppins-bold\", serif; font-variant: small-caps; text-transform: lowercase; letter-spacing: .05rem; color: #888888; } var, kbd, samp, code, pre { font-family: Consolas, \"Andale Mono\", Courier, \"Courier New\", monospace; } pre { padding: 2.4rem 3rem 3rem; background: #F1F1F1; } code { font-size: 1.4rem; margin: 0 .2rem; padding: .3rem .6rem; white-space: nowrap; background: #F1F1F1; border: 1px solid #E1E1E1; border-radius: 3px; } pre > code { display: block; white-space: pre; line-height: 2; padding: 0; margin: 0; } pre.prettyprint > code { border: none; } del { text-decoration: line-through; } abbr[title], dfn[title] { border-bottom: 1px dotted; cursor: help; } mark { background: #FFF49B; color: #000; } hr { border: solid #d2d2d2; border-width: 1px 0 0; clear: both; margin: 2.4rem 0 1.5rem; height: 0; } /** * Lists - (_document-setup.scss) * ------------------------------------------------------------------- */ ol { list-style: decimal; } ul { list-style: disc; } li { display: list-item; } ol, ul { margin-left: 1.7rem; } ul li { padding-left: .4rem; } ul ul, ul ol, ol ol, ol ul { margin: .6rem 0 .6rem 1.7rem; } ul.disc li { display: list-item; list-style: none; padding: 0 0 0 .8rem; position: relative; } ul.disc li::before { content: \"\"; display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: #FF0077; position: absolute; left: -17px; top: 11px; vertical-align: middle; } dt { margin: 0; color: #FF0077; } dd { margin: 0 0 0 2rem; } /** * tables - (_document-setup.scss) * ------------------------------------------------------------------- */ table { border-width: 0; width: 100%; max-width: 100%; font-family: \"lora-regular\", sans-serif; } th, td { padding: 1.5rem 3rem; text-align: left; border-bottom: 1px solid #E8E8E8; } th { color: #313131; font-family: \"poppins-bold\", sans-serif; } td { line-height: 1.5; } th:first-child, td:first-child { padding-left: 0; } th:last-child, td:last-child { padding-right: 0; } .table-responsive { overflow-x: auto; -webkit-overflow-scrolling: touch; } /** * Spacing - (_document-setup.scss) * ------------------------------------------------------------------- */ button, .button { margin-bottom: 1.2; } fieldset { margin-bottom: 1.5rem; } input, textarea, select, pre, blockquote, figure, table, p, ul, ol, dl, form, .fluid-video-wrapper, .ss-custom-select { margin-bottom: 3rem; } /** * floated image - (_document-setup.scss) * ------------------------------------------------------------------- */ img.pull-right { margin: .9rem 0 0 2.4rem; } img.pull-left { margin: .9rem 2.4rem 0 0; } /** * block grid paddings - (_document-setup.scss) * ------------------------------------------------------------------- */ .bgrid { padding: 0 20px; } @media only screen and (max-width:1024px) { .bgrid { padding: 0 18px; } } @media only screen and (max-width:768px) { .bgrid { padding: 0 15px; } } @media only screen and (max-width:600px) { .bgrid { padding: 0 10px; } } @media only screen and (max-width:400px) { .bgrid { padding: 0; } } /** * pace.js styles - minimal - (_document-setup.scss) * ------------------------------------------------------------------- */ .pace { -webkit-pointer-events: none; pointer-events: none; -webkit-user-select: none; -moz-user-select: none; user-select: none; } .pace-inactive { display: none; } .pace .pace-progress { background: #FF0077; position: fixed; z-index: 900; top: 0; right: 100%; width: 100%; height: 6px; } /** * =================================================================== * 04. preloader - (_preloader-1.scss) * * ------------------------------------------------------------------- */ #preloader { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: #151515; z-index: 800; height: 100%; width: 100%; } .no-js #preloader, .oldie #preloader { display: none; } #loader { position: absolute; left: 50%; top: 50%; width: 60px; height: 60px; margin: -30px 0 0 -30px; padding: 0; } #loader:before { content: \"\"; border-top: 11px solid rgba(255, 255, 255, 0.1); border-right: 11px solid rgba(255, 255, 255, 0.1); border-bottom: 11px solid rgba(255, 255, 255, 0.1); border-left: 11px solid #FF0077; -webkit-animation: load 1.1s infinite linear; animation: load 1.1s infinite linear; display: block; border-radius: 50%; width: 60px; height: 60px; } @-webkit-keyframes load { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes load { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } /** * =================================================================== * 05. forms - (_forms.scss) * * ------------------------------------------------------------------- */ fieldset { border: none; } input[type=\"email\"], input[type=\"number\"], input[type=\"search\"], input[type=\"text\"], input[type=\"tel\"], input[type=\"url\"], input[type=\"password\"], textarea, select { display: block; height: 6rem; padding: 1.5rem 0; border: 0; outline: none; vertical-align: middle; color: #313131; font-family: \"poppins-regular\", sans-serif; font-size: 1.5rem; line-height: 3rem; max-width: 100%; background: transparent; border-bottom: 1px solid rgba(0, 0, 0, 0.3); -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } .ss-custom-select { position: relative; padding: 0; } .ss-custom-select select { -webkit-appearance: none; -moz-appearance: none; -ms-appearance: none; -o-appearance: none; appearance: none; text-indent: 0.01px; text-overflow: ''; margin: 0; line-height: 3rem; vertical-align: middle; } .ss-custom-select select option { padding-left: 2rem; padding-right: 2rem; } .ss-custom-select select::-ms-expand { display: none; } .ss-custom-select::after { content: '\\f0d7'; font-family: 'FontAwesome'; position: absolute; top: 50%; right: 1.5rem; margin-top: -10px; bottom: auto; width: 20px; height: 20px; line-height: 20px; font-size: 18px; text-align: center; pointer-events: none; color: #252525; } /* IE9 and below */ .oldie .ss-custom-select::after { display: none; } textarea { min-height: 25rem; } input[type=\"email\"]:focus, input[type=\"number\"]:focus, input[type=\"search\"]:focus, input[type=\"text\"]:focus, input[type=\"tel\"]:focus, input[type=\"url\"]:focus, input[type=\"password\"]:focus, textarea:focus, select:focus { color: #cc005f; border-bottom: 1px solid #FF0077; } label, legend { font-family: \"poppins-bold\", sans-serif; font-size: 1.4rem; margin-bottom: .6rem; color: #3b3b3b; display: block; } input[type=\"checkbox\"], input[type=\"radio\"] { display: inline; } label > .label-text { display: inline-block; margin-left: 1rem; font-family: \"poppins-regular\", sans-serif; line-height: inherit; } label > input[type=\"checkbox\"], label > input[type=\"radio\"] { margin: 0; position: relative; top: .15rem; } /** * Style Placeholder Text * - */ ::-webkit-input-placeholder { color: #a1a1a1; } :-moz-placeholder { color: #a1a1a1; /* Firefox 18- */ } ::-moz-placeholder { color: #a1a1a1; /* Firefox 19+ */ } :-ms-input-placeholder { color: #a1a1a1; } .placeholder { color: #a1a1a1 !important; } /** * =================================================================== * 06. buttons - (_button-essentials.scss) * * ------------------------------------------------------------------- */ .button, a.button, button, input[type=\"submit\"], input[type=\"reset\"], input[type=\"button\"] { display: inline-block; font-family: \"poppins-bold\", sans-serif; font-size: 1.4rem; text-transform: uppercase; letter-spacing: .3rem; height: 5.4rem; line-height: 5.4rem; padding: 0 3rem; margin: 0 .3rem 1.2rem 0; background: #d8d8d8; color: #313131; text-decoration: none; cursor: pointer; text-align: center; white-space: nowrap; border: none; -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } .button:hover, a.button:hover, button:hover, input[type=\"submit\"]:hover, input[type=\"reset\"]:hover, input[type=\"button\"]:hover, .button:focus, button:focus, input[type=\"submit\"]:focus, input[type=\"reset\"]:focus, input[type=\"button\"]:focus { background: #bebebe; color: #000000; outline: 0; } .button.button-primary, a.button.button-primary, button.button-primary, input[type=\"submit\"].button-primary, input[type=\"reset\"].button-primary, input[type=\"button\"].button-primary { background: #313131; color: #FFFFFF; } .button.button-primary:hover, a.button.button-primary:hover, button.button-primary:hover, input[type=\"submit\"].button-primary:hover, input[type=\"reset\"].button-primary:hover, input[type=\"button\"].button-primary:hover, .button.button-primary:focus, button.button-primary:focus, input[type=\"submit\"].button-primary:focus, input[type=\"reset\"].button-primary:focus, input[type=\"button\"].button-primary:focus { background: #1f1f1f; } button.full-width, .button.full-width { width: 100%; margin-right: 0; } button.medium, .button.medium { height: 5.7rem !important; line-height: 5.7rem !important; padding: 0 1.8rem !important; } button.large, .button.large { height: 6rem !important; line-height: 6rem !important; padding: 0rem 3rem !important; } button.stroke, .button.stroke { background: transparent !important; border: 3px solid #313131; line-height: 4.8rem; } button.stroke.medium, .button.stroke.medium { line-height: 5.1rem !important; } button.stroke.large, .button.stroke.large { line-height: 5.4rem !important; } button.stroke:hover, .button.stroke:hover { border: 3px solid #FF0077; color: #FF0077; } button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; } /** * =================================================================== * 07. other components - (_others.scss) * * ------------------------------------------------------------------- */ /** * alert box - (_alert-box.scss) * ------------------------------------------------------------------- */ .alert-box { padding: 2.1rem 4rem 2.1rem 3rem; position: relative; margin-bottom: 3rem; border-radius: 3px; font-family: \"poppins-regular\", sans-serif; font-size: 1.5rem; } .alert-box .close { position: absolute; right: 1.8rem; top: 1.8rem; cursor: pointer; } .ss-error { background-color: #ffd1d2; color: #e65153; } .ss-success { background-color: #c8e675; color: #758c36; } .ss-info { background-color: #d7ecfb; color: #4a95cc; } .ss-notice { background-color: #fff099; color: #bba31b; } /** * additional typo styles - (_additional-typo.scss) * ------------------------------------------------------------------- */ /** * drop cap */ .drop-cap:first-letter { float: left; margin: 0; padding: 1.5rem .6rem 0 0; font-size: 8.4rem; font-family: \"poppins-bold\", sans-serif; line-height: 6rem; text-indent: 0; background: transparent; color: #313131; } /** * line definition style */ .lining dt, .lining dd { display: inline; margin: 0; } .lining dt + dt:before, .lining dd + dt:before { content: \"\\A\"; white-space: pre; } .lining dd + dd:before { content: \", \"; } .lining dd + dd:before { content: \", \"; } .lining dd:before { content: \": \"; margin-left: -0.2em; } /** * dictionary definition style */ .dictionary-style dt { display: inline; counter-reset: definitions; } .dictionary-style dt + dt:before { content: \", \"; margin-left: -0.2em; } .dictionary-style dd { display: block; counter-increment: definitions; } .dictionary-style dd:before { content: counter(definitions, decimal) \". \"; } /** * Pull Quotes * ----------- * markup: * * * * * * * * --------------------------------------------------------------------- */ .pull-quote { position: relative; padding: 2.1rem 3rem 2.1rem 0px; } .pull-quote:before, .pull-quote:after { height: 1em; position: absolute; font-size: 8rem; font-family: Arial, Sans-Serif; color: #333; } .pull-quote:before { content: \"\\201C\"; top: 33px; left: 0; } .pull-quote:after { content: '\\201D'; bottom: -33px; right: 0; } .pull-quote blockquote { margin: 0; } .pull-quote blockquote:before { content: none; } /** * Stats Tab * --------- * markup: * * * [value][name] * * * Extend this object into your markup. * * --------------------------------------------------------------------- */ .stats-tabs { padding: 0; margin: 3rem 0; } .stats-tabs li { display: inline-block; margin: 0 1.5rem 3rem 0; padding: 0 1.5rem 0 0; border-right: 1px solid #ccc; } .stats-tabs li:last-child { margin: 0; padding: 0; border: none; } .stats-tabs li a { display: inline-block; font-size: 2.5rem; font-family: \"poppins-bold\", sans-serif; border: none; color: #252525; } .stats-tabs li a:hover { color: #FF0077; } .stats-tabs li a em { display: block; margin: .6rem 0 0 0; font-size: 1.4rem; font-family: \"poppins-regular\", sans-serif; color: #888888; } /** * skillbars - (_skillbars.scss) * ------------------------------------------------------------------- */ .skill-bars { list-style: none; margin: 6rem 0 3rem; } .skill-bars li { height: .6rem; background: #a1a1a1; width: 100%; margin-bottom: 6rem; padding: 0; position: relative; } .skill-bars li strong { position: absolute; left: 0; top: -3rem; font-family: \"poppins-bold\", sans-serif; color: #313131; text-transform: uppercase; letter-spacing: .2rem; font-size: 1.5rem; line-height: 2.4rem; } .skill-bars li .progress { background: #313131; position: relative; height: 100%; } .skill-bars li .progress span { position: absolute; right: 0; top: -3.6rem; display: block; font-family: \"poppins-regular\", sans-serif; color: white; font-size: 1.1rem; line-height: 1; background: #313131; padding: .6rem .6rem; border-radius: 3px; } .skill-bars li .progress span::after { position: absolute; left: 50%; bottom: -5px; margin-left: -5px; border-right: 5px solid transparent; border-left: 5px solid transparent; border-top: 5px solid #313131; content: \"\"; } .skill-bars li .percent5 { width: 5%; } .skill-bars li .percent10 { width: 10%; } .skill-bars li .percent15 { width: 15%; } .skill-bars li .percent20 { width: 20%; } .skill-bars li .percent25 { width: 25%; } .skill-bars li .percent30 { width: 30%; } .skill-bars li .percent35 { width: 35%; } .skill-bars li .percent40 { width: 40%; } .skill-bars li .percent45 { width: 45%; } .skill-bars li .percent50 { width: 50%; } .skill-bars li .percent55 { width: 55%; } .skill-bars li .percent60 { width: 60%; } .skill-bars li .percent65 { width: 65%; } .skill-bars li .percent70 { width: 70%; } .skill-bars li .percent75 { width: 75%; } .skill-bars li .percent80 { width: 80%; } .skill-bars li .percent85 { width: 85%; } .skill-bars li .percent90 { width: 90%; } .skill-bars li .percent95 { width: 95%; } .skill-bars li .percent100 { width: 100%; } /** * =================================================================== * 08. common styles (_layout.scss) * * ------------------------------------------------------------------- */ .grey-section { background: #ebebeb; } .grey-section p.lead { color: #7d7d7d; } .section-intro { max-width: 700px; margin-left: auto; margin-right: auto; text-align: center; margin-bottom: 3.6rem; position: relative; } .section-intro h1 { font-family: \"poppins-semibold\", serif; font-size: 3.6rem; color: #313131; line-height: 1.25; margin-bottom: 1.2rem; } .section-intro h5 { color: #FF0077; font-size: 1.6rem; line-height: 1.875; margin-bottom: 0.3rem; letter-spacing: .4rem; } /** * responsive: * common styles * ------------------------------------------------------------------- */ @media only screen and (max-width:768px) { .section-intro { max-width: 650px; } .section-intro h1 { font-size: 3rem; } } @media only screen and (max-width:600px) { .section-intro h1 { font-size: 2.6rem; } .section-intro h5 { font-size: 1.5rem; letter-spacing: .3rem; } } @media only screen and (max-width:400px) { .section-intro h1 { font-size: 2.4rem; } } /** * =================================================================== * 09. header styles - (_layout.scss) * * ------------------------------------------------------------------- */ header { position: fixed; width: 100%; min-height: 66px; z-index: 600; } header .row { position: relative; min-height: 66px; } header .top-bar { display: block; background: #000000; min-width: 220px; min-height: 66px; position: absolute; left: 90px; top: 0; } header .logo { float: left; margin-left: 20px; margin-right: 50px; margin-top: 25px; position: relative; } header .logo a { display: block; margin: 0; padding: 0; border: none; font: 0/0 a; text-shadow: none; color: transparent; width: 92px; height: 15px; background: url(\"../images/logo.png\") no-repeat center; background-size: 92px 15px; } /** * menu toggle - (_layout.css) * ------------------------------------------------------------------- */ .menu-toggle { float: left; width: 40px; height: 40px; margin-left: 20px; margin-top: 13px; display: block; position: relative; } .menu-toggle span { display: block; background-color: #FF0077; width: 24px; height: 3px; margin-top: -1.5px; font: 0/0 a; text-shadow: none; color: transparent; position: absolute; right: 8px; top: 50%; bottom: auto; left: auto; -moz-transition: background 0.2s ease-in-out; -o-transition: background 0.2s ease-in-out; -webkit-transition: background 0.2s ease-in-out; -ms-transition: background 0.2s ease-in-out; transition: background 0.2s ease-in-out; } .menu-toggle span::before, .menu-toggle span::after { content: ''; width: 100%; height: 100%; background-color: inherit; position: absolute; left: 0; -moz-transition-duration: 0.2s, 0.2s; -o-transition-duration: 0.2s, 0.2s; -webkit-transition-duration: 0.2s, 0.2s; -ms-transition-duration: 0.2s, 0.2s; transition-duration: 0.2s, 0.2s; -moz-transition-delay: 0.2s, 0s; -o-transition-delay: 0.2s, 0s; -webkit-transition-delay: 0.2s, 0s; -ms-transition-delay: 0.2s, 0s; transition-delay: 0.2s, 0s; } .menu-toggle span::before { top: -8px; -moz-transition-property: top, transform; -o-transition-property: top, transform; -webkit-transition-property: top, transform; -ms-transition-property: top, transform; transition-property: top, transform; } .menu-toggle span::after { bottom: -8px; -moz-transition-property: bottom, transform; -o-transition-property: bottom, transform; -webkit-transition-property: bottom, transform; -ms-transition-property: bottom, transform; transition-property: bottom, transform; } /* is clicked */ .menu-toggle.is-clicked span { background-color: rgba(255, 0, 119, 0); } .menu-toggle.is-clicked span::before, .menu-toggle.is-clicked span::after { background-color: #ff0077; -moz-transition-delay: 0s, 0.2s; -o-transition-delay: 0s, 0.2s; -webkit-transition-delay: 0s, 0.2s; -ms-transition-delay: 0s, 0.2s; transition-delay: 0s, 0.2s; } .menu-toggle.is-clicked span::before { top: 0; -webkit-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .menu-toggle.is-clicked span::after { bottom: 0; -webkit-transform: rotate(-45deg); -ms-transform: rotate(-45deg); transform: rotate(-45deg); } /* navigation panel */ #main-nav-wrap { display: block; width: 100%; font-family: \"poppins-medium\", sans-serif; font-size: 1.5rem; position: absolute; top: 100%; left: 0; } /* dropdown nav */ .main-navigation { background: #000000; padding: 24px 30px 42px; margin: 0; width: 100%; height: auto; clear: both; display: none; } .main-navigation > li { display: block; height: auto; text-align: left; padding: 0; } .main-navigation li a { display: block; color: #FFFFFF; width: auto; padding: 15px 0; line-height: 16px; border: none; } .main-navigation li a:hover { color: #FF0077; padding-left: 1rem; } .main-navigation li.current > a { background: none; color: #FF0077; } /** * responsive: * header styles * --------------------------------------------------------------- */ @media only screen and (max-width:1024px) { header .top-bar { left: 60px; } } @media only screen and (max-width:768px) { header .top-bar { left: 50px; } } @media only screen and (max-width:600px) { header .top-bar { left: 35px; } } @media only screen and (max-width:400px) { header .top-bar { left: 25px; } } /** * =================================================================== * 10. intro - (_layout.scss) * * ------------------------------------------------------------------- */ #intro { background: #151515 url(../images/intro-bg.jpg) no-repeat center bottom; -webkit-background-size: cover; -moz-background-size: cover; background-size: cover; background-attachment: fixed; width: 100%; height: 100%; min-height: 720px; display: table; position: relative; text-align: center; } .intro-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: #111111; opacity: .85; } .intro-content { display: table-cell; vertical-align: middle; text-align: center; -webkit-transform: translateY(-2.1rem); -ms-transform: translateY(-2.1rem); transform: translateY(-2.1rem); } .intro-content h1 { color: #FFFFFF; font-family: \"poppins-medium\", sans-serif; font-size: 8.4rem; line-height: 1.071; max-width: 900px; margin-top: 0; margin-bottom: .6rem; margin-left: auto; margin-right: auto; text-shadow: 0 0 20px rgba(0, 0, 0, 0.5); } .intro-content h5 { color: #cc005f; font-family: \"poppins-bold\", sans-serif; font-size: 2.3rem; line-height: 1.565; margin-bottom: 0; text-transform: uppercase; letter-spacing: .3rem; text-shadow: 0 0 6px rgba(0, 0, 0, 0.2); } .intro-content .intro-position { font-family: \"lora-regular\", serif; font-size: 1.7rem; line-height: 2.4rem; text-transform: uppercase; letter-spacing: .2rem; color: #FFFFFF; text-shadow: 0 0 6px rgba(0, 0, 0, 0.2); } .intro-content .intro-position span { display: inline-block; } .intro-content .intro-position span::after { content: \"|\"; text-align: center; display: inline-block; padding: 0 8px 0 14px; color: rgba(255, 255, 255, 0.3); } .intro-content .intro-position span:first-child::before { content: \"|\"; text-align: center; display: inline-block; padding: 0 14px 0 8px; color: rgba(255, 255, 255, 0.3); } .intro-content .button { color: #FFFFFF !important; border-color: rgba(255, 255, 255, 0.3); height: 6rem !important; line-height: 5.4rem !important; padding: 0 3.5rem 0 3rem !important; margin-top: .6rem; font-size: 1.3rem; text-transform: uppercase; letter-spacing: .25rem; } .intro-content .button:hover, .intro-content .button:focus { border-color: #cc005f; } .intro-content .button::after { display: inline-block; content: \"\\f107\"; font-family: fontAwesome; font-size: 1.6rem; line-height: inherit; text-align: center; position: relative; left: 1.2rem; } .intro-social { display: block; position: absolute; width: 100%; left: 0; bottom: 7.2rem; font-size: 3.3rem; margin: 0; padding: 0; } .intro-social li { display: inline-block; margin: 0 20px; padding: 0; } .intro-social li a, .intro-social li a:visited { color: #FFFFFF; } .intro-social li a:hover, .intro-social li a:focus { color: #cc005f; } /** * responsive: * Intro * --------------------------------------------------------------- */ @media only screen and (max-width:1024px) { .intro-content h1 { font-size: 7.6rem; } .intro-social { font-size: 3rem; } .intro-social li { margin: 0 15px; } } @media only screen and (max-width:768px) { #intro { min-height: 660px; } .intro-content h1 { font-size: 5.2rem; } .intro-content h5 { font-size: 1.8rem; } .intro-content .intro-position { font-size: 1.3rem; } .intro-social { font-size: 2.5rem; } .intro-social li { margin: 0 10px; } } @media only screen and (max-width:600px) { #intro { min-height: 600px; } .intro-content h1 { font-size: 4.6rem; margin-bottom: .6rem; } .intro-content h5 { font-size: 1.5rem; margin-bottom: .3rem; letter-spacing: .2rem; } .intro-content .intro-position { font-size: 1.2rem; } .intro-content .intro-position span { padding: 0 .6rem; } .intro-content .intro-position span::before, .intro-content .intro-position span::after { display: none !important; } .intro-social { font-size: 2.4rem; } } /** * =================================================================== * 11. about - (_layout.scss) * * ------------------------------------------------------------------- */ #about { background: #FFFFFF; padding-top: 12rem; padding-bottom: 15rem; } #about .section-intro { margin-bottom: 3rem; } .intro-info { margin-top: 4.2rem; margin-right: -30px; margin-left: -30px; } .intro-info img { height: 9rem; width: 9rem; border-radius: 50%; margin: .9rem 0 0 0; float: left; } .intro-info .lead { text-align: left; padding-left: 13rem; } .about-content { position: relative; text-align: left; max-width: 850px; margin-bottom: 3.6rem; } .about-content h3 { font-family: \"poppins-bold\", sans-serif; font-size: 1.8rem; text-transform: uppercase; letter-spacing: .25rem; } .about-content .info-list { list-style: none; margin-left: 0; } .about-content .info-list li { padding: 0 0 1.5rem 0; margin-bottom: .6rem; } .about-content .info-list li strong { font-family: \"poppins-bold\", sans-serif; color: #313131; text-transform: uppercase; letter-spacing: .2rem; font-size: 1.5rem; line-height: 3rem; } .about-content .info-list li span { display: block; font-family: \"poppins-regular\", sans-serif; color: #888888; font-size: 1.5rem; line-height: 1; } .about-content .skill-bars { margin-top: 6rem; } .button-section { text-align: center; } .button-section .button { width: 250px; } .button-section [class*=\"col-\"] .button:first-child { margin-right: 4rem; } /** * responsive: * about * ------------------------------------------------------------------- */ @media only screen and (max-width:1024px) { .intro-info { margin-right: 0; margin-left: 0; } } @media only screen and (max-width:768px) { .intro-info img { height: 7.8rem; width: 7.8rem; } .intro-info .lead { padding-left: 11rem; } .about-content h3 { text-align: center; } .about-content .info-list, .about-content .skill-bars { margin-bottom: 4.2rem; } .button-section .button { width: 100%; margin-bottom: 3rem; } .button-section [class*=\"col-\"] .button:first-child { margin-right: 0; } } @media only screen and (max-width:600px) { .intro-info { text-align: center; margin-top: 3rem; } .intro-info img { height: 6.6rem; width: 6.6rem; float: none; display: inline-block; } .intro-info .lead { padding-left: 0; text-align: center; } } /** * =================================================================== * 12. resume - (_layout.scss) * * ------------------------------------------------------------------- */ #resume { padding-top: 12rem; padding-bottom: 12rem; } #resume .resume-header { text-align: center; } #resume .resume-header h2 { color: #FF0077; } #resume .resume-timeline { max-width: 980px; } #resume .timeline-wrap { position: relative; margin-top: 1.5rem; margin-bottom: 6rem; } #resume .timeline-wrap::before { content: \"\"; display: block; width: 1px; height: 100%; background: rgba(0, 0, 0, 0.1); position: absolute; left: 35%; top: 0; } #resume .timeline-block { position: relative; padding-top: 1.5rem; } #resume .timeline-ico { height: 4.8rem; width: 4.8rem; line-height: 4.8rem; background: #313131; border-radius: 50%; text-align: center; color: #FFFFFF; position: absolute; left: 35%; top: .9rem; margin-left: -2.4rem; } #resume .timeline-ico i { position: relative; left: .05rem; top: .2rem; } #resume .timeline-header { float: left; width: 35%; padding-right: 90px; text-align: right; } #resume .timeline-header h3 { margin-bottom: 0; } #resume .timeline-header p { font-family: \"poppins-regular\", sans-serif; font-size: 1.6rem; color: #888888; } #resume .timeline-content { margin-left: 35%; padding-left: 60px; } #resume .timeline-content h4 { position: relative; padding-bottom: 1.8rem; } #resume .timeline-content h4::after { content: \"\"; display: block; height: 3px; width: 50px; background: rgba(0, 0, 0, 0.2); position: absolute; left: 0; bottom: 0; } /** * responsive: * resume * ------------------------------------------------------------------- */ @media only screen and (max-width:1024px) { #resume .timeline-header { padding-right: 50px; } #resume .timeline-header h3 { font-size: 1.8rem; } #resume .timeline-header p { font-size: 1.4rem; } #resume .timeline-content { padding-left: 50px; } } @media only screen and (max-width:768px) { #resume .timeline-wrap::before { left: 2.4rem; } #resume .timeline-ico { left: 2.4rem; } #resume .timeline-header { float: none; width: auto; padding-right: 15px; text-align: left; } #resume .timeline-header h3 { font-size: 2rem; } #resume .timeline-header p { font-size: 1.5rem; margin-bottom: 1.5rem; } #resume .timeline-content { margin: 0; } #resume .timeline-content h4 { padding-bottom: 0; padding-top: 2.1rem; margin-bottom: .6rem; font-size: 1.7rem; } #resume .timeline-content h4::after { bottom: auto; top: 0; } #resume .timeline-header, #resume .timeline-content { padding-left: 7rem; } } @media only screen and (max-width:480px) { #resume .resume-header h2 { font-size: 2.2rem; } #resume .timeline-wrap::before { left: 1.8rem; } #resume .timeline-ico { height: 3.6rem; width: 3.6rem; line-height: 3.6rem; left: 1.8rem; margin-left: -1.8rem; font-size: 1.5rem; } #resume .timeline-header, #resume .timeline-content { padding-left: 5.5rem; } } /** * =================================================================== * 13. portfolio - (_layout.scss) * * ------------------------------------------------------------------- */ #portfolio { background: #FFFFFF; padding-top: 12rem; padding-bottom: 12rem; } #portfolio .folio-item { padding: 0; position: relative; overflow: hidden; } #portfolio .folio-item img { vertical-align: middle; -moz-transition: all 0.5s ease-in-out; -o-transition: all 0.5s ease-in-out; -webkit-transition: all 0.5s ease-in-out; -ms-transition: all 0.5s ease-in-out; transition: all 0.5s ease-in-out; } #portfolio .overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: transparent; -moz-transition: all 0.5s ease-in-out; -o-transition: all 0.5s ease-in-out; -webkit-transition: all 0.5s ease-in-out; -ms-transition: all 0.5s ease-in-out; transition: all 0.5s ease-in-out; } #portfolio .folio-item-table { display: table; width: 100%; height: 100%; } #portfolio .folio-item-cell { display: table-cell; vertical-align: middle; text-align: center; -moz-transition: all 0.5s ease-in-out; -o-transition: all 0.5s ease-in-out; -webkit-transition: all 0.5s ease-in-out; -ms-transition: all 0.5s ease-in-out; transition: all 0.5s ease-in-out; position: relative; left: -100%; } #portfolio .folio-title { color: #FFFFFF; font-size: 3.3rem; padding: 0 3rem; margin-bottom: 0; } #portfolio .folio-types { margin: 0; padding: 0; text-transform: uppercase; font-family: \"poppins-regular\", sans-serif; font-size: 1.2rem; letter-spacing: .1rem; color: rgba(255, 255, 255, 0.6); } #portfolio .folio-item:hover .overlay { background: rgba(0, 0, 0, 0.8); } #portfolio .folio-item:hover .folio-item-cell { left: 0; } #portfolio .folio-item:hover img { -webkit-transform: scale(1.05); -ms-transform: scale(1.05); transform: scale(1.05); } /** * responsive: * portfolio * ------------------------------------------------------------------- */ @media only screen and (max-width:1024px) { #portfolio .folio-title { font-size: 3.1rem; } } @media only screen and (max-width:768px) { #portfolio .folio-title { font-size: 2.5rem; } } @media only screen and (max-width:400px) { #portfolio .folio-title { font-size: 2.2rem; } } /** * Popup Modal - (_layout.scss) * ------------------------------------------------------------------ */ .popup-modal { max-width: 550px; background: #FFFFFF; position: relative; margin: 0 auto; } .popup-modal .media { position: relative; } .popup-modal img { vertical-align: bottom; } .popup-modal .description-box { padding: 1.8rem 3.6rem 3rem; } .popup-modal .description-box h4 { font-family: \"poppins-bold\", sans-serif; font-size: 1.5rem; line-height: 2.4rem; margin-bottom: .6rem; } .popup-modal .description-box p { font-family: \"poppins-regular\", sans-serif; font-size: 1.4rem; line-height: 2.4rem; margin-bottom: 12px; } .popup-modal .categories { font-family: \"poppins-bold\", sans-serif; font-size: 1.1rem; line-height: 1.8rem; text-transform: uppercase; letter-spacing: .1rem; display: block; text-align: left; color: rgba(0, 0, 0, 0.5); } .popup-modal .link-box { width: 100%; overflow: hidden; background: #000000; } .popup-modal .link-box a { font-family: \"poppins-bold\", sans-serif; font-size: 1.2rem; line-height: 6rem; color: #FFFFFF; text-transform: uppercase; letter-spacing: 3px; cursor: pointer; display: block; text-align: center; float: left; width: 50%; -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } .popup-modal .link-box a:first-child { border-right: 1px solid rgba(200, 200, 200, 0.1); } .popup-modal .link-box a:hover { background: #cc005f; border: none; } @media only screen and (max-width:600px) { .popup-modal { width: auto; margin: 0 20px; } } /** * transition effect for modal popup - (_layout.scss) * ------------------------------------------------------------------ */ /* overlay at start */ .mfp-fade.mfp-bg { opacity: 0; -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } /* overlay animate in */ .mfp-fade.mfp-bg.mfp-ready { opacity: .9; } /* overlay animate out */ .mfp-fade.mfp-bg.mfp-removing { opacity: 0; } /* content at start */ .mfp-fade.mfp-wrap .mfp-content { opacity: 0; -webkit-transform: translateY(-100%); -ms-transform: translateY(-100%); transform: translateY(-100%); -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } /* content animate in */ .mfp-fade.mfp-wrap.mfp-ready .mfp-content { opacity: 1; -webkit-transform: translateY(0); -ms-transform: translateY(0); transform: translateY(0); } /* content animate out */ .mfp-fade.mfp-wrap.mfp-removing .mfp-content { opacity: 0; -webkit-transform: translateY(-100%); -ms-transform: translateY(-100%); transform: translateY(-100%); } /** * =================================================================== * 14. call-to-action section - (_layout.scss) * * ------------------------------------------------------------------- */ #cta { padding-top: 10.2rem; padding-bottom: 9rem; text-align: center; } #cta p.lead { color: #6e6e6e; } .cta-content { max-width: 640px; } .cta-thumb { display: inline-block; margin-bottom: 1.2rem; } .cta-thumb img { height: 7.8rem; width: 7.8rem; border-radius: 50%; } /** * section ads - (_layout.scss) * ------------------------------------------------------------------- */ .section-ads h2 { position: relative; padding-bottom: 2.1rem; } .section-ads h2::after { content: \"\"; display: block; height: 3px; width: 80px; background: rgba(0, 0, 0, 0.2); position: absolute; left: 50%; bottom: 0; margin-left: -40px; } .section-ads h2 a, .section-ads h2 a:visited { color: #313131; } .section-ads span { color: #3F0D39; } /** * responsive: * cta * ------------------------------------------------------------------- */ @media only screen and (max-width:650px) { .cta-content { max-width: 650px; } .cta-content h2 { font-size: 2.4rem; } } /** * =================================================================== * 15. services - (_layout.scss) * * ------------------------------------------------------------------- */ #services { background: #313131 url(../images/bg.jpg) no-repeat center; -webkit-background-size: cover; -moz-background-size: cover; background-size: cover; padding-top: 12rem; padding-bottom: 12rem; color: white; position: relative; } #services .overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: #151515; opacity: .9; } #services .section-intro { margin-bottom: 1.8rem; } #services .section-intro h1 { color: white; } #services .section-intro h5 { color: #FF0077; } #services .section-intro p { color: rgba(255, 255, 255, 0.7); } .services-content { max-width: 1200px; } .services-list { margin-top: 1.2rem; text-align: center; } .services-list .service { margin-bottom: 1.2rem; padding: 0 30px; } .services-list .icon { display: inline-block; margin-bottom: 2.1rem; } .services-list .icon i { font-size: 5.4rem; color: #FF0077; } .services-list h3 { color: #FFFFFF; } .services-list .desc { color: rgba(255, 255, 255, 0.6); } /* pagination */ .owl-pagination { text-align: center; width: 100%; margin: .6rem 0 0; } .owl-theme .owl-controls .owl-page { display: inline-block; } .owl-theme .owl-controls .owl-page span { display: block; width: 1.2rem; height: 1.2rem; margin: 1.2rem .8rem 0 .8rem; border-radius: 50%; display: inline-block; background: #FFFFFF; } .owl-theme .owl-controls .owl-page.active span { background: #FF0077; } /** * =================================================================== * 16. stats - (_layout.scss) * * ------------------------------------------------------------------- */ #stats { background: #990047; padding-top: 7.2rem; padding-bottom: 6rem; text-align: center; } #stats .row { max-width: 1440px; } #stats .stat { border-left: 1px solid rgba(255, 255, 255, 0.12); min-height: 17.4rem; } #stats .stat:first-child { border: none; } #stats .icon-part i { font-size: 4.8rem; color: #000000; } #stats .stat-count { color: #FFFFFF; font-size: 3.6rem; margin-top: 1.2rem; margin-bottom: 0; font-family: \"poppins-medium\", sans-serif; color: white; } #stats .stat-title { color: rgba(255, 255, 255, 0.5); } /** * responsive: * stats * ------------------------------------------------------------------- */ @media only screen and (max-width:1024px) { #stats .stat:nth-child(n) { border-left: 1px solid rgba(255, 255, 255, 0.12); padding-bottom: 1.5rem; } #stats .stat:nth-child(3n+1) { border: none; } } @media only screen and (max-width:768px) { #stats .stat:nth-child(n) { border-left: 1px solid rgba(255, 255, 255, 0.12); } #stats .stat:nth-child(2n+1) { border: none; } } @media only screen and (max-width:600px) { #stats .stat:nth-child(n) { border: none; } } /** * =================================================================== * 17. contact - (_layout.scss) * * ------------------------------------------------------------------- */ #contact { background: #151515; padding-top: 12rem; padding-bottom: 7.2rem; } #contact .section-intro h1 { color: white; } #contact .section-intro h5 { color: #FF0077; } #contact .section-intro p { color: rgba(255, 255, 255, 0.7); } /* contact form */ .contact-form { max-width: 740px; } .contact-form ::-webkit-input-placeholder { color: rgba(255, 255, 255, 0.3); } .contact-form :-moz-placeholder { color: rgba(255, 255, 255, 0.3); /* Firefox 18- */ } .contact-form ::-moz-placeholder { color: rgba(255, 255, 255, 0.3); /* Firefox 19+ */ } .contact-form :-ms-input-placeholder { color: rgba(255, 255, 255, 0.3); } .contact-form .placeholder { color: rgba(255, 255, 255, 0.3) !important; } #contact form { margin-top: 0; margin-bottom: 3rem; } #contact form .form-field { position: relative; } #contact form .form-field:before, #contact form .form-field:after { content: \"\"; display: table; } #contact form .form-field:after { clear: both; } #contact form .form-field label { font-family: \"poppins-bold\", sans-serif; font-size: 1.1rem; line-height: 2.4rem; position: absolute; bottom: -1.2rem; right: .6rem; text-transform: uppercase; letter-spacing: .1rem; padding: 0 2rem; margin: 0; color: #FFFFFF; background: #FF0077; } #contact form .form-field label::after { position: absolute; left: -5px; top: 50%; margin-top: -6px; border-top: 5px solid transparent; border-bottom: 5px solid transparent; border-right: 5px solid #FF0077; content: \"\"; } #contact input[type=\"text\"], #contact input[type=\"password\"], #contact input[type=\"email\"], #contact textarea { width: 100%; color: rgba(255, 255, 255, 0.7); margin-bottom: 0; border: none; border-bottom: 1px solid rgba(255, 255, 255, 0.1); } #contact input[type=\"text\"], #contact input[type=\"password\"], #contact input[type=\"email\"] { height: 6.6rem; padding: 1.8rem 2rem; } #contact input[type=\"text\"]:focus, #contact input[type=\"password\"]:focus, #contact input[type=\"email\"]:focus { border-color: #FF0077; color: #FFFFFF; } #contact textarea { min-height: 20rem; padding: 1.8rem 2rem; } #contact textarea:focus { border-color: #FF0077; color: #FFFFFF; } #contact button.submitform { font-size: 1.5rem; display: block; letter-spacing: .2rem; height: 6.6rem; line-height: 6.6rem; padding: 0 3rem; margin-top: 4.8rem; width: 100%; background: #FF0077; color: #FFFFFF; } #contact button.submitform:hover, #contact button.submitform:focus { background: #cc005f; } #message-warning, #message-success { display: none; background: #0d0d0d; border-radius: 3px; padding: 3rem; margin-bottom: 3.6rem; width: 100%; } #message-warning { color: #fa0003; } #message-success { color: #FF0077; } #message-warning i, #message-success i { margin-right: 10px; } /* form loader */ #submit-loader { display: none; position: relative; left: 0; top: 1.8rem; width: 100%; text-align: center; } #submit-loader .text-loader { display: none; font-family: \"poppins-bold\", sans-serif; color: #FFFFFF; letter-spacing: .3rem; text-transform: uppercase; } .oldie #submit-loader .s-loader { display: none; } .oldie #submit-loader .text-loader { display: block; } .contact-info { margin: 4.8rem auto 0; font-family: \"poppins-regular\", sans-serif; font-size: 1.5rem; text-align: center; } .contact-info .collapse { padding: 0; } .contact-info .icon { margin-bottom: 2.1rem; } .contact-info .icon i { font-size: 4.2rem; color: #FFFFFF; } .contact-info h5 { color: #FF0077; } /** * loader animation - (_layout.scss) * --------------------------------------------------------------- */ .s-loader { margin: 1.2rem auto 3rem; width: 70px; text-align: center; -webkit-transform: translateX(0.45rem); -ms-transform: translateX(0.45rem); transform: translateX(0.45rem); } .s-loader > div { width: 1rem; height: 1rem; background-color: #FFFFFF; border-radius: 100%; display: inline-block; margin-right: .9rem; -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both; animation: sk-bouncedelay 1.4s infinite ease-in-out both; } .s-loader .bounce1 { -webkit-animation-delay: -0.32s; animation-delay: -0.32s; } .s-loader .bounce2 { -webkit-animation-delay: -0.16s; animation-delay: -0.16s; } @-webkit-keyframes sk-bouncedelay { 0%, 80%, 100% { -webkit-transform: scale(0); -ms-transform: scale(0); transform: scale(0); } 40% { -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); } } @keyframes sk-bouncedelay { 0%, 80%, 100% { -webkit-transform: scale(0); -ms-transform: scale(0); transform: scale(0); } 40% { -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); } } /** * =================================================================== * 18. footer - (_layout.scss) * * ------------------------------------------------------------------- */ footer { padding-bottom: 3rem; font-size: 1.4rem; font-family: \"poppins-regular\", sans-serif; } footer a, footer a:visited { color: #FFFFFF; } footer a:hover, footer a:focus { color: #FF0077; } footer .row { max-width: 900px; } footer .social { text-align: right; } footer .footer-social { display: inline-block; font-size: 2.1rem; margin: 0; padding: 0; position: relative; top: -.3rem; } footer .footer-social li { display: inline-block; margin: 0 12px; padding: 0; } footer .footer-social li a { color: #FFFFFF; } footer .copyright span { display: inline-block; } footer .copyright span::after { content: \"|\"; display: inline-block; padding: 0 1rem 0 1.2rem; color: rgba(255, 255, 255, 0.1); } footer .copyright span:last-child::after { display: none; } /** * responsive: * footer * ------------------------------------------------------------------- */ @media only screen and (max-width:768px) { footer { text-align: center; } footer .social { display: block; width: 100%; text-align: center; margin-bottom: 1.5rem; } footer .copyright span { display: block; } footer .copyright span::after { display: none; } } /** * go to top - (_layout.scss) * ------------------------------------------------------------------- */ #go-top { position: fixed; bottom: 0; right: 0; z-index: 600; display: none; } #go-top a { text-decoration: none; border: 0 none; display: block; height: 6.6rem; width: 6rem; line-height: 6.6rem; text-align: center; background: #cc005f; color: #FFFFFF; text-align: center; text-transform: uppercase; -moz-transition: all 0.3s ease-in-out; -o-transition: all 0.3s ease-in-out; -webkit-transition: all 0.3s ease-in-out; -ms-transition: all 0.3s ease-in-out; transition: all 0.3s ease-in-out; } #go-top a i { font-size: 1.6rem; line-height: inherit; } #go-top a:hover { background: #000000; } /*# sourceMappingURL=main.css.map */"},{"title":"","date":"2017-07-21T08:30:36.405Z","updated":"2015-08-26T07:04:46.000Z","comments":true,"path":"about/js/modernizr.js","permalink":"http://yoursite.com/about/js/modernizr.js","excerpt":"","text":"/* Modernizr 2.8.3 (Custom Build) | MIT & BSD * Build: http://modernizr.com/download/#-shiv-cssclasses-load */ ;window.Modernizr=function(a,b,c){function u(a){j.cssText=a}function v(a,b){return u(prefixes.join(a+\";\")+(b||\"\"))}function w(a,b){return typeof a===b}function x(a,b){return!!~(\"\"+a).indexOf(b)}function y(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:w(f,\"function\")?f.bind(d||b):f}return!1}var d=\"2.8.3\",e={},f=!0,g=b.documentElement,h=\"modernizr\",i=b.createElement(h),j=i.style,k,l={}.toString,m={},n={},o={},p=[],q=p.slice,r,s={}.hasOwnProperty,t;!w(s,\"undefined\")&&!w(s.call,\"undefined\")?t=function(a,b){return s.call(a,b)}:t=function(a,b){return b in a&&w(a.constructor.prototype[b],\"undefined\")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!=\"function\")throw new TypeError;var d=q.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(q.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(q.call(arguments)))};return e});for(var z in m)t(m,z)&&(r=z.toLowerCase(),e[r]=m[z](),p.push((e[r]?\"\":\"no-\")+r));return e.addTest=function(a,b){if(typeof a==\"object\")for(var d in a)t(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b==\"function\"?b():b,typeof f!=\"undefined\"&&f&&(g.className+=\" \"+(b?\"\":\"no-\")+a),e[a]=b}return e},u(\"\"),i=k=null,function(a,b){function l(a,b){var c=a.createElement(\"p\"),d=a.getElementsByTagName(\"head\")[0]||a.documentElement;return c.innerHTML=\"x\"+b+\"\",d.insertBefore(c.lastChild,d.firstChild)}function m(){var a=s.elements;return typeof a==\"string\"?a.split(\" \"):a}function n(a){var b=j[a[h]];return b||(b={},i++,a[h]=i,j[i]=b),b}function o(a,c,d){c||(c=b);if(k)return c.createElement(a);d||(d=n(c));var g;return d.cache[a]?g=d.cache[a].cloneNode():f.test(a)?g=(d.cache[a]=d.createElem(a)).cloneNode():g=d.createElem(a),g.canHaveChildren&&!e.test(a)&&!g.tagUrn?d.frag.appendChild(g):g}function p(a,c){a||(a=b);if(k)return a.createDocumentFragment();c=c||n(a);var d=c.frag.cloneNode(),e=0,f=m(),g=f.length;for(;e"},{"title":"","date":"2017-07-21T08:30:36.405Z","updated":"2016-02-29T08:56:04.000Z","comments":true,"path":"about/js/pace.min.js","permalink":"http://yoursite.com/about/js/pace.min.js","excerpt":"","text":"/*! pace 1.0.0 */ (function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];cQ;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='\\n \\n\\n',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\" pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e,f;f=[];for(d in b.prototype)try{e=b.prototype[d],f.push(null==a[d]&&\"function\"!=typeof e?a[d]=e:void 0)}catch(g){c=g}return f},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyStatec;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define(function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);"},{"title":"","date":"2017-07-21T08:30:36.405Z","updated":"2015-05-12T06:52:28.000Z","comments":true,"path":"about/js/jquery-2.1.3.min.js","permalink":"http://yoursite.com/about/js/jquery-2.1.3.min.js","excerpt":"","text":"/*! jQuery v2.1.3 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */ !function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m=\"2.1.3\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return\"object\"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,\"isPrototypeOf\")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?h[i.call(a)]||\"object\":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf(\"use strict\")?(b=l.createElement(\"script\"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return\"string\"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(a,b){h[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=hb(),z=hb(),A=hb(),B=function(a,b){return a===b&&(l=!0),0},C=1"},{"title":"","date":"2017-07-21T08:30:36.409Z","updated":"2016-03-01T06:44:58.000Z","comments":true,"path":"about/js/plugins.js","permalink":"http://yoursite.com/about/js/plugins.js","excerpt":"","text":"/** * =================================================================== * javascript plugins * * ------------------------------------------------------------------- */ /* HTML5 Placeholder jQuery Plugin - v2.1.2 * Copyright (c)2015 Mathias Bynens * 2015-06-09 */ !function(a){\"function\"==typeof define&&define.amd?define([\"jquery\"],a):a(\"object\"==typeof module&&module.exports?require(\"jquery\"):jQuery)}(function(a){function b(b){var c={},d=/^jQuery\\d+$/;return a.each(b.attributes,function(a,b){b.specified&&!d.test(b.name)&&(c[b.name]=b.value)}),c}function c(b,c){var d=this,f=a(d);if(d.value==f.attr(\"placeholder\")&&f.hasClass(m.customClass))if(f.data(\"placeholder-password\")){if(f=f.hide().nextAll('input[type=\"password\"]:first').show().attr(\"id\",f.removeAttr(\"id\").data(\"placeholder-id\")),b===!0)return f[0].value=c;f.focus()}else d.value=\"\",f.removeClass(m.customClass),d==e()&&d.select()}function d(){var d,e=this,f=a(e),g=this.id;if(\"\"===e.value){if(\"password\"===e.type){if(!f.data(\"placeholder-textinput\")){try{d=f.clone().prop({type:\"text\"})}catch(h){d=a(\"\").attr(a.extend(b(this),{type:\"text\"}))}d.removeAttr(\"name\").data({\"placeholder-password\":f,\"placeholder-id\":g}).bind(\"focus.placeholder\",c),f.data({\"placeholder-textinput\":d,\"placeholder-id\":g}).before(d)}f=f.removeAttr(\"id\").hide().prevAll('input[type=\"text\"]:first').attr(\"id\",g).show()}f.addClass(m.customClass),f[0].value=f.attr(\"placeholder\")}else f.removeClass(m.customClass)}function e(){try{return document.activeElement}catch(a){}}var f,g,h=\"[object OperaMini]\"==Object.prototype.toString.call(window.operamini),i=\"placeholder\"in document.createElement(\"input\")&&!h,j=\"placeholder\"in document.createElement(\"textarea\")&&!h,k=a.valHooks,l=a.propHooks;if(i&&j)g=a.fn.placeholder=function(){return this},g.input=g.textarea=!0;else{var m={};g=a.fn.placeholder=function(b){var e={customClass:\"placeholder\"};m=a.extend({},e,b);var f=this;return f.filter((i?\"textarea\":\":input\")+\"[placeholder]\").not(\".\"+m.customClass).bind({\"focus.placeholder\":c,\"blur.placeholder\":d}).data(\"placeholder-enabled\",!0).trigger(\"blur.placeholder\"),f},g.input=i,g.textarea=j,f={get:function(b){var c=a(b),d=c.data(\"placeholder-password\");return d?d[0].value:c.data(\"placeholder-enabled\")&&c.hasClass(m.customClass)?\"\":b.value},set:function(b,f){var g=a(b),h=g.data(\"placeholder-password\");return h?h[0].value=f:g.data(\"placeholder-enabled\")?(\"\"===f?(b.value=f,b!=e()&&d.call(b)):g.hasClass(m.customClass)?c.call(b,!0,f)||(b.value=f):b.value=f,g):b.value=f}},i||(k.input=f,l.value=f),j||(k.textarea=f,l.value=f),a(function(){a(document).delegate(\"form\",\"submit.placeholder\",function(){var b=a(\".\"+m.customClass,this).each(c);setTimeout(function(){b.each(d)},10)})}),a(window).bind(\"beforeunload.placeholder\",function(){a(\".\"+m.customClass).each(function(){this.value=\"\"})})}}); /* jshint browser:true * ! * FitVids 1.1 * * Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com * Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/ * Released under the WTFPL license - http://sam.zoy.org/wtfpl/ * */ !function(a){\"use strict\";a.fn.fitVids=function(b){var c={customSelector:null,ignore:null};if(!document.getElementById(\"fit-vids-style\")){var d=document.head||document.getElementsByTagName(\"head\")[0],e=\".fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}\",f=document.createElement(\"div\");f.innerHTML='x'+e+\"\",d.appendChild(f.childNodes[1])}return b&&a.extend(c,b),this.each(function(){var b=['iframe[src*=\"player.vimeo.com\"]','iframe[src*=\"youtube.com\"]','iframe[src*=\"youtube-nocookie.com\"]','iframe[src*=\"kickstarter.com\"][src*=\"video.html\"]',\"object\",\"embed\"];c.customSelector&&b.push(c.customSelector);var d=\".fitvidsignore\";c.ignore&&(d=d+\", \"+c.ignore);var e=a(this).find(b.join(\",\"));e=e.not(\"object object\"),e=e.not(d),e.each(function(b){var c=a(this);if(!(c.parents(d).length>0||\"embed\"===this.tagName.toLowerCase()&&c.parent(\"object\").length||c.parent(\".fluid-width-video-wrapper\").length)){c.css(\"height\")||c.css(\"width\")||!isNaN(c.attr(\"height\"))&&!isNaN(c.attr(\"width\"))||(c.attr(\"height\",9),c.attr(\"width\",16));var e=\"object\"===this.tagName.toLowerCase()||c.attr(\"height\")&&!isNaN(parseInt(c.attr(\"height\"),10))?parseInt(c.attr(\"height\"),10):c.height(),f=isNaN(parseInt(c.attr(\"width\"),10))?c.width():parseInt(c.attr(\"width\"),10),g=e/f;if(!c.attr(\"id\")){var h=\"fitvid\"+b;c.attr(\"id\",h)}c.wrap('').parent(\".fluid-width-video-wrapper\").css(\"padding-top\",100*g+\"%\"),c.removeAttr(\"height\").removeAttr(\"width\")}})})}}(window.jQuery||window.Zepto); /* global jQuery * ! * FitText.js 1.2 * * Copyright 2011, Dave Rupert http://daverupert.com * Released under the WTFPL license * http://sam.zoy.org/wtfpl/ * * Date: Thu May 05 14:23:00 2011 -0600 */ (function( $ ){ $.fn.fitText = function( kompressor, options ) { // Setup options var compressor = kompressor || 1, settings = $.extend({ 'minFontSize' : Number.NEGATIVE_INFINITY, 'maxFontSize' : Number.POSITIVE_INFINITY }, options); return this.each(function(){ // Store the object var $this = $(this); // Resizer() resizes items based on the object width divided by the compressor * 10 var resizer = function () { $this.css('font-size', Math.max(Math.min($this.width() / (compressor*10), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize))); }; // Call once to set. resizer(); // Call on resize. Opera debounces their resize by default. $(window).on('resize.fittext orientationchange.fittext', resizer); }); }; })( jQuery ); /* jQuery OwlCarousel v1.3.3 * * Copyright (c) 2013 Bartosz Wojciechowski * http://www.owlgraphic.com/owlcarousel/ * * Licensed under MIT * */ \"function\"!==typeof Object.create&&(Object.create=function(f){function g(){}g.prototype=f;return new g}); (function(f,g,k){var l={init:function(a,b){this.$elem=f(b);this.options=f.extend({},f.fn.owlCarousel.options,this.$elem.data(),a);this.userOptions=a;this.loadContent()},loadContent:function(){function a(a){var d,e=\"\";if(\"function\"===typeof b.options.jsonSuccess)b.options.jsonSuccess.apply(this,[a]);else{for(d in a.owl)a.owl.hasOwnProperty(d)&&(e+=a.owl[d].item);b.$elem.html(e)}b.logIn()}var b=this,e;\"function\"===typeof b.options.beforeInit&&b.options.beforeInit.apply(this,[b.$elem]);\"string\"===typeof b.options.jsonPath? (e=b.options.jsonPath,f.getJSON(e,a)):b.logIn()},logIn:function(){this.$elem.data(\"owl-originalStyles\",this.$elem.attr(\"style\"));this.$elem.data(\"owl-originalClasses\",this.$elem.attr(\"class\"));this.$elem.css({opacity:0});this.orignalItems=this.options.items;this.checkBrowser();this.wrapperWidth=0;this.checkVisible=null;this.setVars()},setVars:function(){if(0===this.$elem.children().length)return!1;this.baseClass();this.eventTypes();this.$userItems=this.$elem.children();this.itemsAmount=this.$userItems.length; this.wrapItems();this.$owlItems=this.$elem.find(\".owl-item\");this.$owlWrapper=this.$elem.find(\".owl-wrapper\");this.playDirection=\"next\";this.prevItem=0;this.prevArr=[0];this.currentItem=0;this.customEvents();this.onStartup()},onStartup:function(){this.updateItems();this.calculateAll();this.buildControls();this.updateControls();this.response();this.moveEvents();this.stopOnHover();this.owlStatus();!1!==this.options.transitionStyle&&this.transitionTypes(this.options.transitionStyle);!0===this.options.autoPlay&& (this.options.autoPlay=5E3);this.play();this.$elem.find(\".owl-wrapper\").css(\"display\",\"block\");this.$elem.is(\":visible\")?this.$elem.css(\"opacity\",1):this.watchVisibility();this.onstartup=!1;this.eachMoveUpdate();\"function\"===typeof this.options.afterInit&&this.options.afterInit.apply(this,[this.$elem])},eachMoveUpdate:function(){!0===this.options.lazyLoad&&this.lazyLoad();!0===this.options.autoHeight&&this.autoHeight();this.onVisibleItems();\"function\"===typeof this.options.afterAction&&this.options.afterAction.apply(this, [this.$elem])},updateVars:function(){\"function\"===typeof this.options.beforeUpdate&&this.options.beforeUpdate.apply(this,[this.$elem]);this.watchVisibility();this.updateItems();this.calculateAll();this.updatePosition();this.updateControls();this.eachMoveUpdate();\"function\"===typeof this.options.afterUpdate&&this.options.afterUpdate.apply(this,[this.$elem])},reload:function(){var a=this;g.setTimeout(function(){a.updateVars()},0)},watchVisibility:function(){var a=this;if(!1===a.$elem.is(\":visible\"))a.$elem.css({opacity:0}), g.clearInterval(a.autoPlayInterval),g.clearInterval(a.checkVisible);else return!1;a.checkVisible=g.setInterval(function(){a.$elem.is(\":visible\")&&(a.reload(),a.$elem.animate({opacity:1},200),g.clearInterval(a.checkVisible))},500)},wrapItems:function(){this.$userItems.wrapAll('').wrap('');this.$elem.find(\".owl-wrapper\").wrap('');this.wrapperOuter=this.$elem.find(\".owl-wrapper-outer\");this.$elem.css(\"display\",\"block\")}, baseClass:function(){var a=this.$elem.hasClass(this.options.baseClass),b=this.$elem.hasClass(this.options.theme);a||this.$elem.addClass(this.options.baseClass);b||this.$elem.addClass(this.options.theme)},updateItems:function(){var a,b;if(!1===this.options.responsive)return!1;if(!0===this.options.singleItem)return this.options.items=this.orignalItems=1,this.options.itemsCustom=!1,this.options.itemsDesktop=!1,this.options.itemsDesktopSmall=!1,this.options.itemsTablet=!1,this.options.itemsTabletSmall= !1,this.options.itemsMobile=!1;a=f(this.options.responsiveBaseWidth).width();a>(this.options.itemsDesktop[0]||this.orignalItems)&&(this.options.items=this.orignalItems);if(!1!==this.options.itemsCustom)for(this.options.itemsCustom.sort(function(a,b){return a[0]-b[0]}),b=0;bthis.itemsAmount?this.maximumPixels=a=this.maximumItem=0:(this.maximumItem=this.itemsAmount-this.options.items,this.maximumPixels=a);return a},min:function(){return 0},loops:function(){var a=0,b=0,e,c;this.positionsInArray=[0];this.pagesInArray=[];for(e=0;e').toggleClass(\"clickable\",!this.browser.isTouch).appendTo(this.$elem);!0===this.options.pagination&&this.buildPagination();!0===this.options.navigation&&this.buildButtons()},buildButtons:function(){var a=this,b=f('');a.owlControls.append(b);a.buttonPrev= f(\"\",{\"class\":\"owl-prev\",html:a.options.navigationText[0]||\"\"});a.buttonNext=f(\"\",{\"class\":\"owl-next\",html:a.options.navigationText[1]||\"\"});b.append(a.buttonPrev).append(a.buttonNext);b.on(\"touchstart.owlControls mousedown.owlControls\",'div[class^=\"owl\"]',function(a){a.preventDefault()});b.on(\"touchend.owlControls mouseup.owlControls\",'div[class^=\"owl\"]',function(b){b.preventDefault();f(this).hasClass(\"owl-next\")?a.next():a.prev()})},buildPagination:function(){var a=this;a.paginationWrapper= f('');a.owlControls.append(a.paginationWrapper);a.paginationWrapper.on(\"touchend.owlControls mouseup.owlControls\",\".owl-page\",function(b){b.preventDefault();Number(f(this).data(\"owl-page\"))!==a.currentItem&&a.goTo(Number(f(this).data(\"owl-page\")),!0)})},updatePagination:function(){var a,b,e,c,d,g;if(!1===this.options.pagination)return!1;this.paginationWrapper.html(\"\");a=0;b=this.itemsAmount-this.itemsAmount%this.options.items;for(c=0;c=this.itemsAmount?this.owlControls.hide():this.owlControls.show())},destroyControls:function(){this.owlControls&&this.owlControls.remove()},next:function(a){if(this.isTransition)return!1; this.currentItem+=!0===this.options.scrollPerPage?this.options.items:1;if(this.currentItem>this.maximumItem+(!0===this.options.scrollPerPage?this.options.items-1:0))if(!0===this.options.rewindNav)this.currentItem=0,a=\"rewind\";else return this.currentItem=this.maximumItem,!1;this.goTo(this.currentItem,a)},prev:function(a){if(this.isTransition)return!1;this.currentItem=!0===this.options.scrollPerPage&&0=c.maximumItem?a=c.maximumItem:0>=a&&(a=0);c.currentItem=c.owl.currentItem=a;if(!1!==c.options.transitionStyle&&\"drag\"!==e&&1===c.options.items&&!0===c.browser.support3d)return c.swapSpeed(0), !0===c.browser.support3d?c.transition3d(c.positionsInArray[a]):c.css2slide(c.positionsInArray[a],1),c.afterGo(),c.singleItemTransition(),!1;a=c.positionsInArray[a];!0===c.browser.support3d?(c.isCss3Finish=!1,!0===b?(c.swapSpeed(\"paginationSpeed\"),g.setTimeout(function(){c.isCss3Finish=!0},c.options.paginationSpeed)):\"rewind\"===b?(c.swapSpeed(c.options.rewindSpeed),g.setTimeout(function(){c.isCss3Finish=!0},c.options.rewindSpeed)):(c.swapSpeed(\"slideSpeed\"),g.setTimeout(function(){c.isCss3Finish=!0}, c.options.slideSpeed)),c.transition3d(a)):!0===b?c.css2slide(a,c.options.paginationSpeed):\"rewind\"===b?c.css2slide(a,c.options.rewindSpeed):c.css2slide(a,c.options.slideSpeed);c.afterGo()},jumpTo:function(a){\"function\"===typeof this.options.beforeMove&&this.options.beforeMove.apply(this,[this.$elem]);a>=this.maximumItem||-1===a?a=this.maximumItem:0>=a&&(a=0);this.swapSpeed(0);!0===this.browser.support3d?this.transition3d(this.positionsInArray[a]):this.css2slide(this.positionsInArray[a],1);this.currentItem= this.owl.currentItem=a;this.afterGo()},afterGo:function(){this.prevArr.push(this.currentItem);this.prevItem=this.owl.prevItem=this.prevArr[this.prevArr.length-2];this.prevArr.shift(0);this.prevItem!==this.currentItem&&(this.checkPagination(),this.checkNavigation(),this.eachMoveUpdate(),!1!==this.options.autoPlay&&this.checkAp());\"function\"===typeof this.options.afterMove&&this.prevItem!==this.currentItem&&this.options.afterMove.apply(this,[this.$elem])},stop:function(){this.apStatus=\"stop\";g.clearInterval(this.autoPlayInterval)}, checkAp:function(){\"stop\"!==this.apStatus&&this.play()},play:function(){var a=this;a.apStatus=\"play\";if(!1===a.options.autoPlay)return!1;g.clearInterval(a.autoPlayInterval);a.autoPlayInterval=g.setInterval(function(){a.next(!0)},a.options.autoPlay)},swapSpeed:function(a){\"slideSpeed\"===a?this.$owlWrapper.css(this.addCssSpeed(this.options.slideSpeed)):\"paginationSpeed\"===a?this.$owlWrapper.css(this.addCssSpeed(this.options.paginationSpeed)):\"string\"!==typeof a&&this.$owlWrapper.css(this.addCssSpeed(a))}, addCssSpeed:function(a){return{\"-webkit-transition\":\"all \"+a+\"ms ease\",\"-moz-transition\":\"all \"+a+\"ms ease\",\"-o-transition\":\"all \"+a+\"ms ease\",transition:\"all \"+a+\"ms ease\"}},removeTransition:function(){return{\"-webkit-transition\":\"\",\"-moz-transition\":\"\",\"-o-transition\":\"\",transition:\"\"}},doTranslate:function(a){return{\"-webkit-transform\":\"translate3d(\"+a+\"px, 0px, 0px)\",\"-moz-transform\":\"translate3d(\"+a+\"px, 0px, 0px)\",\"-o-transform\":\"translate3d(\"+a+\"px, 0px, 0px)\",\"-ms-transform\":\"translate3d(\"+ a+\"px, 0px, 0px)\",transform:\"translate3d(\"+a+\"px, 0px,0px)\"}},transition3d:function(a){this.$owlWrapper.css(this.doTranslate(a))},css2move:function(a){this.$owlWrapper.css({left:a})},css2slide:function(a,b){var e=this;e.isCssFinish=!1;e.$owlWrapper.stop(!0,!0).animate({left:a},{duration:b||e.options.slideSpeed,complete:function(){e.isCssFinish=!0}})},checkBrowser:function(){var a=k.createElement(\"div\");a.style.cssText=\" -moz-transform:translate3d(0px, 0px, 0px); -ms-transform:translate3d(0px, 0px, 0px); -o-transform:translate3d(0px, 0px, 0px); -webkit-transform:translate3d(0px, 0px, 0px); transform:translate3d(0px, 0px, 0px)\"; a=a.style.cssText.match(/translate3d\\(0px, 0px, 0px\\)/g);this.browser={support3d:null!==a&&1===a.length,isTouch:\"ontouchstart\"in g||g.navigator.msMaxTouchPoints}},moveEvents:function(){if(!1!==this.options.mouseDrag||!1!==this.options.touchDrag)this.gestures(),this.disabledEvents()},eventTypes:function(){var a=[\"s\",\"e\",\"x\"];this.ev_types={};!0===this.options.mouseDrag&&!0===this.options.touchDrag?a=[\"touchstart.owl mousedown.owl\",\"touchmove.owl mousemove.owl\",\"touchend.owl touchcancel.owl mouseup.owl\"]: !1===this.options.mouseDrag&&!0===this.options.touchDrag?a=[\"touchstart.owl\",\"touchmove.owl\",\"touchend.owl touchcancel.owl\"]:!0===this.options.mouseDrag&&!1===this.options.touchDrag&&(a=[\"mousedown.owl\",\"mousemove.owl\",\"mouseup.owl\"]);this.ev_types.start=a[0];this.ev_types.move=a[1];this.ev_types.end=a[2]},disabledEvents:function(){this.$elem.on(\"dragstart.owl\",function(a){a.preventDefault()});this.$elem.on(\"mousedown.disableTextSelect\",function(a){return f(a.target).is(\"input, textarea, select, option\")})}, gestures:function(){function a(a){if(void 0!==a.touches)return{x:a.touches[0].pageX,y:a.touches[0].pageY};if(void 0===a.touches){if(void 0!==a.pageX)return{x:a.pageX,y:a.pageY};if(void 0===a.pageX)return{x:a.clientX,y:a.clientY}}}function b(a){\"on\"===a?(f(k).on(d.ev_types.move,e),f(k).on(d.ev_types.end,c)):\"off\"===a&&(f(k).off(d.ev_types.move),f(k).off(d.ev_types.end))}function e(b){b=b.originalEvent||b||g.event;d.newPosX=a(b).x-h.offsetX;d.newPosY=a(b).y-h.offsetY;d.newRelativeX=d.newPosX-h.relativePos; \"function\"===typeof d.options.startDragging&&!0!==h.dragging&&0!==d.newRelativeX&&(h.dragging=!0,d.options.startDragging.apply(d,[d.$elem]));(8d.newRelativeX)&&!0===d.browser.isTouch&&(void 0!==b.preventDefault?b.preventDefault():b.returnValue=!1,h.sliding=!0);(10d.newPosY)&&!1===h.sliding&&f(k).off(\"touchmove.owl\");d.newPosX=Math.max(Math.min(d.newPosX,d.newRelativeX/5),d.maximumPixels+d.newRelativeX/5);!0===d.browser.support3d?d.transition3d(d.newPosX):d.css2move(d.newPosX)} function c(a){a=a.originalEvent||a||g.event;var c;a.target=a.target||a.srcElement;h.dragging=!1;!0!==d.browser.isTouch&&d.$owlWrapper.removeClass(\"grabbing\");d.dragDirection=0>d.newRelativeX?d.owl.dragDirection=\"left\":d.owl.dragDirection=\"right\";0!==d.newRelativeX&&(c=d.getNewPosition(),d.goTo(c,!1,\"drag\"),h.targetElement===a.target&&!0!==d.browser.isTouch&&(f(a.target).on(\"click.disable\",function(a){a.stopImmediatePropagation();a.stopPropagation();a.preventDefault();f(a.target).off(\"click.disable\")}), a=f._data(a.target,\"events\").click,c=a.pop(),a.splice(0,0,c)));b(\"off\")}var d=this,h={offsetX:0,offsetY:0,baseElWidth:0,relativePos:0,position:null,minSwipe:null,maxSwipe:null,sliding:null,dargging:null,targetElement:null};d.isCssFinish=!0;d.$elem.on(d.ev_types.start,\".owl-wrapper\",function(c){c=c.originalEvent||c||g.event;var e;if(3===c.which)return!1;if(!(d.itemsAmountthis.maximumItem?a=this.currentItem=this.maximumItem:0b[d+1]&&e-a.itemWidth/20this.newRelativeX?(a=\"right\",this.playDirection=\"next\"):(a=\"left\",this.playDirection=\"prev\");return a},customEvents:function(){var a=this;a.$elem.on(\"owl.next\",function(){a.next()});a.$elem.on(\"owl.prev\",function(){a.prev()});a.$elem.on(\"owl.play\",function(b,e){a.options.autoPlay=e;a.play();a.hoverStatus=\"play\"});a.$elem.on(\"owl.stop\",function(){a.stop();a.hoverStatus=\"stop\"});a.$elem.on(\"owl.goTo\",function(b,e){a.goTo(e)}); a.$elem.on(\"owl.jumpTo\",function(b,e){a.jumpTo(e)})},stopOnHover:function(){var a=this;!0===a.options.stopOnHover&&!0!==a.browser.isTouch&&!1!==a.options.autoPlay&&(a.$elem.on(\"mouseover\",function(){a.stop()}),a.$elem.on(\"mouseout\",function(){\"stop\"!==a.hoverStatus&&a.play()}))},lazyLoad:function(){var a,b,e,c,d;if(!1===this.options.lazyLoad)return!1;for(a=0;a=this.currentItem:!0)&&e=f?g.setTimeout(c,100):e()}var d=this,f=0,k;\"DIV\"===b.prop(\"tagName\")?(b.css(\"background-image\",\"url(\"+b.data(\"src\")+\")\"),k=!0):b[0].src=b.data(\"src\");c()},autoHeight:function(){function a(){var a=f(e.$owlItems[e.currentItem]).height();e.wrapperOuter.css(\"height\",a+\"px\");e.wrapperOuter.hasClass(\"autoHeight\")||g.setTimeout(function(){e.wrapperOuter.addClass(\"autoHeight\")},0)}function b(){d+=1;e.completeImg(c.get(0))?a():100>=d?g.setTimeout(b, 100):e.wrapperOuter.css(\"height\",\"\")}var e=this,c=f(e.$owlItems[e.currentItem]).find(\"img\"),d;void 0!==c.get(0)?(d=0,b()):a()},completeImg:function(a){return!a.complete||\"undefined\"!==typeof a.naturalWidth&&0===a.naturalWidth?!1:!0},onVisibleItems:function(){var a;!0===this.options.addClassActive&&this.$owlItems.removeClass(\"active\");this.visibleItems=[];for(a=this.currentItem;a=this.$userItems.length||-1===e?this.$userItems.eq(-1).after(a):this.$userItems.eq(e).before(a);this.setVars()},removeItem:function(a){if(0===this.$elem.children().length)return!1;a=void 0===a||-1===a?-1:a;this.unWrap();this.$userItems.eq(a).remove();this.setVars()}};f.fn.owlCarousel=function(a){return this.each(function(){if(!0=== f(this).data(\"owl-init\"))return!1;f(this).data(\"owl-init\",!0);var b=Object.create(l);b.init(a,this);f.data(this,\"owlCarousel\",b)})};f.fn.owlCarousel.options={items:5,itemsCustom:!1,itemsDesktop:[1199,4],itemsDesktopSmall:[979,3],itemsTablet:[768,2],itemsTabletSmall:!1,itemsMobile:[479,1],singleItem:!1,itemsScaleUp:!1,slideSpeed:200,paginationSpeed:800,rewindSpeed:1E3,autoPlay:!1,stopOnHover:!1,navigation:!1,navigationText:[\"prev\",\"next\"],rewindNav:!0,scrollPerPage:!1,pagination:!0,paginationNumbers:!1, responsive:!0,responsiveRefreshRate:200,responsiveBaseWidth:g,baseClass:\"owl-carousel\",theme:\"owl-theme\",lazyLoad:!1,lazyFollow:!0,lazyEffect:\"fade\",autoHeight:!1,jsonPath:!1,jsonSuccess:!1,dragBeforeAnimFinish:!0,mouseDrag:!0,touchDrag:!0,addClassActive:!1,transitionStyle:!1,beforeUpdate:!1,afterUpdate:!1,beforeInit:!1,afterInit:!1,beforeMove:!1,afterMove:!1,afterAction:!1,startDragging:!1,afterLazyLoad:!1}})(jQuery,window,document); /* ! jQuery Validation Plugin - v1.14.0 - 6/30/2015 * http://jqueryvalidation.org/ * Copyright (c) 2015 Jörn Zaefferer; Licensed MIT */ !function(a){\"function\"==typeof define&&define.amd?define([\"jquery\"],a):a(jQuery)}(function(a){a.extend(a.fn,{validate:function(b){if(!this.length)return void(b&&b.debug&&window.console&&console.warn(\"Nothing selected, can't validate, returning nothing.\"));var c=a.data(this[0],\"validator\");return c?c:(this.attr(\"novalidate\",\"novalidate\"),c=new a.validator(b,this[0]),a.data(this[0],\"validator\",c),c.settings.onsubmit&&(this.on(\"click.validate\",\":submit\",function(b){c.settings.submitHandler&&(c.submitButton=b.target),a(this).hasClass(\"cancel\")&&(c.cancelSubmit=!0),void 0!==a(this).attr(\"formnovalidate\")&&(c.cancelSubmit=!0)}),this.on(\"submit.validate\",function(b){function d(){var d,e;return c.settings.submitHandler?(c.submitButton&&(d=a(\"\").attr(\"name\",c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)),e=c.settings.submitHandler.call(c,c.currentForm,b),c.submitButton&&d.remove(),void 0!==e?e:!1):!0}return c.settings.debug&&b.preventDefault(),c.cancelSubmit?(c.cancelSubmit=!1,d()):c.form()?c.pendingRequest?(c.formSubmitted=!0,!1):d():(c.focusInvalid(),!1)})),c)},valid:function(){var b,c,d;return a(this[0]).is(\"form\")?b=this.validate().form():(d=[],b=!0,c=a(this[0].form).validate(),this.each(function(){b=c.element(this)&&b,d=d.concat(c.errorList)}),c.errorList=d),b},rules:function(b,c){var d,e,f,g,h,i,j=this[0];if(b)switch(d=a.data(j.form,\"validator\").settings,e=d.rules,f=a.validator.staticRules(j),b){case\"add\":a.extend(f,a.validator.normalizeRule(c)),delete f.messages,e[j.name]=f,c.messages&&(d.messages[j.name]=a.extend(d.messages[j.name],c.messages));break;case\"remove\":return c?(i={},a.each(c.split(/\\s/),function(b,c){i[c]=f[c],delete f[c],\"required\"===c&&a(j).removeAttr(\"aria-required\")}),i):(delete e[j.name],f)}return g=a.validator.normalizeRules(a.extend({},a.validator.classRules(j),a.validator.attributeRules(j),a.validator.dataRules(j),a.validator.staticRules(j)),j),g.required&&(h=g.required,delete g.required,g=a.extend({required:h},g),a(j).attr(\"aria-required\",\"true\")),g.remote&&(h=g.remote,delete g.remote,g=a.extend(g,{remote:h})),g}}),a.extend(a.expr[\":\"],{blank:function(b){return!a.trim(\"\"+a(b).val())},filled:function(b){return!!a.trim(\"\"+a(b).val())},unchecked:function(b){return!a(b).prop(\"checked\")}}),a.validator=function(b,c){this.settings=a.extend(!0,{},a.validator.defaults,b),this.currentForm=c,this.init()},a.validator.format=function(b,c){return 1===arguments.length?function(){var c=a.makeArray(arguments);return c.unshift(b),a.validator.format.apply(this,c)}:(arguments.length>2&&c.constructor!==Array&&(c=a.makeArray(arguments).slice(1)),c.constructor!==Array&&(c=[c]),a.each(c,function(a,c){b=b.replace(new RegExp(\"\\\\{\"+a+\"\\\\}\",\"g\"),function(){return c})}),b)},a.extend(a.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:\"error\",validClass:\"valid\",errorElement:\"label\",focusCleanup:!1,focusInvalid:!0,errorContainer:a([]),errorLabelContainer:a([]),onsubmit:!0,ignore:\":hidden\",ignoreTitle:!1,onfocusin:function(a){this.lastActive=a,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(a)))},onfocusout:function(a){this.checkable(a)||!(a.name in this.submitted)&&this.optional(a)||this.element(a)},onkeyup:function(b,c){var d=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===c.which&&\"\"===this.elementValue(b)||-1!==a.inArray(c.keyCode,d)||(b.name in this.submitted||b===this.lastElement)&&this.element(b)},onclick:function(a){a.name in this.submitted?this.element(a):a.parentNode.name in this.submitted&&this.element(a.parentNode)},highlight:function(b,c,d){\"radio\"===b.type?this.findByName(b.name).addClass(c).removeClass(d):a(b).addClass(c).removeClass(d)},unhighlight:function(b,c,d){\"radio\"===b.type?this.findByName(b.name).removeClass(c).addClass(d):a(b).removeClass(c).addClass(d)}},setDefaults:function(b){a.extend(a.validator.defaults,b)},messages:{required:\"This field is required.\",remote:\"Please fix this field.\",email:\"Please enter a valid email address.\",url:\"Please enter a valid URL.\",date:\"Please enter a valid date.\",dateISO:\"Please enter a valid date ( ISO ).\",number:\"Please enter a valid number.\",digits:\"Please enter only digits.\",creditcard:\"Please enter a valid credit card number.\",equalTo:\"Please enter the same value again.\",maxlength:a.validator.format(\"Please enter no more than {0} characters.\"),minlength:a.validator.format(\"Please enter at least {0} characters.\"),rangelength:a.validator.format(\"Please enter a value between {0} and {1} characters long.\"),range:a.validator.format(\"Please enter a value between {0} and {1}.\"),max:a.validator.format(\"Please enter a value less than or equal to {0}.\"),min:a.validator.format(\"Please enter a value greater than or equal to {0}.\")},autoCreateRanges:!1,prototype:{init:function(){function b(b){var c=a.data(this.form,\"validator\"),d=\"on\"+b.type.replace(/^validate/,\"\"),e=c.settings;e[d]&&!a(this).is(e.ignore)&&e[d].call(c,this,b)}this.labelContainer=a(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||a(this.currentForm),this.containers=a(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var c,d=this.groups={};a.each(this.settings.groups,function(b,c){\"string\"==typeof c&&(c=c.split(/\\s/)),a.each(c,function(a,c){d[c]=b})}),c=this.settings.rules,a.each(c,function(b,d){c[b]=a.validator.normalizeRule(d)}),a(this.currentForm).on(\"focusin.validate focusout.validate keyup.validate\",\":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']\",b).on(\"click.validate\",\"select, option, [type='radio'], [type='checkbox']\",b),this.settings.invalidHandler&&a(this.currentForm).on(\"invalid-form.validate\",this.settings.invalidHandler),a(this.currentForm).find(\"[required], [data-rule-required], .required\").attr(\"aria-required\",\"true\")},form:function(){return this.checkForm(),a.extend(this.submitted,this.errorMap),this.invalid=a.extend({},this.errorMap),this.valid()||a(this.currentForm).triggerHandler(\"invalid-form\",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);return this.valid()},element:function(b){var c=this.clean(b),d=this.validationTargetFor(c),e=!0;return this.lastElement=d,void 0===d?delete this.invalid[c.name]:(this.prepareElement(d),this.currentElements=a(d),e=this.check(d)!==!1,e?delete this.invalid[d.name]:this.invalid[d.name]=!0),a(b).attr(\"aria-invalid\",!e),this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e},showErrors:function(b){if(b){a.extend(this.errorMap,b),this.errorList=[];for(var c in b)this.errorList.push({message:b[c],element:this.findByName(c)[0]});this.successList=a.grep(this.successList,function(a){return!(a.name in b)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){a.fn.resetForm&&a(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors();var b,c=this.elements().removeData(\"previousValue\").removeAttr(\"aria-invalid\");if(this.settings.unhighlight)for(b=0;c[b];b++)this.settings.unhighlight.call(this,c[b],this.settings.errorClass,\"\");else c.removeClass(this.settings.errorClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(a){var b,c=0;for(b in a)c++;return c},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(a){a.not(this.containers).text(\"\"),this.addWrapper(a).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{a(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(\":visible\").focus().trigger(\"focusin\")}catch(b){}},findLastActive:function(){var b=this.lastActive;return b&&1===a.grep(this.errorList,function(a){return a.element.name===b.name}).length&&b},elements:function(){var b=this,c={};return a(this.currentForm).find(\"input, select, textarea\").not(\":submit, :reset, :image, :disabled\").not(this.settings.ignore).filter(function(){return!this.name&&b.settings.debug&&window.console&&console.error(\"%o has no name assigned\",this),this.name in c||!b.objectLength(a(this).rules())?!1:(c[this.name]=!0,!0)})},clean:function(b){return a(b)[0]},errors:function(){var b=this.settings.errorClass.split(\" \").join(\".\");return a(this.settings.errorElement+\".\"+b,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=a([]),this.toHide=a([]),this.currentElements=a([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(a){this.reset(),this.toHide=this.errorsFor(a)},elementValue:function(b){var c,d=a(b),e=b.type;return\"radio\"===e||\"checkbox\"===e?this.findByName(b.name).filter(\":checked\").val():\"number\"===e&&\"undefined\"!=typeof b.validity?b.validity.badInput?!1:d.val():(c=d.val(),\"string\"==typeof c?c.replace(/\\r/g,\"\"):c)},check:function(b){b=this.validationTargetFor(this.clean(b));var c,d,e,f=a(b).rules(),g=a.map(f,function(a,b){return b}).length,h=!1,i=this.elementValue(b);for(d in f){e={method:d,parameters:f[d]};try{if(c=a.validator.methods[d].call(this,i,b,e.parameters),\"dependency-mismatch\"===c&&1===g){h=!0;continue}if(h=!1,\"pending\"===c)return void(this.toHide=this.toHide.not(this.errorsFor(b)));if(!c)return this.formatAndAdd(b,e),!1}catch(j){throw this.settings.debug&&window.console&&console.log(\"Exception occurred when checking element \"+b.id+\", check the '\"+e.method+\"' method.\",j),j instanceof TypeError&&(j.message+=\". Exception occurred when checking element \"+b.id+\", check the '\"+e.method+\"' method.\"),j}}if(!h)return this.objectLength(f)&&this.successList.push(b),!0},customDataMessage:function(b,c){return a(b).data(\"msg\"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase())||a(b).data(\"msg\")},customMessage:function(a,b){var c=this.settings.messages[a];return c&&(c.constructor===String?c:c[b])},findDefined:function(){for(var a=0;a0:b.length>0},email:function(a,b){return this.optional(b)||/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)},url:function(a,b){return this.optional(b)||/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(a)},date:function(a,b){return this.optional(b)||!/Invalid|NaN/.test(new Date(a).toString())},dateISO:function(a,b){return this.optional(b)||/^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(a)},number:function(a,b){return this.optional(b)||/^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\\d+$/.test(a)},creditcard:function(a,b){if(this.optional(b))return\"dependency-mismatch\";if(/[^0-9 \\-]+/.test(a))return!1;var c,d,e=0,f=0,g=!1;if(a=a.replace(/\\D/g,\"\"),a.length19)return!1;for(c=a.length-1;c>=0;c--)d=a.charAt(c),f=parseInt(d,10),g&&(f*=2)>9&&(f-=9),e+=f,g=!g;return e%10===0},minlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e>=d},maxlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||d>=e},rangelength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e>=d[0]&&e=c},max:function(a,b,c){return this.optional(b)||c>=a},range:function(a,b,c){return this.optional(b)||a>=c[0]&&an;n++)e[n][t]()},t.destroyAll=function(){t.invokeAll(\"destroy\")},t.disableAll=function(){t.invokeAll(\"disable\")},t.enableAll=function(){t.invokeAll(\"enable\")},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:\"default\",horizontal:!1,offset:0},t.offsetAliases={\"bottom-in-view\":function(){return this.context.innerHeight()-this.adapter.outerHeight()},\"right-in-view\":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){\"use strict\";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=n.Adapter,this.adapter=new this.Adapter(t),this.key=\"waypoint-context-\"+i,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,o[t.waypointContextKey]=this,i+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var i=0,o={},n=window.Waypoint,r=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?\"horizontal\":\"vertical\";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(\".waypoints\"),delete o[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on(\"resize.waypoints\",function(){e.didResize||(e.didResize=!0,n.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on(\"scroll.waypoints\",function(){(!e.didScroll||n.isTouch)&&(e.didScroll=!0,n.requestAnimationFrame(t))})},e.prototype.handleResize=function(){n.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:\"right\",backward:\"left\"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:\"down\",backward:\"up\"}};for(var i in e){var o=e[i],n=o.newScroll>o.oldScroll,r=n?o.forward:o.backward;for(var s in this.waypoints[i]){var a=this.waypoints[i][s],l=o.oldScroll=a.triggerPoint,p=l&&h,u=!l&&!h;(p||u)&&(a.queueTrigger(r),t[a.group.id]=a.group)}}for(var c in t)t[c].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?n.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?n.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var i in this.waypoints[e])t.push(this.waypoints[e][i]);for(var o=0,n=t.length;n>o;o++)t[o].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,i=e?void 0:this.adapter.offset(),o={};this.handleScroll(),t={horizontal:{contextOffset:e?0:i.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:\"right\",backward:\"left\",offsetProp:\"left\"},vertical:{contextOffset:e?0:i.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:\"down\",backward:\"up\",offsetProp:\"top\"}};for(var r in t){var s=t[r];for(var a in this.waypoints[r]){var l,h,p,u,c,d=this.waypoints[r][a],f=d.options.offset,w=d.triggerPoint,y=0,g=null==w;d.element!==d.element.window&&(y=d.adapter.offset()[s.offsetProp]),\"function\"==typeof f?f=f.apply(d):\"string\"==typeof f&&(f=parseFloat(f),d.options.offset.indexOf(\"%\")>-1&&(f=Math.ceil(s.contextDimension*f/100))),l=s.contextScroll-s.contextOffset,d.triggerPoint=y+l-f,h=w=s.oldScroll,u=h&&p,c=!h&&!p,!g&&u?(d.queueTrigger(s.backward),o[d.group.id]=d.group):!g&&c?(d.queueTrigger(s.forward),o[d.group.id]=d.group):g&&s.oldScroll>=d.triggerPoint&&(d.queueTrigger(s.forward),o[d.group.id]=d.group)}}return n.requestAnimationFrame(function(){for(var t in o)o[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in o)o[t].refresh()},e.findByElement=function(t){return o[t.waypointContextKey]},window.onload=function(){r&&r(),e.refreshAll()},n.requestAnimationFrame=function(e){var i=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t;i.call(window,e)},n.Context=e}(),function(){\"use strict\";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function i(t){this.name=t.name,this.axis=t.axis,this.id=this.name+\"-\"+this.axis,this.waypoints=[],this.clearTriggerQueues(),o[this.axis][this.name]=this}var o={vertical:{},horizontal:{}},n=window.Waypoint;i.prototype.add=function(t){this.waypoints.push(t)},i.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},i.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var o=this.triggerQueues[i],n=\"up\"===i||\"left\"===i;o.sort(n?e:t);for(var r=0,s=o.length;s>r;r+=1){var a=o[r];(a.options.continuous||r===o.length-1)&&a.trigger([i])}}this.clearTriggerQueues()},i.prototype.next=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints),o=i===this.waypoints.length-1;return o?null:this.waypoints[i+1]},i.prototype.previous=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints);return i?this.waypoints[i-1]:null},i.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},i.prototype.remove=function(t){var e=n.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},i.prototype.first=function(){return this.waypoints[0]},i.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},i.findOrCreate=function(t){return o[t.axis][t.name]||new i(t)},n.Group=i}(),function(){\"use strict\";function t(t){this.$element=e(t)}var e=window.jQuery,i=window.Waypoint;e.each([\"innerHeight\",\"innerWidth\",\"off\",\"offset\",\"on\",\"outerHeight\",\"outerWidth\",\"scrollLeft\",\"scrollTop\"],function(e,i){t.prototype[i]=function(){var t=Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element,t)}}),e.each([\"extend\",\"inArray\",\"isEmptyObject\"],function(i,o){t[o]=e[o]}),i.adapters.push({name:\"jquery\",Adapter:t}),i.Adapter=t}(),function(){\"use strict\";function t(t){return function(){var i=[],o=arguments[0];return t.isFunction(arguments[0])&&(o=t.extend({},arguments[1]),o.handler=arguments[0]),this.each(function(){var n=t.extend({},o,{element:this});\"string\"==typeof n.context&&(n.context=t(this).closest(n.context)[0]),i.push(new e(n))}),i}}var e=window.Waypoint;window.jQuery&&(window.jQuery.fn.waypoint=t(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=t(window.Zepto))}(); /* ! Magnific Popup - v1.0.0 - 2015-09-17 * http://dimsemenov.com/plugins/magnific-popup/ * Copyright (c) 2015 Dmitry Semenov; */ !function(a){\"function\"==typeof define&&define.amd?define([\"jquery\"],a):a(\"object\"==typeof exports?require(\"jquery\"):window.jQuery||window.Zepto)}(function(a){var b,c,d,e,f,g,h=\"Close\",i=\"BeforeClose\",j=\"AfterClose\",k=\"BeforeAppend\",l=\"MarkupParse\",m=\"Open\",n=\"Change\",o=\"mfp\",p=\".\"+o,q=\"mfp-ready\",r=\"mfp-removing\",s=\"mfp-prevent-close\",t=function(){},u=!!window.jQuery,v=a(window),w=function(a,c){b.ev.on(o+a+p,c)},x=function(b,c,d,e){var f=document.createElement(\"div\");return f.className=\"mfp-\"+b,d&&(f.innerHTML=d),e?c&&c.appendChild(f):(f=a(f),c&&f.appendTo(c)),f},y=function(c,d){b.ev.triggerHandler(o+c,d),b.st.callbacks&&(c=c.charAt(0).toLowerCase()+c.slice(1),b.st.callbacks[c]&&b.st.callbacks[c].apply(b,a.isArray(d)?d:[d]))},z=function(c){return c===g&&b.currTemplate.closeBtn||(b.currTemplate.closeBtn=a(b.st.closeMarkup.replace(\"%title%\",b.st.tClose)),g=c),b.currTemplate.closeBtn},A=function(){a.magnificPopup.instance||(b=new t,b.init(),a.magnificPopup.instance=b)},B=function(){var a=document.createElement(\"p\").style,b=[\"ms\",\"O\",\"Moz\",\"Webkit\"];if(void 0!==a.transition)return!0;for(;b.length;)if(b.pop()+\"Transition\"in a)return!0;return!1};t.prototype={constructor:t,init:function(){var c=navigator.appVersion;b.isIE7=-1!==c.indexOf(\"MSIE 7.\"),b.isIE8=-1!==c.indexOf(\"MSIE 8.\"),b.isLowIE=b.isIE7||b.isIE8,b.isAndroid=/android/gi.test(c),b.isIOS=/iphone|ipad|ipod/gi.test(c),b.supportsTransition=B(),b.probablyMobile=b.isAndroid||b.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),d=a(document),b.popupsCache={}},open:function(c){var e;if(c.isObj===!1){b.items=c.items.toArray(),b.index=0;var g,h=c.items;for(e=0;e1){var d=b.find(p+\"-\"+e[0]);if(d.length>0){var f=e[1];\"replaceWith\"===f?d[0]!==c[0]&&d.replaceWith(c):\"img\"===f?d.is(\"img\")?d.attr(\"src\",c):d.replaceWith(''):d.attr(e[1],c)}}else b.find(p+\"-\"+a).html(c)})},_getScrollbarSize:function(){if(void 0===b.scrollbarSize){var a=document.createElement(\"div\");a.style.cssText=\"width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;\",document.body.appendChild(a),b.scrollbarSize=a.offsetWidth-a.clientWidth,document.body.removeChild(a)}return b.scrollbarSize}},a.magnificPopup={instance:null,proto:t.prototype,modules:[],open:function(b,c){return A(),b=b?a.extend(!0,{},b):{},b.isObj=!0,b.index=c||0,this.instance.open(b)},close:function(){return a.magnificPopup.instance&&a.magnificPopup.instance.close()},registerModule:function(b,c){c.options&&(a.magnificPopup.defaults[b]=c.options),a.extend(this.proto,c.proto),this.modules.push(b)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:\"\",preloader:!0,focus:\"\",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:\"auto\",fixedBgPos:\"auto\",overflowY:\"auto\",closeMarkup:'&#215;',tClose:\"Close (Esc)\",tLoading:\"Loading...\"}},a.fn.magnificPopup=function(c){A();var d=a(this);if(\"string\"==typeof c)if(\"open\"===c){var e,f=u?d.data(\"magnificPopup\"):d[0].magnificPopup,g=parseInt(arguments[1],10)||0;f.items?e=f.items[g]:(e=d,f.delegate&&(e=e.find(f.delegate)),e=e.eq(g)),b._openClick({mfpEl:e},d,f)}else b.isOpen&&b[c].apply(b,Array.prototype.slice.call(arguments,1));else c=a.extend(!0,{},c),u?d.data(\"magnificPopup\",c):d[0].magnificPopup=c,b.addGroup(d,c);return d};var C,D,E,F=\"inline\",G=function(){E&&(D.after(E.addClass(C)).detach(),E=null)};a.magnificPopup.registerModule(F,{options:{hiddenClass:\"hide\",markup:\"\",tNotFound:\"Content not found\"},proto:{initInline:function(){b.types.push(F),w(h+\".\"+F,function(){G()})},getInline:function(c,d){if(G(),c.src){var e=b.st.inline,f=a(c.src);if(f.length){var g=f[0].parentNode;g&&g.tagName&&(D||(C=e.hiddenClass,D=x(C),C=\"mfp-\"+C),E=f.after(D).detach().removeClass(C)),b.updateStatus(\"ready\")}else b.updateStatus(\"error\",e.tNotFound),f=a(\"\");return c.inlineElement=f,f}return b.updateStatus(\"ready\"),b._parseMarkup(d,{},c),d}}});var H,I=\"ajax\",J=function(){H&&a(document.body).removeClass(H)},K=function(){J(),b.req&&b.req.abort()};a.magnificPopup.registerModule(I,{options:{settings:null,cursor:\"mfp-ajax-cur\",tError:'The content could not be loaded.'},proto:{initAjax:function(){b.types.push(I),H=b.st.ajax.cursor,w(h+\".\"+I,K),w(\"BeforeChange.\"+I,K)},getAjax:function(c){H&&a(document.body).addClass(H),b.updateStatus(\"loading\");var d=a.extend({url:c.src,success:function(d,e,f){var g={data:d,xhr:f};y(\"ParseAjax\",g),b.appendContent(a(g.data),I),c.finished=!0,J(),b._setFocus(),setTimeout(function(){b.wrap.addClass(q)},16),b.updateStatus(\"ready\"),y(\"AjaxContentAdded\")},error:function(){J(),c.finished=c.loadError=!0,b.updateStatus(\"error\",b.st.ajax.tError.replace(\"%url%\",c.src))}},b.st.ajax.settings);return b.req=a.ajax(d),\"\"}}});var L,M=function(c){if(c.data&&void 0!==c.data.title)return c.data.title;var d=b.st.image.titleSrc;if(d){if(a.isFunction(d))return d.call(b,c);if(c.el)return c.el.attr(d)||\"\"}return\"\"};a.magnificPopup.registerModule(\"image\",{options:{markup:'',cursor:\"mfp-zoom-out-cur\",titleSrc:\"title\",verticalFit:!0,tError:'The image could not be loaded.'},proto:{initImage:function(){var c=b.st.image,d=\".image\";b.types.push(\"image\"),w(m+d,function(){\"image\"===b.currItem.type&&c.cursor&&a(document.body).addClass(c.cursor)}),w(h+d,function(){c.cursor&&a(document.body).removeClass(c.cursor),v.off(\"resize\"+p)}),w(\"Resize\"+d,b.resizeImage),b.isLowIE&&w(\"AfterChange\",b.resizeImage)},resizeImage:function(){var a=b.currItem;if(a&&a.img&&b.st.image.verticalFit){var c=0;b.isLowIE&&(c=parseInt(a.img.css(\"padding-top\"),10)+parseInt(a.img.css(\"padding-bottom\"),10)),a.img.css(\"max-height\",b.wH-c)}},_onImageHasSize:function(a){a.img&&(a.hasSize=!0,L&&clearInterval(L),a.isCheckingImgSize=!1,y(\"ImageHasSize\",a),a.imgHidden&&(b.content&&b.content.removeClass(\"mfp-loading\"),a.imgHidden=!1))},findImageSize:function(a){var c=0,d=a.img[0],e=function(f){L&&clearInterval(L),L=setInterval(function(){return d.naturalWidth>0?void b._onImageHasSize(a):(c>200&&clearInterval(L),c++,void(3===c?e(10):40===c?e(50):100===c&&e(500)))},f)};e(1)},getImage:function(c,d){var e=0,f=function(){c&&(c.img[0].complete?(c.img.off(\".mfploader\"),c===b.currItem&&(b._onImageHasSize(c),b.updateStatus(\"ready\")),c.hasSize=!0,c.loaded=!0,y(\"ImageLoadComplete\")):(e++,200>e?setTimeout(f,100):g()))},g=function(){c&&(c.img.off(\".mfploader\"),c===b.currItem&&(b._onImageHasSize(c),b.updateStatus(\"error\",h.tError.replace(\"%url%\",c.src))),c.hasSize=!0,c.loaded=!0,c.loadError=!0)},h=b.st.image,i=d.find(\".mfp-img\");if(i.length){var j=document.createElement(\"img\");j.className=\"mfp-img\",c.el&&c.el.find(\"img\").length&&(j.alt=c.el.find(\"img\").attr(\"alt\")),c.img=a(j).on(\"load.mfploader\",f).on(\"error.mfploader\",g),j.src=c.src,i.is(\"img\")&&(c.img=c.img.clone()),j=c.img[0],j.naturalWidth>0?c.hasSize=!0:j.width||(c.hasSize=!1)}return b._parseMarkup(d,{title:M(c),img_replaceWith:c.img},c),b.resizeImage(),c.hasSize?(L&&clearInterval(L),c.loadError?(d.addClass(\"mfp-loading\"),b.updateStatus(\"error\",h.tError.replace(\"%url%\",c.src))):(d.removeClass(\"mfp-loading\"),b.updateStatus(\"ready\")),d):(b.updateStatus(\"loading\"),c.loading=!0,c.hasSize||(c.imgHidden=!0,d.addClass(\"mfp-loading\"),b.findImageSize(c)),d)}}});var N,O=function(){return void 0===N&&(N=void 0!==document.createElement(\"p\").style.MozTransform),N};a.magnificPopup.registerModule(\"zoom\",{options:{enabled:!1,easing:\"ease-in-out\",duration:300,opener:function(a){return a.is(\"img\")?a:a.find(\"img\")}},proto:{initZoom:function(){var a,c=b.st.zoom,d=\".zoom\";if(c.enabled&&b.supportsTransition){var e,f,g=c.duration,j=function(a){var b=a.clone().removeAttr(\"style\").removeAttr(\"class\").addClass(\"mfp-animated-image\"),d=\"all \"+c.duration/1e3+\"s \"+c.easing,e={position:\"fixed\",zIndex:9999,left:0,top:0,\"-webkit-backface-visibility\":\"hidden\"},f=\"transition\";return e[\"-webkit-\"+f]=e[\"-moz-\"+f]=e[\"-o-\"+f]=e[f]=d,b.css(e),b},k=function(){b.content.css(\"visibility\",\"visible\")};w(\"BuildControls\"+d,function(){if(b._allowZoom()){if(clearTimeout(e),b.content.css(\"visibility\",\"hidden\"),a=b._getItemToZoom(),!a)return void k();f=j(a),f.css(b._getOffset()),b.wrap.append(f),e=setTimeout(function(){f.css(b._getOffset(!0)),e=setTimeout(function(){k(),setTimeout(function(){f.remove(),a=f=null,y(\"ZoomAnimationEnded\")},16)},g)},16)}}),w(i+d,function(){if(b._allowZoom()){if(clearTimeout(e),b.st.removalDelay=g,!a){if(a=b._getItemToZoom(),!a)return;f=j(a)}f.css(b._getOffset(!0)),b.wrap.append(f),b.content.css(\"visibility\",\"hidden\"),setTimeout(function(){f.css(b._getOffset())},16)}}),w(h+d,function(){b._allowZoom()&&(k(),f&&f.remove(),a=null)})}},_allowZoom:function(){return\"image\"===b.currItem.type},_getItemToZoom:function(){return b.currItem.hasSize?b.currItem.img:!1},_getOffset:function(c){var d;d=c?b.currItem.img:b.st.zoom.opener(b.currItem.el||b.currItem);var e=d.offset(),f=parseInt(d.css(\"padding-top\"),10),g=parseInt(d.css(\"padding-bottom\"),10);e.top-=a(window).scrollTop()-f;var h={width:d.width(),height:(u?d.innerHeight():d[0].offsetHeight)-g-f};return O()?h[\"-moz-transform\"]=h.transform=\"translate(\"+e.left+\"px,\"+e.top+\"px)\":(h.left=e.left,h.top=e.top),h}}});var P=\"iframe\",Q=\"//about:blank\",R=function(a){if(b.currTemplate[P]){var c=b.currTemplate[P].find(\"iframe\");c.length&&(a||(c[0].src=Q),b.isIE8&&c.css(\"display\",a?\"block\":\"none\"))}};a.magnificPopup.registerModule(P,{options:{markup:'',srcAction:\"iframe_src\",patterns:{youtube:{index:\"youtube.com\",id:\"v=\",src:\"//www.youtube.com/embed/%id%?autoplay=1\"},vimeo:{index:\"vimeo.com/\",id:\"/\",src:\"//player.vimeo.com/video/%id%?autoplay=1\"},gmaps:{index:\"//maps.google.\",src:\"%id%&output=embed\"}}},proto:{initIframe:function(){b.types.push(P),w(\"BeforeChange\",function(a,b,c){b!==c&&(b===P?R():c===P&&R(!0))}),w(h+\".\"+P,function(){R()})},getIframe:function(c,d){var e=c.src,f=b.st.iframe;a.each(f.patterns,function(){return e.indexOf(this.index)>-1?(this.id&&(e=\"string\"==typeof this.id?e.substr(e.lastIndexOf(this.id)+this.id.length,e.length):this.id.call(this,e)),e=this.src.replace(\"%id%\",e),!1):void 0});var g={};return f.srcAction&&(g[f.srcAction]=e),b._parseMarkup(d,g,c),b.updateStatus(\"ready\"),d}}});var S=function(a){var c=b.items.length;return a>c-1?a-c:0>a?c+a:a},T=function(a,b,c){return a.replace(/%curr%/gi,b+1).replace(/%total%/gi,c)};a.magnificPopup.registerModule(\"gallery\",{options:{enabled:!1,arrowMarkup:'',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:\"Previous (Left arrow key)\",tNext:\"Next (Right arrow key)\",tCounter:\"%curr% of %total%\"},proto:{initGallery:function(){var c=b.st.gallery,e=\".mfp-gallery\",g=Boolean(a.fn.mfpFastClick);return b.direction=!0,c&&c.enabled?(f+=\" mfp-gallery\",w(m+e,function(){c.navigateByImgClick&&b.wrap.on(\"click\"+e,\".mfp-img\",function(){return b.items.length>1?(b.next(),!1):void 0}),d.on(\"keydown\"+e,function(a){37===a.keyCode?b.prev():39===a.keyCode&&b.next()})}),w(\"UpdateStatus\"+e,function(a,c){c.text&&(c.text=T(c.text,b.currItem.index,b.items.length))}),w(l+e,function(a,d,e,f){var g=b.items.length;e.counter=g>1?T(c.tCounter,f.index,g):\"\"}),w(\"BuildControls\"+e,function(){if(b.items.length>1&&c.arrows&&!b.arrowLeft){var d=c.arrowMarkup,e=b.arrowLeft=a(d.replace(/%title%/gi,c.tPrev).replace(/%dir%/gi,\"left\")).addClass(s),f=b.arrowRight=a(d.replace(/%title%/gi,c.tNext).replace(/%dir%/gi,\"right\")).addClass(s),h=g?\"mfpFastClick\":\"click\";e[h](function(){b.prev()}),f[h](function(){b.next()}),b.isIE7&&(x(\"b\",e[0],!1,!0),x(\"a\",e[0],!1,!0),x(\"b\",f[0],!1,!0),x(\"a\",f[0],!1,!0)),b.container.append(e.add(f))}}),w(n+e,function(){b._preloadTimeout&&clearTimeout(b._preloadTimeout),b._preloadTimeout=setTimeout(function(){b.preloadNearbyImages(),b._preloadTimeout=null},16)}),void w(h+e,function(){d.off(e),b.wrap.off(\"click\"+e),b.arrowLeft&&g&&b.arrowLeft.add(b.arrowRight).destroyMfpFastClick(),b.arrowRight=b.arrowLeft=null})):!1},next:function(){b.direction=!0,b.index=S(b.index+1),b.updateItemHTML()},prev:function(){b.direction=!1,b.index=S(b.index-1),b.updateItemHTML()},goTo:function(a){b.direction=a>=b.index,b.index=a,b.updateItemHTML()},preloadNearbyImages:function(){var a,c=b.st.gallery.preload,d=Math.min(c[0],b.items.length),e=Math.min(c[1],b.items.length);for(a=1;a"},{"title":"","date":"2017-07-21T08:30:36.393Z","updated":"2015-12-24T11:09:52.000Z","comments":true,"path":"about/css/micons/micons.css","permalink":"http://yoursite.com/about/css/micons/micons.css","excerpt":"","text":"@font-face { font-family: 'icomoon'; src: url('fonts/icomoon.eot?jo2z5t'); src: url('fonts/icomoon.eot?jo2z5t#iefix') format('embedded-opentype'), url('fonts/icomoon.ttf?jo2z5t') format('truetype'), url('fonts/icomoon.woff?jo2z5t') format('woff'), url('fonts/icomoon.svg?jo2z5t#icomoon') format('svg'); font-weight: normal; font-style: normal; } [class^=\"icon-\"], [class*=\" icon-\"] { /* use !important to prevent issues with browser extensions that change fonts */ font-family: 'icomoon' !important; speak: none; font-style: normal; font-weight: normal; font-variant: normal; text-transform: none; line-height: 1; /* Better Font Rendering =========== */ -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .icon-align-center:before { content: \"\\e900\"; } .icon-align-justify:before { content: \"\\e901\"; } .icon-align-left:before { content: \"\\e902\"; } .icon-align-right:before { content: \"\\e903\"; } .icon-alt:before { content: \"\\e904\"; } .icon-arrow-right:before { content: \"\\e905\"; } .icon-arrow-up:before { content: \"\\e906\"; } .icon-artboard:before { content: \"\\e907\"; } .icon-at:before { content: \"\\e908\"; } .icon-attachment:before { content: \"\\e909\"; } .icon-backward:before { content: \"\\e90a\"; } .icon-badge:before { content: \"\\e90b\"; } .icon-bank-note:before { content: \"\\e90c\"; } .icon-bar-chart:before { content: \"\\e90d\"; } .icon-basket-ball:before { content: \"\\e90e\"; } .icon-battery-high:before { content: \"\\e90f\"; } .icon-battery-low:before { content: \"\\e910\"; } .icon-bed:before { content: \"\\e911\"; } .icon-bell:before { content: \"\\e912\"; } .icon-bin:before { content: \"\\e913\"; } .icon-block:before { content: \"\\e914\"; } .icon-bluetooth:before { content: \"\\e915\"; } .icon-book:before { content: \"\\e916\"; } .icon-box:before { content: \"\\e917\"; } .icon-brightness:before { content: \"\\e918\"; } .icon-brush:before { content: \"\\e919\"; } .icon-bucket:before { content: \"\\e91a\"; } .icon-building:before { content: \"\\e91b\"; } .icon-calendar:before { content: \"\\e91c\"; } .icon-camera:before { content: \"\\e91d\"; } .icon-car:before { content: \"\\e91e\"; } .icon-card:before { content: \"\\e91f\"; } .icon-chat:before { content: \"\\e920\"; } .icon-circle-bottom-left:before { content: \"\\e921\"; } .icon-circle-bottom-right:before { content: \"\\e922\"; } .icon-circle-down:before { content: \"\\e923\"; } .icon-circle-left:before { content: \"\\e924\"; } .icon-circle-right:before { content: \"\\e925\"; } .icon-circle-top-left:before { content: \"\\e926\"; } .icon-circle-top-right:before { content: \"\\e927\"; } .icon-circle-up:before { content: \"\\e928\"; } .icon-clock:before { content: \"\\e929\"; } .icon-cloud:before { content: \"\\e92a\"; } .icon-cmd:before { content: \"\\e92b\"; } .icon-collapse:before { content: \"\\e92c\"; } .icon-comment:before { content: \"\\e92d\"; } .icon-contrast:before { content: \"\\e92e\"; } .icon-corner-arrow:before { content: \"\\e92f\"; } .icon-cube:before { content: \"\\e930\"; } .icon-cup:before { content: \"\\e931\"; } .icon-cursor:before { content: \"\\e932\"; } .icon-desktop:before { content: \"\\e933\"; } .icon-disk:before { content: \"\\e934\"; } .icon-dollar:before { content: \"\\e935\"; } .icon-download:before { content: \"\\e936\"; } .icon-drawer:before { content: \"\\e937\"; } .icon-drop:before { content: \"\\e938\"; } .icon-earth:before { content: \"\\e939\"; } .icon-edit:before { content: \"\\e93a\"; } .icon-education:before { content: \"\\e93b\"; } .icon-eject:before { content: \"\\e93c\"; } .icon-euro:before { content: \"\\e93d\"; } .icon-expand:before { content: \"\\e93e\"; } .icon-external:before { content: \"\\e93f\"; } .icon-eye:before { content: \"\\e940\"; } .icon-factory:before { content: \"\\e941\"; } .icon-fast-forward:before { content: \"\\e942\"; } .icon-file:before { content: \"\\e943\"; } .icon-file-add:before { content: \"\\e944\"; } .icon-file-remove:before { content: \"\\e945\"; } .icon-files:before { content: \"\\e946\"; } .icon-filter:before { content: \"\\e947\"; } .icon-fire:before { content: \"\\e948\"; } .icon-first-aid:before { content: \"\\e949\"; } .icon-flag:before { content: \"\\e94a\"; } .icon-floppy:before { content: \"\\e94b\"; } .icon-folder:before { content: \"\\e94c\"; } .icon-folder-add:before { content: \"\\e94d\"; } .icon-folder-remove:before { content: \"\\e94e\"; } .icon-fork-knife:before { content: \"\\e94f\"; } .icon-form:before { content: \"\\e950\"; } .icon-frame:before { content: \"\\e951\"; } .icon-full-screen:before { content: \"\\e952\"; } .icon-gift:before { content: \"\\e953\"; } .icon-glass:before { content: \"\\e954\"; } .icon-glasses:before { content: \"\\e955\"; } .icon-grid:before { content: \"\\e956\"; } .icon-group:before { content: \"\\e957\"; } .icon-headset:before { content: \"\\e958\"; } .icon-heart:before { content: \"\\e959\"; } .icon-hide-sdebar-vert:before { content: \"\\e95a\"; } .icon-hide-sidebar-horiz:before { content: \"\\e95b\"; } .icon-home:before { content: \"\\e95c\"; } .icon-id:before { content: \"\\e95d\"; } .icon-image:before { content: \"\\e95e\"; } .icon-info:before { content: \"\\e95f\"; } .icon-invoice:before { content: \"\\e960\"; } .icon-juice:before { content: \"\\e961\"; } .icon-key:before { content: \"\\e962\"; } .icon-lamp:before { content: \"\\e963\"; } .icon-layers:before { content: \"\\e964\"; } .icon-leaf:before { content: \"\\e965\"; } .icon-left:before { content: \"\\e966\"; } .icon-left-right:before { content: \"\\e967\"; } .icon-lego-block:before { content: \"\\e968\"; } .icon-life-buoy:before { content: \"\\e969\"; } .icon-light-bulb:before { content: \"\\e96a\"; } .icon-link:before { content: \"\\e96b\"; } .icon-list:before { content: \"\\e96c\"; } .icon-loading:before { content: \"\\e96d\"; } .icon-logout:before { content: \"\\e96e\"; } .icon-mail:before { content: \"\\e96f\"; } .icon-mail-open:before { content: \"\\e970\"; } .icon-map:before { content: \"\\e971\"; } .icon-margin:before { content: \"\\e972\"; } .icon-megaphone:before { content: \"\\e973\"; } .icon-meh:before { content: \"\\e974\"; } .icon-menu-circle:before { content: \"\\e975\"; } .icon-menu-circle-dots:before { content: \"\\e976\"; } .icon-menu-dots:before { content: \"\\e977\"; } .icon-menu-lines:before { content: \"\\e978\"; } .icon-microphone:before { content: \"\\e979\"; } .icon-minus:before { content: \"\\e97a\"; } .icon-mobile:before { content: \"\\e97b\"; } .icon-mouse:before { content: \"\\e97c\"; } .icon-move:before { content: \"\\e97d\"; } .icon-move-diagonal:before { content: \"\\e97e\"; } .icon-move-horizontal:before { content: \"\\e97f\"; } .icon-move-vertical:before { content: \"\\e980\"; } .icon-mug:before { content: \"\\e981\"; } .icon-music:before { content: \"\\e982\"; } .icon-network:before { content: \"\\e983\"; } .icon-new-file:before { content: \"\\e984\"; } .icon-newspaper:before { content: \"\\e985\"; } .icon-next:before { content: \"\\e986\"; } .icon-no:before { content: \"\\e987\"; } .icon-notes:before { content: \"\\e988\"; } .icon-objects:before { content: \"\\e989\"; } .icon-padding:before { content: \"\\e98a\"; } .icon-padlock:before { content: \"\\e98b\"; } .icon-padlock-open:before { content: \"\\e98c\"; } .icon-paint-brush:before { content: \"\\e98d\"; } .icon-paper-plane:before { content: \"\\e98e\"; } .icon-pause:before { content: \"\\e98f\"; } .icon-pen:before { content: \"\\e990\"; } .icon-pencil:before { content: \"\\e991\"; } .icon-pencil-ruler:before { content: \"\\e992\"; } .icon-phone:before { content: \"\\e993\"; } .icon-pie-chart:before { content: \"\\e994\"; } .icon-pin:before { content: \"\\e995\"; } .icon-pin-2:before { content: \"\\e996\"; } .icon-pin-point:before { content: \"\\e997\"; } .icon-play:before { content: \"\\e998\"; } .icon-plug:before { content: \"\\e999\"; } .icon-plus:before { content: \"\\e99a\"; } .icon-pound:before { content: \"\\e99b\"; } .icon-power-on:before { content: \"\\e99c\"; } .icon-previous:before { content: \"\\e99d\"; } .icon-printer:before { content: \"\\e99e\"; } .icon-projector:before { content: \"\\e99f\"; } .icon-question:before { content: \"\\e9a0\"; } .icon-quote:before { content: \"\\e9a1\"; } .icon-record:before { content: \"\\e9a2\"; } .icon-recycle:before { content: \"\\e9a3\"; } .icon-redo:before { content: \"\\e9a4\"; } .icon-refresh:before { content: \"\\e9a5\"; } .icon-rotate-clock:before { content: \"\\e9a6\"; } .icon-rotate-counter:before { content: \"\\e9a7\"; } .icon-sad:before { content: \"\\e9a8\"; } .icon-scales:before { content: \"\\e9a9\"; } .icon-search:before { content: \"\\e9aa\"; } .icon-selection:before { content: \"\\e9ab\"; } .icon-settings:before { content: \"\\e9ac\"; } .icon-shapes:before { content: \"\\e9ad\"; } .icon-share:before { content: \"\\e9ae\"; } .icon-shield:before { content: \"\\e9af\"; } .icon-shopping-cart:before { content: \"\\e9b0\"; } .icon-show-sidebar-horiz:before { content: \"\\e9b1\"; } .icon-show-sidebar-vert:before { content: \"\\e9b2\"; } .icon-shuffle:before { content: \"\\e9b3\"; } .icon-sign:before { content: \"\\e9b4\"; } .icon-signal:before { content: \"\\e9b5\"; } .icon-skull:before { content: \"\\e9b6\"; } .icon-sliders:before { content: \"\\e9b7\"; } .icon-small-screen:before { content: \"\\e9b8\"; } .icon-smile:before { content: \"\\e9b9\"; } .icon-soap:before { content: \"\\e9ba\"; } .icon-speed-o-meter:before { content: \"\\e9bb\"; } .icon-star:before { content: \"\\e9bc\"; } .icon-stop:before { content: \"\\e9bd\"; } .icon-styling-tools:before { content: \"\\e9be\"; } .icon-suitcase:before { content: \"\\e9bf\"; } .icon-syringe:before { content: \"\\e9c0\"; } .icon-table:before { content: \"\\e9c1\"; } .icon-tag:before { content: \"\\e9c2\"; } .icon-target:before { content: \"\\e9c3\"; } .icon-terminal:before { content: \"\\e9c4\"; } .icon-text:before { content: \"\\e9c5\"; } .icon-thumbs-down:before { content: \"\\e9c6\"; } .icon-thumbs-up:before { content: \"\\e9c7\"; } .icon-thunderbolt:before { content: \"\\e9c8\"; } .icon-tie:before { content: \"\\e9c9\"; } .icon-toggles:before { content: \"\\e9ca\"; } .icon-trophy:before { content: \"\\e9cb\"; } .icon-truck:before { content: \"\\e9cc\"; } .icon-tube:before { content: \"\\e9cd\"; } .icon-tv:before { content: \"\\e9ce\"; } .icon-umbrella:before { content: \"\\e9cf\"; } .icon-undo:before { content: \"\\e9d0\"; } .icon-up:before { content: \"\\e9d1\"; } .icon-update:before { content: \"\\e9d2\"; } .icon-up-down:before { content: \"\\e9d3\"; } .icon-upload:before { content: \"\\e9d4\"; } .icon-user:before { content: \"\\e9d5\"; } .icon-user-add:before { content: \"\\e9d6\"; } .icon-user-remove:before { content: \"\\e9d7\"; } .icon-users:before { content: \"\\e9d8\"; } .icon-video:before { content: \"\\e9d9\"; } .icon-video-camera:before { content: \"\\e9da\"; } .icon-volume-down:before { content: \"\\e9db\"; } .icon-volume-mute:before { content: \"\\e9dc\"; } .icon-volume-up:before { content: \"\\e9dd\"; } .icon-wallet:before { content: \"\\e9de\"; } .icon-wand:before { content: \"\\e9df\"; } .icon-warning:before { content: \"\\e9e0\"; } .icon-wi-fi:before { content: \"\\e9e1\"; } .icon-window:before { content: \"\\e9e2\"; } .icon-wrench:before { content: \"\\e9e3\"; } .icon-yes:before { content: \"\\e9e4\"; } .icon-zoom-in:before { content: \"\\e9e5\"; } .icon-zoom-out:before { content: \"\\e9e6\"; }"},{"title":"","date":"2017-07-21T08:30:36.397Z","updated":"2013-08-27T15:09:42.000Z","comments":true,"path":"about/fonts/lora/stylesheet.css","permalink":"http://yoursite.com/about/fonts/lora/stylesheet.css","excerpt":"","text":"/* Generated by Font Squirrel (http://www.fontsquirrel.com) on August 26, 2013 */ @font-face { font-family: 'lorabold'; src: url('lora-bold-webfont.eot'); src: url('lora-bold-webfont.eot?#iefix') format('embedded-opentype'), url('lora-bold-webfont.woff') format('woff'), url('lora-bold-webfont.ttf') format('truetype'), url('lora-bold-webfont.svg#lorabold') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'lorabold_italic'; src: url('lora-bolditalic-webfont.eot'); src: url('lora-bolditalic-webfont.eot?#iefix') format('embedded-opentype'), url('lora-bolditalic-webfont.woff') format('woff'), url('lora-bolditalic-webfont.ttf') format('truetype'), url('lora-bolditalic-webfont.svg#lorabold_italic') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'loraitalic'; src: url('lora-italic-webfont.eot'); src: url('lora-italic-webfont.eot?#iefix') format('embedded-opentype'), url('lora-italic-webfont.woff') format('woff'), url('lora-italic-webfont.ttf') format('truetype'), url('lora-italic-webfont.svg#loraitalic') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'loraregular'; src: url('lora-regular-webfont.eot'); src: url('lora-regular-webfont.eot?#iefix') format('embedded-opentype'), url('lora-regular-webfont.woff') format('woff'), url('lora-regular-webfont.ttf') format('truetype'), url('lora-regular-webfont.svg#loraregular') format('svg'); font-weight: normal; font-style: normal; }"},{"title":"","date":"2017-07-21T08:30:36.401Z","updated":"2016-02-17T07:21:38.000Z","comments":true,"path":"about/fonts/poppins/stylesheet.css","permalink":"http://yoursite.com/about/fonts/poppins/stylesheet.css","excerpt":"","text":"/* Generated by Font Squirrel (http://www.fontsquirrel.com) on February 17, 2016 */ @font-face { font-family: 'poppinsbold'; src: url('poppins-bold-webfont.eot'); src: url('poppins-bold-webfont.eot?#iefix') format('embedded-opentype'), url('poppins-bold-webfont.woff2') format('woff2'), url('poppins-bold-webfont.woff') format('woff'), url('poppins-bold-webfont.ttf') format('truetype'), url('poppins-bold-webfont.svg#poppinsbold') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppinslight'; src: url('poppins-light-webfont.eot'); src: url('poppins-light-webfont.eot?#iefix') format('embedded-opentype'), url('poppins-light-webfont.woff2') format('woff2'), url('poppins-light-webfont.woff') format('woff'), url('poppins-light-webfont.ttf') format('truetype'), url('poppins-light-webfont.svg#poppinslight') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppinsmedium'; src: url('poppins-medium-webfont.eot'); src: url('poppins-medium-webfont.eot?#iefix') format('embedded-opentype'), url('poppins-medium-webfont.woff2') format('woff2'), url('poppins-medium-webfont.woff') format('woff'), url('poppins-medium-webfont.ttf') format('truetype'), url('poppins-medium-webfont.svg#poppinsmedium') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppinsregular'; src: url('poppins-regular-webfont.eot'); src: url('poppins-regular-webfont.eot?#iefix') format('embedded-opentype'), url('poppins-regular-webfont.woff2') format('woff2'), url('poppins-regular-webfont.woff') format('woff'), url('poppins-regular-webfont.ttf') format('truetype'), url('poppins-regular-webfont.svg#poppinsregular') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'poppinssemibold'; src: url('poppins-semibold-webfont.eot'); src: url('poppins-semibold-webfont.eot?#iefix') format('embedded-opentype'), url('poppins-semibold-webfont.woff2') format('woff2'), url('poppins-semibold-webfont.woff') format('woff'), url('poppins-semibold-webfont.ttf') format('truetype'), url('poppins-semibold-webfont.svg#poppinssemibold') format('svg'); font-weight: normal; font-style: normal; }"},{"title":"","date":"2017-07-21T08:30:36.393Z","updated":"2014-08-26T16:46:50.000Z","comments":true,"path":"about/css/font-awesome/css/font-awesome.css","permalink":"http://yoursite.com/about/css/font-awesome/css/font-awesome.css","excerpt":"","text":"/*! * Font Awesome 4.2.0 by @davegandy - http://fontawesome.io - @fontawesome * License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License) */ /* FONT PATH * -------------------------- */ @font-face { font-family: 'FontAwesome'; src: url('../fonts/fontawesome-webfont.eot?v=4.2.0'); src: url('../fonts/fontawesome-webfont.eot?#iefix&v=4.2.0') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff?v=4.2.0') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.2.0') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.2.0#fontawesomeregular') format('svg'); font-weight: normal; font-style: normal; } .fa { display: inline-block; font: normal normal normal 14px/1 FontAwesome; font-size: inherit; text-rendering: auto; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } /* makes the font 33% larger relative to the icon container */ .fa-lg { font-size: 1.33333333em; line-height: 0.75em; vertical-align: -15%; } .fa-2x { font-size: 2em; } .fa-3x { font-size: 3em; } .fa-4x { font-size: 4em; } .fa-5x { font-size: 5em; } .fa-fw { width: 1.28571429em; text-align: center; } .fa-ul { padding-left: 0; margin-left: 2.14285714em; list-style-type: none; } .fa-ul > li { position: relative; } .fa-li { position: absolute; left: -2.14285714em; width: 2.14285714em; top: 0.14285714em; text-align: center; } .fa-li.fa-lg { left: -1.85714286em; } .fa-border { padding: .2em .25em .15em; border: solid 0.08em #eeeeee; border-radius: .1em; } .pull-right { float: right; } .pull-left { float: left; } .fa.pull-left { margin-right: .3em; } .fa.pull-right { margin-left: .3em; } .fa-spin { -webkit-animation: fa-spin 2s infinite linear; animation: fa-spin 2s infinite linear; } @-webkit-keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(359deg); transform: rotate(359deg); } } @keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(359deg); transform: rotate(359deg); } } .fa-rotate-90 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1); -webkit-transform: rotate(90deg); -ms-transform: rotate(90deg); transform: rotate(90deg); } .fa-rotate-180 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2); -webkit-transform: rotate(180deg); -ms-transform: rotate(180deg); transform: rotate(180deg); } .fa-rotate-270 { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3); -webkit-transform: rotate(270deg); -ms-transform: rotate(270deg); transform: rotate(270deg); } .fa-flip-horizontal { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1); -webkit-transform: scale(-1, 1); -ms-transform: scale(-1, 1); transform: scale(-1, 1); } .fa-flip-vertical { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1); -webkit-transform: scale(1, -1); -ms-transform: scale(1, -1); transform: scale(1, -1); } :root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical { filter: none; } .fa-stack { position: relative; display: inline-block; width: 2em; height: 2em; line-height: 2em; vertical-align: middle; } .fa-stack-1x, .fa-stack-2x { position: absolute; left: 0; width: 100%; text-align: center; } .fa-stack-1x { line-height: inherit; } .fa-stack-2x { font-size: 2em; } .fa-inverse { color: #ffffff; } /* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen readers do not read off random characters that represent icons */ .fa-glass:before { content: \"\\f000\"; } .fa-music:before { content: \"\\f001\"; } .fa-search:before { content: \"\\f002\"; } .fa-envelope-o:before { content: \"\\f003\"; } .fa-heart:before { content: \"\\f004\"; } .fa-star:before { content: \"\\f005\"; } .fa-star-o:before { content: \"\\f006\"; } .fa-user:before { content: \"\\f007\"; } .fa-film:before { content: \"\\f008\"; } .fa-th-large:before { content: \"\\f009\"; } .fa-th:before { content: \"\\f00a\"; } .fa-th-list:before { content: \"\\f00b\"; } .fa-check:before { content: \"\\f00c\"; } .fa-remove:before, .fa-close:before, .fa-times:before { content: \"\\f00d\"; } .fa-search-plus:before { content: \"\\f00e\"; } .fa-search-minus:before { content: \"\\f010\"; } .fa-power-off:before { content: \"\\f011\"; } .fa-signal:before { content: \"\\f012\"; } .fa-gear:before, .fa-cog:before { content: \"\\f013\"; } .fa-trash-o:before { content: \"\\f014\"; } .fa-home:before { content: \"\\f015\"; } .fa-file-o:before { content: \"\\f016\"; } .fa-clock-o:before { content: \"\\f017\"; } .fa-road:before { content: \"\\f018\"; } .fa-download:before { content: \"\\f019\"; } .fa-arrow-circle-o-down:before { content: \"\\f01a\"; } .fa-arrow-circle-o-up:before { content: \"\\f01b\"; } .fa-inbox:before { content: \"\\f01c\"; } .fa-play-circle-o:before { content: \"\\f01d\"; } .fa-rotate-right:before, .fa-repeat:before { content: \"\\f01e\"; } .fa-refresh:before { content: \"\\f021\"; } .fa-list-alt:before { content: \"\\f022\"; } .fa-lock:before { content: \"\\f023\"; } .fa-flag:before { content: \"\\f024\"; } .fa-headphones:before { content: \"\\f025\"; } .fa-volume-off:before { content: \"\\f026\"; } .fa-volume-down:before { content: \"\\f027\"; } .fa-volume-up:before { content: \"\\f028\"; } .fa-qrcode:before { content: \"\\f029\"; } .fa-barcode:before { content: \"\\f02a\"; } .fa-tag:before { content: \"\\f02b\"; } .fa-tags:before { content: \"\\f02c\"; } .fa-book:before { content: \"\\f02d\"; } .fa-bookmark:before { content: \"\\f02e\"; } .fa-print:before { content: \"\\f02f\"; } .fa-camera:before { content: \"\\f030\"; } .fa-font:before { content: \"\\f031\"; } .fa-bold:before { content: \"\\f032\"; } .fa-italic:before { content: \"\\f033\"; } .fa-text-height:before { content: \"\\f034\"; } .fa-text-width:before { content: \"\\f035\"; } .fa-align-left:before { content: \"\\f036\"; } .fa-align-center:before { content: \"\\f037\"; } .fa-align-right:before { content: \"\\f038\"; } .fa-align-justify:before { content: \"\\f039\"; } .fa-list:before { content: \"\\f03a\"; } .fa-dedent:before, .fa-outdent:before { content: \"\\f03b\"; } .fa-indent:before { content: \"\\f03c\"; } .fa-video-camera:before { content: \"\\f03d\"; } .fa-photo:before, .fa-image:before, .fa-picture-o:before { content: \"\\f03e\"; } .fa-pencil:before { content: \"\\f040\"; } .fa-map-marker:before { content: \"\\f041\"; } .fa-adjust:before { content: \"\\f042\"; } .fa-tint:before { content: \"\\f043\"; } .fa-edit:before, .fa-pencil-square-o:before { content: \"\\f044\"; } .fa-share-square-o:before { content: \"\\f045\"; } .fa-check-square-o:before { content: \"\\f046\"; } .fa-arrows:before { content: \"\\f047\"; } .fa-step-backward:before { content: \"\\f048\"; } .fa-fast-backward:before { content: \"\\f049\"; } .fa-backward:before { content: \"\\f04a\"; } .fa-play:before { content: \"\\f04b\"; } .fa-pause:before { content: \"\\f04c\"; } .fa-stop:before { content: \"\\f04d\"; } .fa-forward:before { content: \"\\f04e\"; } .fa-fast-forward:before { content: \"\\f050\"; } .fa-step-forward:before { content: \"\\f051\"; } .fa-eject:before { content: \"\\f052\"; } .fa-chevron-left:before { content: \"\\f053\"; } .fa-chevron-right:before { content: \"\\f054\"; } .fa-plus-circle:before { content: \"\\f055\"; } .fa-minus-circle:before { content: \"\\f056\"; } .fa-times-circle:before { content: \"\\f057\"; } .fa-check-circle:before { content: \"\\f058\"; } .fa-question-circle:before { content: \"\\f059\"; } .fa-info-circle:before { content: \"\\f05a\"; } .fa-crosshairs:before { content: \"\\f05b\"; } .fa-times-circle-o:before { content: \"\\f05c\"; } .fa-check-circle-o:before { content: \"\\f05d\"; } .fa-ban:before { content: \"\\f05e\"; } .fa-arrow-left:before { content: \"\\f060\"; } .fa-arrow-right:before { content: \"\\f061\"; } .fa-arrow-up:before { content: \"\\f062\"; } .fa-arrow-down:before { content: \"\\f063\"; } .fa-mail-forward:before, .fa-share:before { content: \"\\f064\"; } .fa-expand:before { content: \"\\f065\"; } .fa-compress:before { content: \"\\f066\"; } .fa-plus:before { content: \"\\f067\"; } .fa-minus:before { content: \"\\f068\"; } .fa-asterisk:before { content: \"\\f069\"; } .fa-exclamation-circle:before { content: \"\\f06a\"; } .fa-gift:before { content: \"\\f06b\"; } .fa-leaf:before { content: \"\\f06c\"; } .fa-fire:before { content: \"\\f06d\"; } .fa-eye:before { content: \"\\f06e\"; } .fa-eye-slash:before { content: \"\\f070\"; } .fa-warning:before, .fa-exclamation-triangle:before { content: \"\\f071\"; } .fa-plane:before { content: \"\\f072\"; } .fa-calendar:before { content: \"\\f073\"; } .fa-random:before { content: \"\\f074\"; } .fa-comment:before { content: \"\\f075\"; } .fa-magnet:before { content: \"\\f076\"; } .fa-chevron-up:before { content: \"\\f077\"; } .fa-chevron-down:before { content: \"\\f078\"; } .fa-retweet:before { content: \"\\f079\"; } .fa-shopping-cart:before { content: \"\\f07a\"; } .fa-folder:before { content: \"\\f07b\"; } .fa-folder-open:before { content: \"\\f07c\"; } .fa-arrows-v:before { content: \"\\f07d\"; } .fa-arrows-h:before { content: \"\\f07e\"; } .fa-bar-chart-o:before, .fa-bar-chart:before { content: \"\\f080\"; } .fa-twitter-square:before { content: \"\\f081\"; } .fa-facebook-square:before { content: \"\\f082\"; } .fa-camera-retro:before { content: \"\\f083\"; } .fa-key:before { content: \"\\f084\"; } .fa-gears:before, .fa-cogs:before { content: \"\\f085\"; } .fa-comments:before { content: \"\\f086\"; } .fa-thumbs-o-up:before { content: \"\\f087\"; } .fa-thumbs-o-down:before { content: \"\\f088\"; } .fa-star-half:before { content: \"\\f089\"; } .fa-heart-o:before { content: \"\\f08a\"; } .fa-sign-out:before { content: \"\\f08b\"; } .fa-linkedin-square:before { content: \"\\f08c\"; } .fa-thumb-tack:before { content: \"\\f08d\"; } .fa-external-link:before { content: \"\\f08e\"; } .fa-sign-in:before { content: \"\\f090\"; } .fa-trophy:before { content: \"\\f091\"; } .fa-github-square:before { content: \"\\f092\"; } .fa-upload:before { content: \"\\f093\"; } .fa-lemon-o:before { content: \"\\f094\"; } .fa-phone:before { content: \"\\f095\"; } .fa-square-o:before { content: \"\\f096\"; } .fa-bookmark-o:before { content: \"\\f097\"; } .fa-phone-square:before { content: \"\\f098\"; } .fa-twitter:before { content: \"\\f099\"; } .fa-facebook:before { content: \"\\f09a\"; } .fa-github:before { content: \"\\f09b\"; } .fa-unlock:before { content: \"\\f09c\"; } .fa-credit-card:before { content: \"\\f09d\"; } .fa-rss:before { content: \"\\f09e\"; } .fa-hdd-o:before { content: \"\\f0a0\"; } .fa-bullhorn:before { content: \"\\f0a1\"; } .fa-bell:before { content: \"\\f0f3\"; } .fa-certificate:before { content: \"\\f0a3\"; } .fa-hand-o-right:before { content: \"\\f0a4\"; } .fa-hand-o-left:before { content: \"\\f0a5\"; } .fa-hand-o-up:before { content: \"\\f0a6\"; } .fa-hand-o-down:before { content: \"\\f0a7\"; } .fa-arrow-circle-left:before { content: \"\\f0a8\"; } .fa-arrow-circle-right:before { content: \"\\f0a9\"; } .fa-arrow-circle-up:before { content: \"\\f0aa\"; } .fa-arrow-circle-down:before { content: \"\\f0ab\"; } .fa-globe:before { content: \"\\f0ac\"; } .fa-wrench:before { content: \"\\f0ad\"; } .fa-tasks:before { content: \"\\f0ae\"; } .fa-filter:before { content: \"\\f0b0\"; } .fa-briefcase:before { content: \"\\f0b1\"; } .fa-arrows-alt:before { content: \"\\f0b2\"; } .fa-group:before, .fa-users:before { content: \"\\f0c0\"; } .fa-chain:before, .fa-link:before { content: \"\\f0c1\"; } .fa-cloud:before { content: \"\\f0c2\"; } .fa-flask:before { content: \"\\f0c3\"; } .fa-cut:before, .fa-scissors:before { content: \"\\f0c4\"; } .fa-copy:before, .fa-files-o:before { content: \"\\f0c5\"; } .fa-paperclip:before { content: \"\\f0c6\"; } .fa-save:before, .fa-floppy-o:before { content: \"\\f0c7\"; } .fa-square:before { content: \"\\f0c8\"; } .fa-navicon:before, .fa-reorder:before, .fa-bars:before { content: \"\\f0c9\"; } .fa-list-ul:before { content: \"\\f0ca\"; } .fa-list-ol:before { content: \"\\f0cb\"; } .fa-strikethrough:before { content: \"\\f0cc\"; } .fa-underline:before { content: \"\\f0cd\"; } .fa-table:before { content: \"\\f0ce\"; } .fa-magic:before { content: \"\\f0d0\"; } .fa-truck:before { content: \"\\f0d1\"; } .fa-pinterest:before { content: \"\\f0d2\"; } .fa-pinterest-square:before { content: \"\\f0d3\"; } .fa-google-plus-square:before { content: \"\\f0d4\"; } .fa-google-plus:before { content: \"\\f0d5\"; } .fa-money:before { content: \"\\f0d6\"; } .fa-caret-down:before { content: \"\\f0d7\"; } .fa-caret-up:before { content: \"\\f0d8\"; } .fa-caret-left:before { content: \"\\f0d9\"; } .fa-caret-right:before { content: \"\\f0da\"; } .fa-columns:before { content: \"\\f0db\"; } .fa-unsorted:before, .fa-sort:before { content: \"\\f0dc\"; } .fa-sort-down:before, .fa-sort-desc:before { content: \"\\f0dd\"; } .fa-sort-up:before, .fa-sort-asc:before { content: \"\\f0de\"; } .fa-envelope:before { content: \"\\f0e0\"; } .fa-linkedin:before { content: \"\\f0e1\"; } .fa-rotate-left:before, .fa-undo:before { content: \"\\f0e2\"; } .fa-legal:before, .fa-gavel:before { content: \"\\f0e3\"; } .fa-dashboard:before, .fa-tachometer:before { content: \"\\f0e4\"; } .fa-comment-o:before { content: \"\\f0e5\"; } .fa-comments-o:before { content: \"\\f0e6\"; } .fa-flash:before, .fa-bolt:before { content: \"\\f0e7\"; } .fa-sitemap:before { content: \"\\f0e8\"; } .fa-umbrella:before { content: \"\\f0e9\"; } .fa-paste:before, .fa-clipboard:before { content: \"\\f0ea\"; } .fa-lightbulb-o:before { content: \"\\f0eb\"; } .fa-exchange:before { content: \"\\f0ec\"; } .fa-cloud-download:before { content: \"\\f0ed\"; } .fa-cloud-upload:before { content: \"\\f0ee\"; } .fa-user-md:before { content: \"\\f0f0\"; } .fa-stethoscope:before { content: \"\\f0f1\"; } .fa-suitcase:before { content: \"\\f0f2\"; } .fa-bell-o:before { content: \"\\f0a2\"; } .fa-coffee:before { content: \"\\f0f4\"; } .fa-cutlery:before { content: \"\\f0f5\"; } .fa-file-text-o:before { content: \"\\f0f6\"; } .fa-building-o:before { content: \"\\f0f7\"; } .fa-hospital-o:before { content: \"\\f0f8\"; } .fa-ambulance:before { content: \"\\f0f9\"; } .fa-medkit:before { content: \"\\f0fa\"; } .fa-fighter-jet:before { content: \"\\f0fb\"; } .fa-beer:before { content: \"\\f0fc\"; } .fa-h-square:before { content: \"\\f0fd\"; } .fa-plus-square:before { content: \"\\f0fe\"; } .fa-angle-double-left:before { content: \"\\f100\"; } .fa-angle-double-right:before { content: \"\\f101\"; } .fa-angle-double-up:before { content: \"\\f102\"; } .fa-angle-double-down:before { content: \"\\f103\"; } .fa-angle-left:before { content: \"\\f104\"; } .fa-angle-right:before { content: \"\\f105\"; } .fa-angle-up:before { content: \"\\f106\"; } .fa-angle-down:before { content: \"\\f107\"; } .fa-desktop:before { content: \"\\f108\"; } .fa-laptop:before { content: \"\\f109\"; } .fa-tablet:before { content: \"\\f10a\"; } .fa-mobile-phone:before, .fa-mobile:before { content: \"\\f10b\"; } .fa-circle-o:before { content: \"\\f10c\"; } .fa-quote-left:before { content: \"\\f10d\"; } .fa-quote-right:before { content: \"\\f10e\"; } .fa-spinner:before { content: \"\\f110\"; } .fa-circle:before { content: \"\\f111\"; } .fa-mail-reply:before, .fa-reply:before { content: \"\\f112\"; } .fa-github-alt:before { content: \"\\f113\"; } .fa-folder-o:before { content: \"\\f114\"; } .fa-folder-open-o:before { content: \"\\f115\"; } .fa-smile-o:before { content: \"\\f118\"; } .fa-frown-o:before { content: \"\\f119\"; } .fa-meh-o:before { content: \"\\f11a\"; } .fa-gamepad:before { content: \"\\f11b\"; } .fa-keyboard-o:before { content: \"\\f11c\"; } .fa-flag-o:before { content: \"\\f11d\"; } .fa-flag-checkered:before { content: \"\\f11e\"; } .fa-terminal:before { content: \"\\f120\"; } .fa-code:before { content: \"\\f121\"; } .fa-mail-reply-all:before, .fa-reply-all:before { content: \"\\f122\"; } .fa-star-half-empty:before, .fa-star-half-full:before, .fa-star-half-o:before { content: \"\\f123\"; } .fa-location-arrow:before { content: \"\\f124\"; } .fa-crop:before { content: \"\\f125\"; } .fa-code-fork:before { content: \"\\f126\"; } .fa-unlink:before, .fa-chain-broken:before { content: \"\\f127\"; } .fa-question:before { content: \"\\f128\"; } .fa-info:before { content: \"\\f129\"; } .fa-exclamation:before { content: \"\\f12a\"; } .fa-superscript:before { content: \"\\f12b\"; } .fa-subscript:before { content: \"\\f12c\"; } .fa-eraser:before { content: \"\\f12d\"; } .fa-puzzle-piece:before { content: \"\\f12e\"; } .fa-microphone:before { content: \"\\f130\"; } .fa-microphone-slash:before { content: \"\\f131\"; } .fa-shield:before { content: \"\\f132\"; } .fa-calendar-o:before { content: \"\\f133\"; } .fa-fire-extinguisher:before { content: \"\\f134\"; } .fa-rocket:before { content: \"\\f135\"; } .fa-maxcdn:before { content: \"\\f136\"; } .fa-chevron-circle-left:before { content: \"\\f137\"; } .fa-chevron-circle-right:before { content: \"\\f138\"; } .fa-chevron-circle-up:before { content: \"\\f139\"; } .fa-chevron-circle-down:before { content: \"\\f13a\"; } .fa-html5:before { content: \"\\f13b\"; } .fa-css3:before { content: \"\\f13c\"; } .fa-anchor:before { content: \"\\f13d\"; } .fa-unlock-alt:before { content: \"\\f13e\"; } .fa-bullseye:before { content: \"\\f140\"; } .fa-ellipsis-h:before { content: \"\\f141\"; } .fa-ellipsis-v:before { content: \"\\f142\"; } .fa-rss-square:before { content: \"\\f143\"; } .fa-play-circle:before { content: \"\\f144\"; } .fa-ticket:before { content: \"\\f145\"; } .fa-minus-square:before { content: \"\\f146\"; } .fa-minus-square-o:before { content: \"\\f147\"; } .fa-level-up:before { content: \"\\f148\"; } .fa-level-down:before { content: \"\\f149\"; } .fa-check-square:before { content: \"\\f14a\"; } .fa-pencil-square:before { content: \"\\f14b\"; } .fa-external-link-square:before { content: \"\\f14c\"; } .fa-share-square:before { content: \"\\f14d\"; } .fa-compass:before { content: \"\\f14e\"; } .fa-toggle-down:before, .fa-caret-square-o-down:before { content: \"\\f150\"; } .fa-toggle-up:before, .fa-caret-square-o-up:before { content: \"\\f151\"; } .fa-toggle-right:before, .fa-caret-square-o-right:before { content: \"\\f152\"; } .fa-euro:before, .fa-eur:before { content: \"\\f153\"; } .fa-gbp:before { content: \"\\f154\"; } .fa-dollar:before, .fa-usd:before { content: \"\\f155\"; } .fa-rupee:before, .fa-inr:before { content: \"\\f156\"; } .fa-cny:before, .fa-rmb:before, .fa-yen:before, .fa-jpy:before { content: \"\\f157\"; } .fa-ruble:before, .fa-rouble:before, .fa-rub:before { content: \"\\f158\"; } .fa-won:before, .fa-krw:before { content: \"\\f159\"; } .fa-bitcoin:before, .fa-btc:before { content: \"\\f15a\"; } .fa-file:before { content: \"\\f15b\"; } .fa-file-text:before { content: \"\\f15c\"; } .fa-sort-alpha-asc:before { content: \"\\f15d\"; } .fa-sort-alpha-desc:before { content: \"\\f15e\"; } .fa-sort-amount-asc:before { content: \"\\f160\"; } .fa-sort-amount-desc:before { content: \"\\f161\"; } .fa-sort-numeric-asc:before { content: \"\\f162\"; } .fa-sort-numeric-desc:before { content: \"\\f163\"; } .fa-thumbs-up:before { content: \"\\f164\"; } .fa-thumbs-down:before { content: \"\\f165\"; } .fa-youtube-square:before { content: \"\\f166\"; } .fa-youtube:before { content: \"\\f167\"; } .fa-xing:before { content: \"\\f168\"; } .fa-xing-square:before { content: \"\\f169\"; } .fa-youtube-play:before { content: \"\\f16a\"; } .fa-dropbox:before { content: \"\\f16b\"; } .fa-stack-overflow:before { content: \"\\f16c\"; } .fa-instagram:before { content: \"\\f16d\"; } .fa-flickr:before { content: \"\\f16e\"; } .fa-adn:before { content: \"\\f170\"; } .fa-bitbucket:before { content: \"\\f171\"; } .fa-bitbucket-square:before { content: \"\\f172\"; } .fa-tumblr:before { content: \"\\f173\"; } .fa-tumblr-square:before { content: \"\\f174\"; } .fa-long-arrow-down:before { content: \"\\f175\"; } .fa-long-arrow-up:before { content: \"\\f176\"; } .fa-long-arrow-left:before { content: \"\\f177\"; } .fa-long-arrow-right:before { content: \"\\f178\"; } .fa-apple:before { content: \"\\f179\"; } .fa-windows:before { content: \"\\f17a\"; } .fa-android:before { content: \"\\f17b\"; } .fa-linux:before { content: \"\\f17c\"; } .fa-dribbble:before { content: \"\\f17d\"; } .fa-skype:before { content: \"\\f17e\"; } .fa-foursquare:before { content: \"\\f180\"; } .fa-trello:before { content: \"\\f181\"; } .fa-female:before { content: \"\\f182\"; } .fa-male:before { content: \"\\f183\"; } .fa-gittip:before { content: \"\\f184\"; } .fa-sun-o:before { content: \"\\f185\"; } .fa-moon-o:before { content: \"\\f186\"; } .fa-archive:before { content: \"\\f187\"; } .fa-bug:before { content: \"\\f188\"; } .fa-vk:before { content: \"\\f189\"; } .fa-weibo:before { content: \"\\f18a\"; } .fa-renren:before { content: \"\\f18b\"; } .fa-pagelines:before { content: \"\\f18c\"; } .fa-stack-exchange:before { content: \"\\f18d\"; } .fa-arrow-circle-o-right:before { content: \"\\f18e\"; } .fa-arrow-circle-o-left:before { content: \"\\f190\"; } .fa-toggle-left:before, .fa-caret-square-o-left:before { content: \"\\f191\"; } .fa-dot-circle-o:before { content: \"\\f192\"; } .fa-wheelchair:before { content: \"\\f193\"; } .fa-vimeo-square:before { content: \"\\f194\"; } .fa-turkish-lira:before, .fa-try:before { content: \"\\f195\"; } .fa-plus-square-o:before { content: \"\\f196\"; } .fa-space-shuttle:before { content: \"\\f197\"; } .fa-slack:before { content: \"\\f198\"; } .fa-envelope-square:before { content: \"\\f199\"; } .fa-wordpress:before { content: \"\\f19a\"; } .fa-openid:before { content: \"\\f19b\"; } .fa-institution:before, .fa-bank:before, .fa-university:before { content: \"\\f19c\"; } .fa-mortar-board:before, .fa-graduation-cap:before { content: \"\\f19d\"; } .fa-yahoo:before { content: \"\\f19e\"; } .fa-google:before { content: \"\\f1a0\"; } .fa-reddit:before { content: \"\\f1a1\"; } .fa-reddit-square:before { content: \"\\f1a2\"; } .fa-stumbleupon-circle:before { content: \"\\f1a3\"; } .fa-stumbleupon:before { content: \"\\f1a4\"; } .fa-delicious:before { content: \"\\f1a5\"; } .fa-digg:before { content: \"\\f1a6\"; } .fa-pied-piper:before { content: \"\\f1a7\"; } .fa-pied-piper-alt:before { content: \"\\f1a8\"; } .fa-drupal:before { content: \"\\f1a9\"; } .fa-joomla:before { content: \"\\f1aa\"; } .fa-language:before { content: \"\\f1ab\"; } .fa-fax:before { content: \"\\f1ac\"; } .fa-building:before { content: \"\\f1ad\"; } .fa-child:before { content: \"\\f1ae\"; } .fa-paw:before { content: \"\\f1b0\"; } .fa-spoon:before { content: \"\\f1b1\"; } .fa-cube:before { content: \"\\f1b2\"; } .fa-cubes:before { content: \"\\f1b3\"; } .fa-behance:before { content: \"\\f1b4\"; } .fa-behance-square:before { content: \"\\f1b5\"; } .fa-steam:before { content: \"\\f1b6\"; } .fa-steam-square:before { content: \"\\f1b7\"; } .fa-recycle:before { content: \"\\f1b8\"; } .fa-automobile:before, .fa-car:before { content: \"\\f1b9\"; } .fa-cab:before, .fa-taxi:before { content: \"\\f1ba\"; } .fa-tree:before { content: \"\\f1bb\"; } .fa-spotify:before { content: \"\\f1bc\"; } .fa-deviantart:before { content: \"\\f1bd\"; } .fa-soundcloud:before { content: \"\\f1be\"; } .fa-database:before { content: \"\\f1c0\"; } .fa-file-pdf-o:before { content: \"\\f1c1\"; } .fa-file-word-o:before { content: \"\\f1c2\"; } .fa-file-excel-o:before { content: \"\\f1c3\"; } .fa-file-powerpoint-o:before { content: \"\\f1c4\"; } .fa-file-photo-o:before, .fa-file-picture-o:before, .fa-file-image-o:before { content: \"\\f1c5\"; } .fa-file-zip-o:before, .fa-file-archive-o:before { content: \"\\f1c6\"; } .fa-file-sound-o:before, .fa-file-audio-o:before { content: \"\\f1c7\"; } .fa-file-movie-o:before, .fa-file-video-o:before { content: \"\\f1c8\"; } .fa-file-code-o:before { content: \"\\f1c9\"; } .fa-vine:before { content: \"\\f1ca\"; } .fa-codepen:before { content: \"\\f1cb\"; } .fa-jsfiddle:before { content: \"\\f1cc\"; } .fa-life-bouy:before, .fa-life-buoy:before, .fa-life-saver:before, .fa-support:before, .fa-life-ring:before { content: \"\\f1cd\"; } .fa-circle-o-notch:before { content: \"\\f1ce\"; } .fa-ra:before, .fa-rebel:before { content: \"\\f1d0\"; } .fa-ge:before, .fa-empire:before { content: \"\\f1d1\"; } .fa-git-square:before { content: \"\\f1d2\"; } .fa-git:before { content: \"\\f1d3\"; } .fa-hacker-news:before { content: \"\\f1d4\"; } .fa-tencent-weibo:before { content: \"\\f1d5\"; } .fa-qq:before { content: \"\\f1d6\"; } .fa-wechat:before, .fa-weixin:before { content: \"\\f1d7\"; } .fa-send:before, .fa-paper-plane:before { content: \"\\f1d8\"; } .fa-send-o:before, .fa-paper-plane-o:before { content: \"\\f1d9\"; } .fa-history:before { content: \"\\f1da\"; } .fa-circle-thin:before { content: \"\\f1db\"; } .fa-header:before { content: \"\\f1dc\"; } .fa-paragraph:before { content: \"\\f1dd\"; } .fa-sliders:before { content: \"\\f1de\"; } .fa-share-alt:before { content: \"\\f1e0\"; } .fa-share-alt-square:before { content: \"\\f1e1\"; } .fa-bomb:before { content: \"\\f1e2\"; } .fa-soccer-ball-o:before, .fa-futbol-o:before { content: \"\\f1e3\"; } .fa-tty:before { content: \"\\f1e4\"; } .fa-binoculars:before { content: \"\\f1e5\"; } .fa-plug:before { content: \"\\f1e6\"; } .fa-slideshare:before { content: \"\\f1e7\"; } .fa-twitch:before { content: \"\\f1e8\"; } .fa-yelp:before { content: \"\\f1e9\"; } .fa-newspaper-o:before { content: \"\\f1ea\"; } .fa-wifi:before { content: \"\\f1eb\"; } .fa-calculator:before { content: \"\\f1ec\"; } .fa-paypal:before { content: \"\\f1ed\"; } .fa-google-wallet:before { content: \"\\f1ee\"; } .fa-cc-visa:before { content: \"\\f1f0\"; } .fa-cc-mastercard:before { content: \"\\f1f1\"; } .fa-cc-discover:before { content: \"\\f1f2\"; } .fa-cc-amex:before { content: \"\\f1f3\"; } .fa-cc-paypal:before { content: \"\\f1f4\"; } .fa-cc-stripe:before { content: \"\\f1f5\"; } .fa-bell-slash:before { content: \"\\f1f6\"; } .fa-bell-slash-o:before { content: \"\\f1f7\"; } .fa-trash:before { content: \"\\f1f8\"; } .fa-copyright:before { content: \"\\f1f9\"; } .fa-at:before { content: \"\\f1fa\"; } .fa-eyedropper:before { content: \"\\f1fb\"; } .fa-paint-brush:before { content: \"\\f1fc\"; } .fa-birthday-cake:before { content: \"\\f1fd\"; } .fa-area-chart:before { content: \"\\f1fe\"; } .fa-pie-chart:before { content: \"\\f200\"; } .fa-line-chart:before { content: \"\\f201\"; } .fa-lastfm:before { content: \"\\f202\"; } .fa-lastfm-square:before { content: \"\\f203\"; } .fa-toggle-off:before { content: \"\\f204\"; } .fa-toggle-on:before { content: \"\\f205\"; } .fa-bicycle:before { content: \"\\f206\"; } .fa-bus:before { content: \"\\f207\"; } .fa-ioxhost:before { content: \"\\f208\"; } .fa-angellist:before { content: \"\\f209\"; } .fa-cc:before { content: \"\\f20a\"; } .fa-shekel:before, .fa-sheqel:before, .fa-ils:before { content: \"\\f20b\"; } .fa-meanpath:before { content: \"\\f20c\"; }"},{"title":"","date":"2017-07-21T08:30:36.393Z","updated":"2014-08-26T16:46:50.000Z","comments":true,"path":"about/css/font-awesome/css/font-awesome.min.css","permalink":"http://yoursite.com/about/css/font-awesome/css/font-awesome.min.css","excerpt":"","text":"/*! * Font Awesome 4.2.0 by @davegandy - http://fontawesome.io - @fontawesome * License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License) */@font-face{font-family:'FontAwesome';src:url('../fonts/fontawesome-webfont.eot?v=4.2.0');src:url('../fonts/fontawesome-webfont.eot?#iefix&v=4.2.0') format('embedded-opentype'),url('../fonts/fontawesome-webfont.woff?v=4.2.0') format('woff'),url('../fonts/fontawesome-webfont.ttf?v=4.2.0') format('truetype'),url('../fonts/fontawesome-webfont.svg?v=4.2.0#fontawesomeregular') format('svg');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.28571429em;text-align:center}.fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}.fa-li.fa-lg{left:-1.85714286em}.fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-rotate-90{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=1);-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2);-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=3);-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}.fa-flip-vertical{filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:\"\\f000\"}.fa-music:before{content:\"\\f001\"}.fa-search:before{content:\"\\f002\"}.fa-envelope-o:before{content:\"\\f003\"}.fa-heart:before{content:\"\\f004\"}.fa-star:before{content:\"\\f005\"}.fa-star-o:before{content:\"\\f006\"}.fa-user:before{content:\"\\f007\"}.fa-film:before{content:\"\\f008\"}.fa-th-large:before{content:\"\\f009\"}.fa-th:before{content:\"\\f00a\"}.fa-th-list:before{content:\"\\f00b\"}.fa-check:before{content:\"\\f00c\"}.fa-remove:before,.fa-close:before,.fa-times:before{content:\"\\f00d\"}.fa-search-plus:before{content:\"\\f00e\"}.fa-search-minus:before{content:\"\\f010\"}.fa-power-off:before{content:\"\\f011\"}.fa-signal:before{content:\"\\f012\"}.fa-gear:before,.fa-cog:before{content:\"\\f013\"}.fa-trash-o:before{content:\"\\f014\"}.fa-home:before{content:\"\\f015\"}.fa-file-o:before{content:\"\\f016\"}.fa-clock-o:before{content:\"\\f017\"}.fa-road:before{content:\"\\f018\"}.fa-download:before{content:\"\\f019\"}.fa-arrow-circle-o-down:before{content:\"\\f01a\"}.fa-arrow-circle-o-up:before{content:\"\\f01b\"}.fa-inbox:before{content:\"\\f01c\"}.fa-play-circle-o:before{content:\"\\f01d\"}.fa-rotate-right:before,.fa-repeat:before{content:\"\\f01e\"}.fa-refresh:before{content:\"\\f021\"}.fa-list-alt:before{content:\"\\f022\"}.fa-lock:before{content:\"\\f023\"}.fa-flag:before{content:\"\\f024\"}.fa-headphones:before{content:\"\\f025\"}.fa-volume-off:before{content:\"\\f026\"}.fa-volume-down:before{content:\"\\f027\"}.fa-volume-up:before{content:\"\\f028\"}.fa-qrcode:before{content:\"\\f029\"}.fa-barcode:before{content:\"\\f02a\"}.fa-tag:before{content:\"\\f02b\"}.fa-tags:before{content:\"\\f02c\"}.fa-book:before{content:\"\\f02d\"}.fa-bookmark:before{content:\"\\f02e\"}.fa-print:before{content:\"\\f02f\"}.fa-camera:before{content:\"\\f030\"}.fa-font:before{content:\"\\f031\"}.fa-bold:before{content:\"\\f032\"}.fa-italic:before{content:\"\\f033\"}.fa-text-height:before{content:\"\\f034\"}.fa-text-width:before{content:\"\\f035\"}.fa-align-left:before{content:\"\\f036\"}.fa-align-center:before{content:\"\\f037\"}.fa-align-right:before{content:\"\\f038\"}.fa-align-justify:before{content:\"\\f039\"}.fa-list:before{content:\"\\f03a\"}.fa-dedent:before,.fa-outdent:before{content:\"\\f03b\"}.fa-indent:before{content:\"\\f03c\"}.fa-video-camera:before{content:\"\\f03d\"}.fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\"\\f03e\"}.fa-pencil:before{content:\"\\f040\"}.fa-map-marker:before{content:\"\\f041\"}.fa-adjust:before{content:\"\\f042\"}.fa-tint:before{content:\"\\f043\"}.fa-edit:before,.fa-pencil-square-o:before{content:\"\\f044\"}.fa-share-square-o:before{content:\"\\f045\"}.fa-check-square-o:before{content:\"\\f046\"}.fa-arrows:before{content:\"\\f047\"}.fa-step-backward:before{content:\"\\f048\"}.fa-fast-backward:before{content:\"\\f049\"}.fa-backward:before{content:\"\\f04a\"}.fa-play:before{content:\"\\f04b\"}.fa-pause:before{content:\"\\f04c\"}.fa-stop:before{content:\"\\f04d\"}.fa-forward:before{content:\"\\f04e\"}.fa-fast-forward:before{content:\"\\f050\"}.fa-step-forward:before{content:\"\\f051\"}.fa-eject:before{content:\"\\f052\"}.fa-chevron-left:before{content:\"\\f053\"}.fa-chevron-right:before{content:\"\\f054\"}.fa-plus-circle:before{content:\"\\f055\"}.fa-minus-circle:before{content:\"\\f056\"}.fa-times-circle:before{content:\"\\f057\"}.fa-check-circle:before{content:\"\\f058\"}.fa-question-circle:before{content:\"\\f059\"}.fa-info-circle:before{content:\"\\f05a\"}.fa-crosshairs:before{content:\"\\f05b\"}.fa-times-circle-o:before{content:\"\\f05c\"}.fa-check-circle-o:before{content:\"\\f05d\"}.fa-ban:before{content:\"\\f05e\"}.fa-arrow-left:before{content:\"\\f060\"}.fa-arrow-right:before{content:\"\\f061\"}.fa-arrow-up:before{content:\"\\f062\"}.fa-arrow-down:before{content:\"\\f063\"}.fa-mail-forward:before,.fa-share:before{content:\"\\f064\"}.fa-expand:before{content:\"\\f065\"}.fa-compress:before{content:\"\\f066\"}.fa-plus:before{content:\"\\f067\"}.fa-minus:before{content:\"\\f068\"}.fa-asterisk:before{content:\"\\f069\"}.fa-exclamation-circle:before{content:\"\\f06a\"}.fa-gift:before{content:\"\\f06b\"}.fa-leaf:before{content:\"\\f06c\"}.fa-fire:before{content:\"\\f06d\"}.fa-eye:before{content:\"\\f06e\"}.fa-eye-slash:before{content:\"\\f070\"}.fa-warning:before,.fa-exclamation-triangle:before{content:\"\\f071\"}.fa-plane:before{content:\"\\f072\"}.fa-calendar:before{content:\"\\f073\"}.fa-random:before{content:\"\\f074\"}.fa-comment:before{content:\"\\f075\"}.fa-magnet:before{content:\"\\f076\"}.fa-chevron-up:before{content:\"\\f077\"}.fa-chevron-down:before{content:\"\\f078\"}.fa-retweet:before{content:\"\\f079\"}.fa-shopping-cart:before{content:\"\\f07a\"}.fa-folder:before{content:\"\\f07b\"}.fa-folder-open:before{content:\"\\f07c\"}.fa-arrows-v:before{content:\"\\f07d\"}.fa-arrows-h:before{content:\"\\f07e\"}.fa-bar-chart-o:before,.fa-bar-chart:before{content:\"\\f080\"}.fa-twitter-square:before{content:\"\\f081\"}.fa-facebook-square:before{content:\"\\f082\"}.fa-camera-retro:before{content:\"\\f083\"}.fa-key:before{content:\"\\f084\"}.fa-gears:before,.fa-cogs:before{content:\"\\f085\"}.fa-comments:before{content:\"\\f086\"}.fa-thumbs-o-up:before{content:\"\\f087\"}.fa-thumbs-o-down:before{content:\"\\f088\"}.fa-star-half:before{content:\"\\f089\"}.fa-heart-o:before{content:\"\\f08a\"}.fa-sign-out:before{content:\"\\f08b\"}.fa-linkedin-square:before{content:\"\\f08c\"}.fa-thumb-tack:before{content:\"\\f08d\"}.fa-external-link:before{content:\"\\f08e\"}.fa-sign-in:before{content:\"\\f090\"}.fa-trophy:before{content:\"\\f091\"}.fa-github-square:before{content:\"\\f092\"}.fa-upload:before{content:\"\\f093\"}.fa-lemon-o:before{content:\"\\f094\"}.fa-phone:before{content:\"\\f095\"}.fa-square-o:before{content:\"\\f096\"}.fa-bookmark-o:before{content:\"\\f097\"}.fa-phone-square:before{content:\"\\f098\"}.fa-twitter:before{content:\"\\f099\"}.fa-facebook:before{content:\"\\f09a\"}.fa-github:before{content:\"\\f09b\"}.fa-unlock:before{content:\"\\f09c\"}.fa-credit-card:before{content:\"\\f09d\"}.fa-rss:before{content:\"\\f09e\"}.fa-hdd-o:before{content:\"\\f0a0\"}.fa-bullhorn:before{content:\"\\f0a1\"}.fa-bell:before{content:\"\\f0f3\"}.fa-certificate:before{content:\"\\f0a3\"}.fa-hand-o-right:before{content:\"\\f0a4\"}.fa-hand-o-left:before{content:\"\\f0a5\"}.fa-hand-o-up:before{content:\"\\f0a6\"}.fa-hand-o-down:before{content:\"\\f0a7\"}.fa-arrow-circle-left:before{content:\"\\f0a8\"}.fa-arrow-circle-right:before{content:\"\\f0a9\"}.fa-arrow-circle-up:before{content:\"\\f0aa\"}.fa-arrow-circle-down:before{content:\"\\f0ab\"}.fa-globe:before{content:\"\\f0ac\"}.fa-wrench:before{content:\"\\f0ad\"}.fa-tasks:before{content:\"\\f0ae\"}.fa-filter:before{content:\"\\f0b0\"}.fa-briefcase:before{content:\"\\f0b1\"}.fa-arrows-alt:before{content:\"\\f0b2\"}.fa-group:before,.fa-users:before{content:\"\\f0c0\"}.fa-chain:before,.fa-link:before{content:\"\\f0c1\"}.fa-cloud:before{content:\"\\f0c2\"}.fa-flask:before{content:\"\\f0c3\"}.fa-cut:before,.fa-scissors:before{content:\"\\f0c4\"}.fa-copy:before,.fa-files-o:before{content:\"\\f0c5\"}.fa-paperclip:before{content:\"\\f0c6\"}.fa-save:before,.fa-floppy-o:before{content:\"\\f0c7\"}.fa-square:before{content:\"\\f0c8\"}.fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\"\\f0c9\"}.fa-list-ul:before{content:\"\\f0ca\"}.fa-list-ol:before{content:\"\\f0cb\"}.fa-strikethrough:before{content:\"\\f0cc\"}.fa-underline:before{content:\"\\f0cd\"}.fa-table:before{content:\"\\f0ce\"}.fa-magic:before{content:\"\\f0d0\"}.fa-truck:before{content:\"\\f0d1\"}.fa-pinterest:before{content:\"\\f0d2\"}.fa-pinterest-square:before{content:\"\\f0d3\"}.fa-google-plus-square:before{content:\"\\f0d4\"}.fa-google-plus:before{content:\"\\f0d5\"}.fa-money:before{content:\"\\f0d6\"}.fa-caret-down:before{content:\"\\f0d7\"}.fa-caret-up:before{content:\"\\f0d8\"}.fa-caret-left:before{content:\"\\f0d9\"}.fa-caret-right:before{content:\"\\f0da\"}.fa-columns:before{content:\"\\f0db\"}.fa-unsorted:before,.fa-sort:before{content:\"\\f0dc\"}.fa-sort-down:before,.fa-sort-desc:before{content:\"\\f0dd\"}.fa-sort-up:before,.fa-sort-asc:before{content:\"\\f0de\"}.fa-envelope:before{content:\"\\f0e0\"}.fa-linkedin:before{content:\"\\f0e1\"}.fa-rotate-left:before,.fa-undo:before{content:\"\\f0e2\"}.fa-legal:before,.fa-gavel:before{content:\"\\f0e3\"}.fa-dashboard:before,.fa-tachometer:before{content:\"\\f0e4\"}.fa-comment-o:before{content:\"\\f0e5\"}.fa-comments-o:before{content:\"\\f0e6\"}.fa-flash:before,.fa-bolt:before{content:\"\\f0e7\"}.fa-sitemap:before{content:\"\\f0e8\"}.fa-umbrella:before{content:\"\\f0e9\"}.fa-paste:before,.fa-clipboard:before{content:\"\\f0ea\"}.fa-lightbulb-o:before{content:\"\\f0eb\"}.fa-exchange:before{content:\"\\f0ec\"}.fa-cloud-download:before{content:\"\\f0ed\"}.fa-cloud-upload:before{content:\"\\f0ee\"}.fa-user-md:before{content:\"\\f0f0\"}.fa-stethoscope:before{content:\"\\f0f1\"}.fa-suitcase:before{content:\"\\f0f2\"}.fa-bell-o:before{content:\"\\f0a2\"}.fa-coffee:before{content:\"\\f0f4\"}.fa-cutlery:before{content:\"\\f0f5\"}.fa-file-text-o:before{content:\"\\f0f6\"}.fa-building-o:before{content:\"\\f0f7\"}.fa-hospital-o:before{content:\"\\f0f8\"}.fa-ambulance:before{content:\"\\f0f9\"}.fa-medkit:before{content:\"\\f0fa\"}.fa-fighter-jet:before{content:\"\\f0fb\"}.fa-beer:before{content:\"\\f0fc\"}.fa-h-square:before{content:\"\\f0fd\"}.fa-plus-square:before{content:\"\\f0fe\"}.fa-angle-double-left:before{content:\"\\f100\"}.fa-angle-double-right:before{content:\"\\f101\"}.fa-angle-double-up:before{content:\"\\f102\"}.fa-angle-double-down:before{content:\"\\f103\"}.fa-angle-left:before{content:\"\\f104\"}.fa-angle-right:before{content:\"\\f105\"}.fa-angle-up:before{content:\"\\f106\"}.fa-angle-down:before{content:\"\\f107\"}.fa-desktop:before{content:\"\\f108\"}.fa-laptop:before{content:\"\\f109\"}.fa-tablet:before{content:\"\\f10a\"}.fa-mobile-phone:before,.fa-mobile:before{content:\"\\f10b\"}.fa-circle-o:before{content:\"\\f10c\"}.fa-quote-left:before{content:\"\\f10d\"}.fa-quote-right:before{content:\"\\f10e\"}.fa-spinner:before{content:\"\\f110\"}.fa-circle:before{content:\"\\f111\"}.fa-mail-reply:before,.fa-reply:before{content:\"\\f112\"}.fa-github-alt:before{content:\"\\f113\"}.fa-folder-o:before{content:\"\\f114\"}.fa-folder-open-o:before{content:\"\\f115\"}.fa-smile-o:before{content:\"\\f118\"}.fa-frown-o:before{content:\"\\f119\"}.fa-meh-o:before{content:\"\\f11a\"}.fa-gamepad:before{content:\"\\f11b\"}.fa-keyboard-o:before{content:\"\\f11c\"}.fa-flag-o:before{content:\"\\f11d\"}.fa-flag-checkered:before{content:\"\\f11e\"}.fa-terminal:before{content:\"\\f120\"}.fa-code:before{content:\"\\f121\"}.fa-mail-reply-all:before,.fa-reply-all:before{content:\"\\f122\"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\"\\f123\"}.fa-location-arrow:before{content:\"\\f124\"}.fa-crop:before{content:\"\\f125\"}.fa-code-fork:before{content:\"\\f126\"}.fa-unlink:before,.fa-chain-broken:before{content:\"\\f127\"}.fa-question:before{content:\"\\f128\"}.fa-info:before{content:\"\\f129\"}.fa-exclamation:before{content:\"\\f12a\"}.fa-superscript:before{content:\"\\f12b\"}.fa-subscript:before{content:\"\\f12c\"}.fa-eraser:before{content:\"\\f12d\"}.fa-puzzle-piece:before{content:\"\\f12e\"}.fa-microphone:before{content:\"\\f130\"}.fa-microphone-slash:before{content:\"\\f131\"}.fa-shield:before{content:\"\\f132\"}.fa-calendar-o:before{content:\"\\f133\"}.fa-fire-extinguisher:before{content:\"\\f134\"}.fa-rocket:before{content:\"\\f135\"}.fa-maxcdn:before{content:\"\\f136\"}.fa-chevron-circle-left:before{content:\"\\f137\"}.fa-chevron-circle-right:before{content:\"\\f138\"}.fa-chevron-circle-up:before{content:\"\\f139\"}.fa-chevron-circle-down:before{content:\"\\f13a\"}.fa-html5:before{content:\"\\f13b\"}.fa-css3:before{content:\"\\f13c\"}.fa-anchor:before{content:\"\\f13d\"}.fa-unlock-alt:before{content:\"\\f13e\"}.fa-bullseye:before{content:\"\\f140\"}.fa-ellipsis-h:before{content:\"\\f141\"}.fa-ellipsis-v:before{content:\"\\f142\"}.fa-rss-square:before{content:\"\\f143\"}.fa-play-circle:before{content:\"\\f144\"}.fa-ticket:before{content:\"\\f145\"}.fa-minus-square:before{content:\"\\f146\"}.fa-minus-square-o:before{content:\"\\f147\"}.fa-level-up:before{content:\"\\f148\"}.fa-level-down:before{content:\"\\f149\"}.fa-check-square:before{content:\"\\f14a\"}.fa-pencil-square:before{content:\"\\f14b\"}.fa-external-link-square:before{content:\"\\f14c\"}.fa-share-square:before{content:\"\\f14d\"}.fa-compass:before{content:\"\\f14e\"}.fa-toggle-down:before,.fa-caret-square-o-down:before{content:\"\\f150\"}.fa-toggle-up:before,.fa-caret-square-o-up:before{content:\"\\f151\"}.fa-toggle-right:before,.fa-caret-square-o-right:before{content:\"\\f152\"}.fa-euro:before,.fa-eur:before{content:\"\\f153\"}.fa-gbp:before{content:\"\\f154\"}.fa-dollar:before,.fa-usd:before{content:\"\\f155\"}.fa-rupee:before,.fa-inr:before{content:\"\\f156\"}.fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\"\\f157\"}.fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\"\\f158\"}.fa-won:before,.fa-krw:before{content:\"\\f159\"}.fa-bitcoin:before,.fa-btc:before{content:\"\\f15a\"}.fa-file:before{content:\"\\f15b\"}.fa-file-text:before{content:\"\\f15c\"}.fa-sort-alpha-asc:before{content:\"\\f15d\"}.fa-sort-alpha-desc:before{content:\"\\f15e\"}.fa-sort-amount-asc:before{content:\"\\f160\"}.fa-sort-amount-desc:before{content:\"\\f161\"}.fa-sort-numeric-asc:before{content:\"\\f162\"}.fa-sort-numeric-desc:before{content:\"\\f163\"}.fa-thumbs-up:before{content:\"\\f164\"}.fa-thumbs-down:before{content:\"\\f165\"}.fa-youtube-square:before{content:\"\\f166\"}.fa-youtube:before{content:\"\\f167\"}.fa-xing:before{content:\"\\f168\"}.fa-xing-square:before{content:\"\\f169\"}.fa-youtube-play:before{content:\"\\f16a\"}.fa-dropbox:before{content:\"\\f16b\"}.fa-stack-overflow:before{content:\"\\f16c\"}.fa-instagram:before{content:\"\\f16d\"}.fa-flickr:before{content:\"\\f16e\"}.fa-adn:before{content:\"\\f170\"}.fa-bitbucket:before{content:\"\\f171\"}.fa-bitbucket-square:before{content:\"\\f172\"}.fa-tumblr:before{content:\"\\f173\"}.fa-tumblr-square:before{content:\"\\f174\"}.fa-long-arrow-down:before{content:\"\\f175\"}.fa-long-arrow-up:before{content:\"\\f176\"}.fa-long-arrow-left:before{content:\"\\f177\"}.fa-long-arrow-right:before{content:\"\\f178\"}.fa-apple:before{content:\"\\f179\"}.fa-windows:before{content:\"\\f17a\"}.fa-android:before{content:\"\\f17b\"}.fa-linux:before{content:\"\\f17c\"}.fa-dribbble:before{content:\"\\f17d\"}.fa-skype:before{content:\"\\f17e\"}.fa-foursquare:before{content:\"\\f180\"}.fa-trello:before{content:\"\\f181\"}.fa-female:before{content:\"\\f182\"}.fa-male:before{content:\"\\f183\"}.fa-gittip:before{content:\"\\f184\"}.fa-sun-o:before{content:\"\\f185\"}.fa-moon-o:before{content:\"\\f186\"}.fa-archive:before{content:\"\\f187\"}.fa-bug:before{content:\"\\f188\"}.fa-vk:before{content:\"\\f189\"}.fa-weibo:before{content:\"\\f18a\"}.fa-renren:before{content:\"\\f18b\"}.fa-pagelines:before{content:\"\\f18c\"}.fa-stack-exchange:before{content:\"\\f18d\"}.fa-arrow-circle-o-right:before{content:\"\\f18e\"}.fa-arrow-circle-o-left:before{content:\"\\f190\"}.fa-toggle-left:before,.fa-caret-square-o-left:before{content:\"\\f191\"}.fa-dot-circle-o:before{content:\"\\f192\"}.fa-wheelchair:before{content:\"\\f193\"}.fa-vimeo-square:before{content:\"\\f194\"}.fa-turkish-lira:before,.fa-try:before{content:\"\\f195\"}.fa-plus-square-o:before{content:\"\\f196\"}.fa-space-shuttle:before{content:\"\\f197\"}.fa-slack:before{content:\"\\f198\"}.fa-envelope-square:before{content:\"\\f199\"}.fa-wordpress:before{content:\"\\f19a\"}.fa-openid:before{content:\"\\f19b\"}.fa-institution:before,.fa-bank:before,.fa-university:before{content:\"\\f19c\"}.fa-mortar-board:before,.fa-graduation-cap:before{content:\"\\f19d\"}.fa-yahoo:before{content:\"\\f19e\"}.fa-google:before{content:\"\\f1a0\"}.fa-reddit:before{content:\"\\f1a1\"}.fa-reddit-square:before{content:\"\\f1a2\"}.fa-stumbleupon-circle:before{content:\"\\f1a3\"}.fa-stumbleupon:before{content:\"\\f1a4\"}.fa-delicious:before{content:\"\\f1a5\"}.fa-digg:before{content:\"\\f1a6\"}.fa-pied-piper:before{content:\"\\f1a7\"}.fa-pied-piper-alt:before{content:\"\\f1a8\"}.fa-drupal:before{content:\"\\f1a9\"}.fa-joomla:before{content:\"\\f1aa\"}.fa-language:before{content:\"\\f1ab\"}.fa-fax:before{content:\"\\f1ac\"}.fa-building:before{content:\"\\f1ad\"}.fa-child:before{content:\"\\f1ae\"}.fa-paw:before{content:\"\\f1b0\"}.fa-spoon:before{content:\"\\f1b1\"}.fa-cube:before{content:\"\\f1b2\"}.fa-cubes:before{content:\"\\f1b3\"}.fa-behance:before{content:\"\\f1b4\"}.fa-behance-square:before{content:\"\\f1b5\"}.fa-steam:before{content:\"\\f1b6\"}.fa-steam-square:before{content:\"\\f1b7\"}.fa-recycle:before{content:\"\\f1b8\"}.fa-automobile:before,.fa-car:before{content:\"\\f1b9\"}.fa-cab:before,.fa-taxi:before{content:\"\\f1ba\"}.fa-tree:before{content:\"\\f1bb\"}.fa-spotify:before{content:\"\\f1bc\"}.fa-deviantart:before{content:\"\\f1bd\"}.fa-soundcloud:before{content:\"\\f1be\"}.fa-database:before{content:\"\\f1c0\"}.fa-file-pdf-o:before{content:\"\\f1c1\"}.fa-file-word-o:before{content:\"\\f1c2\"}.fa-file-excel-o:before{content:\"\\f1c3\"}.fa-file-powerpoint-o:before{content:\"\\f1c4\"}.fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\"\\f1c5\"}.fa-file-zip-o:before,.fa-file-archive-o:before{content:\"\\f1c6\"}.fa-file-sound-o:before,.fa-file-audio-o:before{content:\"\\f1c7\"}.fa-file-movie-o:before,.fa-file-video-o:before{content:\"\\f1c8\"}.fa-file-code-o:before{content:\"\\f1c9\"}.fa-vine:before{content:\"\\f1ca\"}.fa-codepen:before{content:\"\\f1cb\"}.fa-jsfiddle:before{content:\"\\f1cc\"}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\"\\f1cd\"}.fa-circle-o-notch:before{content:\"\\f1ce\"}.fa-ra:before,.fa-rebel:before{content:\"\\f1d0\"}.fa-ge:before,.fa-empire:before{content:\"\\f1d1\"}.fa-git-square:before{content:\"\\f1d2\"}.fa-git:before{content:\"\\f1d3\"}.fa-hacker-news:before{content:\"\\f1d4\"}.fa-tencent-weibo:before{content:\"\\f1d5\"}.fa-qq:before{content:\"\\f1d6\"}.fa-wechat:before,.fa-weixin:before{content:\"\\f1d7\"}.fa-send:before,.fa-paper-plane:before{content:\"\\f1d8\"}.fa-send-o:before,.fa-paper-plane-o:before{content:\"\\f1d9\"}.fa-history:before{content:\"\\f1da\"}.fa-circle-thin:before{content:\"\\f1db\"}.fa-header:before{content:\"\\f1dc\"}.fa-paragraph:before{content:\"\\f1dd\"}.fa-sliders:before{content:\"\\f1de\"}.fa-share-alt:before{content:\"\\f1e0\"}.fa-share-alt-square:before{content:\"\\f1e1\"}.fa-bomb:before{content:\"\\f1e2\"}.fa-soccer-ball-o:before,.fa-futbol-o:before{content:\"\\f1e3\"}.fa-tty:before{content:\"\\f1e4\"}.fa-binoculars:before{content:\"\\f1e5\"}.fa-plug:before{content:\"\\f1e6\"}.fa-slideshare:before{content:\"\\f1e7\"}.fa-twitch:before{content:\"\\f1e8\"}.fa-yelp:before{content:\"\\f1e9\"}.fa-newspaper-o:before{content:\"\\f1ea\"}.fa-wifi:before{content:\"\\f1eb\"}.fa-calculator:before{content:\"\\f1ec\"}.fa-paypal:before{content:\"\\f1ed\"}.fa-google-wallet:before{content:\"\\f1ee\"}.fa-cc-visa:before{content:\"\\f1f0\"}.fa-cc-mastercard:before{content:\"\\f1f1\"}.fa-cc-discover:before{content:\"\\f1f2\"}.fa-cc-amex:before{content:\"\\f1f3\"}.fa-cc-paypal:before{content:\"\\f1f4\"}.fa-cc-stripe:before{content:\"\\f1f5\"}.fa-bell-slash:before{content:\"\\f1f6\"}.fa-bell-slash-o:before{content:\"\\f1f7\"}.fa-trash:before{content:\"\\f1f8\"}.fa-copyright:before{content:\"\\f1f9\"}.fa-at:before{content:\"\\f1fa\"}.fa-eyedropper:before{content:\"\\f1fb\"}.fa-paint-brush:before{content:\"\\f1fc\"}.fa-birthday-cake:before{content:\"\\f1fd\"}.fa-area-chart:before{content:\"\\f1fe\"}.fa-pie-chart:before{content:\"\\f200\"}.fa-line-chart:before{content:\"\\f201\"}.fa-lastfm:before{content:\"\\f202\"}.fa-lastfm-square:before{content:\"\\f203\"}.fa-toggle-off:before{content:\"\\f204\"}.fa-toggle-on:before{content:\"\\f205\"}.fa-bicycle:before{content:\"\\f206\"}.fa-bus:before{content:\"\\f207\"}.fa-ioxhost:before{content:\"\\f208\"}.fa-angellist:before{content:\"\\f209\"}.fa-cc:before{content:\"\\f20a\"}.fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\"\\f20b\"}.fa-meanpath:before{content:\"\\f20c\"}"}],"posts":[{"title":"Design Pattern","slug":"design-pattern","date":"2018-01-13T15:39:42.000Z","updated":"2018-01-17T04:10:08.611Z","comments":true,"path":"2018/01/13/design-pattern/","link":"","permalink":"http://yoursite.com/2018/01/13/design-pattern/","excerpt":"","text":"Strategy PatternDesign AspectAn algorithm Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. Problem Multiple classes will be modified if new behaviors are to be added. All duplicate code will be modified if the behavior is to be changed. Graph StepsStep 1.1234// Strategy.javapublic interface Strategy&#123; public int doOperation(int num1, int num2);&#125; Step 2.1234567891011121314151617181920212223// OperationAdd.javapublic class OperationAdd implements Strategy&#123; @Override public int doOperation(int num1, int num2)&#123; return num1 + num2; &#125;&#125;// OperationSubtract.javapublic class OperationSubtract implements Strategy&#123; @Override public int doOperation(int num1, int num2)&#123; return num1 - num2; &#125;&#125;// OperationMultiply.javapublic class OperationMultiply implements Strategy&#123; @Override public int doOperation(int num1, int num2)&#123; return num1 * num2; &#125;&#125; Step 3.123456789101112// Context.javapublic class Context&#123; private Strategy strategy; public Context(Strategy strategy)&#123; this.strategy = strategy; &#125; public int executeStrategy(int num1, int num2)&#123; return strategy.doOperation(num1, num2); &#125;&#125; Step 4.12345678910111213// StrategyPatternDemo.javapublic class StrategyPatternDemo&#123; public static void main(String[] args)&#123; Context context = new Context(new OperationAdd()); System.out.println(&quot;10 + 5 = &quot; + context.executeStrategy(10, 5)); context = new Context(new OperationSubtract()); System.out.println(&quot;10 - 5 = &quot; + context.executeStrategy(10, 5)); context = new Context(new OperationMultiply()); System.out.println(&quot;10 * 5 = &quot; + context.executeStrategy(10, 5)); &#125;&#125; Example Statement In a duck Game, There are four types of ducks in the game: MallardDuck, RedheadDuck, RubberDuck, and DecoyDuck. All types of the ducks have the same swim behavior but are with different displays. Some ducks can fly with wings, but some cannot fly. A duck can quack, squeak, or be silent. Observer PatternDesign AspectNumber of objects that depend on another object; how the dependent objects stay up to date Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically. Problem The code will be modified if a new display/presentation is going to be added. Graph StepsStep 1.123456789101112131415161718192021222324252627// Subject.javaimport java.util.ArrayList;import java.util.List;public class Subject &#123; private List&lt;Observer&gt; observers = new ArrayList&lt;Observer&gt;(); private int state; public int getState()&#123; return state; &#125; public void setState(int state)&#123; this.state = state; notifyAllObservers(); &#125; public void attach(Observer observer)&#123; observers.add(observer); &#125; public void notifyAllObservers()&#123; for (Observer observer : observers)&#123; observer.update(); &#125; &#125;&#125; Step 2.12345// Observer.javapublic abstract class Observer &#123; protected Subject subject; public abstract void update();&#125; Step 3.123456789101112// BinaryObserver.javapublic class BinaryObserver extends Observer &#123; public BinaryObserver(Subject subject)&#123; this.subject = subject; this.subject.attach(this); &#125; @Override public void update() &#123; System.out.println(&quot;Binary String: &quot; + Integer.toBinaryString(subject.getState())); &#125; &#125; 123456789101112// OctalObserver.javapublic class OctalObserver extends Observer &#123; public OctalObserver(Subject subject)&#123; this.subject = subject; this.subject.attach(this); &#125; @Override public void update() &#123; System.out.println(&quot;Octal String: &quot; + Integer.toOctalString(subject.getState())); &#125; &#125; 123456789101112// HexaObserver.javapublic class HexaObserver extends Observer &#123; public HexaObserver(Subject subject)&#123; this.subject = subject; this.subject.attach(this); &#125; @Override public void update() &#123; System.out.println(&quot;Hex String: &quot; + Integer.toHexString(subject.getState())); &#125; &#125; Step 4.123456789101112131415// ObserverPatternDemo.javapublic class ObserverPatternDemo&#123; public static void main(String[] args)&#123; Subject subject = new Subject(); new HexaObserver(subject); new OctalObserver(subject); new BinaryObserver(subject); System.out.println(&quot;First state change: 15&quot;); subject.setState(15); System.out.println(&quot;Second state change: 10&quot;); subject.setState(10); &#125;&#125; Example Statement In a spreadsheet application, A spreadsheet object, bar chart object, and pie chart object can depict information in the same application data object by using different presentations. When the user changes the information in the spreadsheet, the bar chart reflects the changes immediately, and vice versa. Both a spreadsheet object and bar chart object can depict information in the same application data object by using different presentations. Decorator PatternDesign AspectResponsibilities of an object without subclassing Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. Problem A class will be modified if you want to attach additional responsibilities(decorators) to an object dynamically. One way to add responsibilities is with inheritance. A client is difficult to control how and when to decorate the component with a object. Graph StepsStep 1.1234// Shape.javapublic interface Shape&#123; void draw();&#125; Step 2.123456789101112131415// Rectangle.javapublic class Rectangle implement Shape &#123; @Override public void draw()&#123; System.out.println(&quot;Shape: Rectangle&quot;); &#125;&#125;// Circle.javapublic class Circle implement Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Shape: Circle&quot;); &#125;&#125; Step 3.123456789101112// ShapeDecorator.javapublic abstract class ShapeDecorator implements Shape&#123; protected Shape decoratedShape; public ShapeDecorator(Shape decoratedShape)&#123; this decoratedShape = decoratedShape; &#125; public void draw()&#123; decoratedShape.draw(); &#125;&#125; Step 4.12345678910111213141516// RedShapeDecorator.javapublic class RedShapeDecorator extends ShapeDecorator&#123; public RedShapeDecorator(Shape decoratedShape)&#123; super(decoratedShape); &#125; @Override public void draw()&#123; decoratedShape.draw(); setRedBorder(decoratedShape); &#125; private void setRedBorder(Shape decoratedShape)&#123; System.out.println(&quot;Border Color: Red&quot;); &#125;&#125; Step 5.123456789101112// DecoratorPatternDemo.javapublic class DecoratorPatternDemo&#123; public static void main(String[] args)&#123; Shape circle = new Circle(); Shape redCircle = new RedShapeDecorator(new Circle()); Shape redRectangle = new RedShapeDecorator(new Rectangle()); System.out.println(&quot;\\nCircle of red border&quot;); redCircle.draw(); System.out.println(&quot;\\nRectangle of red border&quot;); redRectangle.draw(); &#125;&#125; Example Statement In FileViewer, We have a TextView object that displays text in a window. TextView has no scroll bars by default, because we might not always need them. We can also add a thick black border around the TextView. It is highly likely that we will support various file formats for display in the future. Starbuzz Coffee, Starbuzz Coffee shops are scrambling to update their ordering systems to match their beverage offerings (e.g. HouseBlend, DarkRoast, Decaf and Espresso) to summate how they cost. In addition to your coffee, you can also ask for several condiments like steamed milk, soy, and mocha, and have these, so they really need to get them built into their order system Factory Method PatternDesign AspectSubclass of object that is instantiated Define an interface for creating an object, but let subclasses decide which class to instantiate. Facotry Method lets a class defer instantiation to subclasses. Problem As the objects being created changes over time, we need to modify the code of the creator object for the creations over and over again. Graph StepsStep 1.1234// Shape.javapublic interface Shape&#123; void draw();&#125; Step 2.1234567891011121314151617181920212223// Rectangle.javapublic class Rectangle implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Inside Rectangle::draw() method.&quot;); &#125;&#125;// Circle.javapublic class Circle implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Inside Circle::draw() method.&quot;); &#125;&#125;// Square.javapublic class Square implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Inside Square::draw() method.&quot;); &#125;&#125; Step 3.12345678910111213141516171819202122232425// ShapeFactory.javapublic abstract class ShapeFactory&#123; public abstract Shape getShape();&#125;// CircleFactory.javapublic class CircleFactory extends ShapeFactory&#123; public Shape getShape()&#123; return new Circle(); &#125;&#125;// RectangleFactory.javapublic class RectangleFactory extends ShapeFactory&#123; public Shape getShape()&#123; return new Rectangle(); &#125;&#125;// SquareFactory.javapublic class SquareFactory extends ShapeFactory&#123; public Shape getShape()&#123; return new Square(); &#125;&#125; Step 4.12345678910111213141516// FactoryPatternDemo.javapublic class FactoryPatternDemo &#123; public static void main(String[] args)&#123; ShapeFactory circleFactory = new CircleFactory(); ShapeFactory rectangleFactory = new RectangleFactory(); ShapeFactory squareFactory = new SquareFactory(); Shape circle = circleFactory.getShape(); Shape rectangle = rectangleFactory.getShape(); Shape square = squareFactory.getShape(); circle.draw(); rectangle.draw(); square.draw(); &#125;&#125; Example Statement Powerful Document Viewer, A powerful application can present multiple documents at the same time. These documents include DrawingDocument, TextDocument, and so on. The application is responsible for managing documents and will create them as required. Pizza Store, The store makes more than one type of pizza: Cheese Pizza, Greek Pizza, and Pepperoni Pizza Each pizza has different way to prepare, and has the same way to bake, to cut, and to box. To make this store more competitive, you may add a new flavor of pizza or remove unpopular ones. Abstract Factory PatternDesign AspectFamilies of product objects Provide an interface for creating families of related or dependent objects without specifying their concrete classes. Problem As the families of related or dependent objects are added, we need to write new object classes for the new families. Graph StepsStep 1.1234567891011121314// Window.javapublic interface Window&#123; void build();&#125;// Scrollbar.javapublic interface Scrollbar&#123; void build();&#125;// Button.javapublic interface Button&#123; void build();&#125; Step 2.12345678910111213141516171819202122232425262728293031323334353637383940414243444546// MotifWindow.javapublic class MotifWindow implements Window&#123; @Override public void build()&#123; System.out.println(&quot;Inside MotifWindow::build() method.&quot;) &#125;&#125;// PMWindow.javapublic class PMWindow implements Window&#123; @Override public void build()&#123; System.out.println(&quot;Inside PMWindow::build() method.&quot;) &#125;&#125;// MotifScrollbar.javapublic class MotifScrollbar implements Scrollbar&#123; @Override public void build()&#123; System.out.println(&quot;Inside MotifScrollbar::build() method.&quot;) &#125;&#125;// PMScrollbar.javapublic class PMScrollbar implements Scrollbar&#123; @Override public void build()&#123; System.out.println(&quot;Inside PMScrollbar::buildl() method.&quot;) &#125;&#125;// MotifButton.javapublic class MotifButton implements Button&#123; @Override public void build()&#123; System.out.println(&quot;Inside MotifButton::build() method.&quot;) &#125;&#125;// PMButton.javapublic class PMButton implements Button&#123; @Override public void build()&#123; System.out.println(&quot;Inside PMButton::build() method.&quot;) &#125;&#125; Step 3.123456// WidgetFactory.javapublic interface WidgetFactory&#123; public Window createWindow(); public Scrollbar createScrollbar(); public Button createButton();&#125; Step 4.123456789101112131415161718192021222324// MotifWidgetFactory.javapublic class MotifWidgetFactory implements WidgetFactory&#123; public Window createWindow()&#123; return new MotifWindow(); &#125; public Scrollbar createScrollbar()&#123; return new MotifScrollbar(); &#125; public Button createButton()&#123; return new MotifButton(); &#125;&#125;// PMWidgetFactory.javapublic class PMWidgetFactory implements WidgetFactory&#123; public Window createWindow()&#123; return new PMWindow(); &#125; public Scrollbar createScrollbar()&#123; return new PMScrollbar(); &#125; public Button createButton()&#123; return new PMButton(); &#125;&#125; Step 5.12345678910111213// GUIApplication.javapublic class GUIApplication&#123; public static void main(String[] args)&#123; WidgetFactory motifWidgetFactory = new MotifWidgetFactory(); WidgetFactory pmWidgetFactory = new PMWidgetFactory(); motifWidgetFactory.createWindow().build(); motifWidgetFactory.createScrollbar().build(); motifWidgetFactory.createButton().build(); pmWidgetFactory.createWindow().build(); pmWidgetFactory.createScrollbar().build(); pmWidgetFactory.createButton().build(); &#125;&#125; Example Statement A GUI Application with Multiple Styles A GUI Application consists of some kinds of widgets like window, scroll bar, and button. Each widget in the GUI application has two or more implementations according to different lookand-feel standards, such as Motif and Presentation Manager. The GUI application can switch its look-and-feel style from one to another. Pizza Store In a pizza store system, two flavors of pizza are offered: Cheese Pizza and Pepperoni Pizza. Each flavor of pizza can be categorized into two styles: New York Style and Chicago Style. Different pizza style needs different dough and sauce: NY Style: Thin Crust Dough, Marinara Sauce Chicago Style: Thick Crust Dough, Plum Tomato Sauce Iterator PatternDesign AspectHow an aggregate’s elements are accessed, traversed Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation. Problem The method of accessing the elements of two aggregate objects with different representations will be modified if a new aggregate object with different representation is added. Graph StepsStep 1.12345678910// Iterator.javapublic interface Iterator&#123; public boolean hasNext(); public Object next();&#125;// Container.javapublic interface Container&#123; public Iterator getIterator();&#125; Step 2.1234567891011121314151617181920212223242526272829// NameRepository.javapublic class NameRepository implements Container&#123; public String name[] = &#123;&quot;Robert&quot;, &quot;John&quot;, &quot;Julie&quot;, &quot;Lora&quot;&#125;; @Override public Iterator getIterator()&#123; return new NameIterator(); &#125; private class NameIterator implements Iterator&#123; int index; @Override public boolean hasNext()&#123; if (index &lt; names.length)&#123; return true; &#125; return false; &#125; @Override public Object next()&#123; if (this.hasNext())&#123; return names[index++]; &#125; return null; &#125; &#125;&#125; Step 3.12345678910// IteratorPatternDemo.javapublic class IteratorPatternDemo&#123; public static void main(String[] args)&#123; NameRepository nameRepository = new NameRepository(); for (Iterator iter = nameRepository.getIterator(); iter.hasNext();)&#123; String name = (String)iter.next(); System.out.println(&quot;Name : &quot; + name); &#125; &#125;&#125; Example Statement Print Out Items in Different Data Structures, A List data structure is implemented with a String array which can contain a series of String objects. We can access List by calling the get() method with an index, and know how many Strings inside the List with a public attribute: length. Furthermore, another data structure called SkipList which consists of a series of SkipNodes. Each SkipNode can be accessed by invoking the getNode() method in SkipList with an index. And we have the idea about the size of SkipList with its size() method. Now we have to traverse both List and SkipList to print out those object items in the two different data structures for some purpose. Merge Tow Menus A waitress of Pancake House keeps a breakfast menu which uses an ArrayList to hold its menu items. And a waitress of Diner keeps a lunch menu which uses an Array to hold its menu items. Now, these two restaurants are merged and tend to provide service in one place, so a waitress should keep both menus on hand. How to the waitress print two different menu representations at a time? Composite PatternDesign AspectStructure and composition of an object Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. Problem The user can group components to form larger components, which in turn can be grouped to form still larger components. Graph StepsStep 1.123456789101112131415161718192021222324252627282930313233// Employee.javaimport java.util.ArrayList;import java.util.List;public class Employee&#123; private String name; private String dept; private int salary; private List&lt;Employee&gt; subordinates; public Employee(String name, String dept, int sal)&#123; this.name = name; this.dept = dept; this.salary = sal; subordinates = new ArrayList&lt;Employee&gt;(); &#125; public void add(Employee e)&#123; subordinates.add(e); &#125; public void remove(Employee e)&#123; subordinates.remove(e); &#125; public List&lt;Employee&gt; getSubordinates()&#123; return subordinates; &#125; public String toString()&#123; return (&quot;Employee : [Name : &quot; + name + &quot;, dept : &quot; + dept + &quot;, salary : &quot; + salary + &quot; ]&quot;); &#125;&#125; Step 2.123456789101112131415161718192021222324252627// CompositePatternDemo.javapublic class CompositePatternDemo&#123; public static void main(String[] args)&#123; Employee CEO = new Employee(&quot;John&quot;, &quot;CEO&quot;, 30000); Employee headSales = new Employee(&quot;Robert&quot;, &quot;Head Sales&quot;, 20000); Employee headMarketing = new Employee(&quot;Micheal&quot;, &quot;Head Marketing&quot;, 20000); Employee clerk1 = new Employee(&quot;Laura&quot;, &quot;Marketing&quot;, 10000); Employee clerk2 = new Employee(&quot;Bob&quot;, &quot;Marketing&quot;, 10000); Employee salesExcutive1 = new Employee(&quot;Richard&quot;, &quot;Sales&quot;, 10000); Employee salesExcutive2 = new Employee(&quot;Rob&quot;, &quot;Sales&quot;, 10000); CEO.add(headSales); CEO.add(headMarketing); headSales.add(salesExcutive1); headSales.add(salesExcutive2); headMarketing.add(clerk1); headMarketing.add(clerk2); System.out.println(CEO); for (Employee headEmployee : CEO.getSubordinates())&#123; System.out.println(headEmployee); for (Employee employee : headEmployee.getSubordinates())&#123; System.out.println(employee); &#125; &#125; &#125;&#125; Example Statement In schematic capture application, There are some basic components can be drawn such as Text, Line, and Rectangle. The user can group basic components to form larger components, which in turn can be grouped to form still larger components. Merge two menus extends, A dessert submenu is going to be added to the Diner menu. Facade PatternDesign AspectInterface to a subsystem Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Problem A common design goal is to minimize the communication and dependencies between subsystems. Graph StepsStep 1.1234// Shape.javapublic interface Shape&#123; void draw();&#125; Step 2.123456789101112131415161718192021// Rectangle.javapulic class Rectangle implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Rectangle::draw()&quot;); &#125;&#125;// Circle.javapulic class Circle implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Circle::draw()&quot;); &#125;&#125;// Square.javapulic class Square implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;Square::draw()&quot;); &#125;&#125; Step 3.12345678910111213141516171819202122// ShapeMaker.javapublic class ShapeMaker&#123; private Shape circle; private Shape rectangle; private Shape square; public ShapeMaker()&#123; circle = new Circle(); rectangle = new Rectangle(); square = new Square(); &#125; public void drawCircle()&#123; circle.draw(); &#125; public void drawRectangle()&#123; rectangle.draw(); &#125; public void drawSquare()&#123; square.draw(); &#125;&#125; Step 4.123456789// FacadePatternDemo.javapublic class FacadePatternDemo&#123; public static void main(String[] args)&#123; ShapeMaker shapeMaker = new ShapeMaker(); shapeMaker.drawCircle(); shapeMaker.drawRectangle(); shapeMakder.drawSquare(); &#125;&#125; Example Statement A Programming Environment A compiler subsystem contains classes such as Scanner, Parser, ProgramNode, and BytecodeStream. The client classes need to use Scanner, Parser, ProgramNode, and BytecodeStream to compile some code. Home Sweet Home Theater A Home Theater consists of an amplifier, a DVD player, a projector, a screen, a popcorn popper, and theater lights. A user can watch a movie through the following process: Turn on the popcorn popper Start the popper popping Dim the lights Put the screen down Turn the projector on Turn the sound amplifier on Turn the DVD player on Start the DVD player playing Template Method PatternDesign AspectSteps of an algorithm Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Templete Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure. Problem Two classes with code duplications would be modified at the same time if the duplicate code is being changed. Graph StepsStep 1.123456789101112// Game.javapublic abstract class Game&#123; abstract void initialize(); abstract void statePlay(); abstract void endPlay(); public final void play()&#123; initialize(); startPlay(); endPlay(); &#125;&#125; Step 2.12345678910111213141516171819202122232425262728293031// Cricket.javapublic class Cricket extends Game&#123; @Override void endPlay()&#123; System.out.println(&quot;Cricket Game Finished!&quot;); &#125; @Override void initialize()&#123; System.out.println(&quot;Cricket Game Inisialized!&quot;); &#125; @Override void startPlay()&#123; System.out.println(&quot;Cricket Game Start!&quot;); &#125;&#125;// Football.javapublic class Football extends Game&#123; @Override void endPlay()&#123; System.out.println(&quot;Football Game Finished!&quot;); &#125; @Override void initialize()&#123; System.out.println(&quot;Football Game Inisialized!&quot;); &#125; @Override void startPlay()&#123; System.out.println(&quot;Football Game Start!&quot;); &#125;&#125; Step 3.12345678910// TemplatePatternDemo.javapublic class TemplatePatternDemo&#123; public static void main(String[] args)&#123; Game game = new Cricket(); game.play(); System.out.println(); game = new Football(); game.play(); &#125;&#125; Example Statement Opening Documents in Applications In order to open a text document, a text application will: Check if the text document can be opened Create a text document object and hold a reference of the text document object. Add the text document object to the Application. Read text document. Opening Documents in Applications There is another new requirement. Opening a spreadsheet document with a spreadsheet application carries the same steps in the algorithm(process) as the text document. Check if the spreadsheet document can be opened. Create a spreadsheet document object and hold a reference of the spreadsheet document object. Add the spreadsheet document object to the Application. Read spreadsheet document. Prepare Caffeine Beverages Please follow these recipes precisely when preparing Starbuzz beverages Starbuzz Coffee Recipe Boil some water Brew coffee in boiling water Pour Coffee in cup Add sugar and milk Starbuzz Tea Recipe Boil some water Steep tea in boiling water Pour tea in cup Add lemon Command PatternDesign AspectWhen and how a request is fulfilled Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations. Problem The invoker object is subject to be modified once the set of the actions on a receiver is changed. Graph StepsStep 1.1234// Order.javapublic interface Order&#123; void execute();&#125; Step 2.12345678910111213// Stock.javapublic class Stock&#123; private String name = &quot;ABC&quot;; private int quantity = 10; public void buy()&#123; System.out.println(&quot;Stock [ Name: &quot; + name + &quot;, Quantity: &quot; + quantity + &quot; ] bought&quot;); &#125; public void sell()&#123; System.out.println(&quot;Stock [ Name: &quot; + name + &quot;Quantity: &quot; + quantity + &quot; ] sold&quot;); &#125;&#125; Step 3.123456789101112131415161718192021// BuyStock.javapublic class BuyStockOrder implements Order&#123; private Stock abcStock; public BuyStockOrder(Stock abcStock)&#123; this.abcStock = abcStock; &#125; public void execute()&#123; abcstock.buy(); &#125;&#125;// SellStock.javapublic class SellStockOrder implements Order&#123; private Stock abcStock; public SellStockOrder(Stock abcStock)&#123; this.abcStock = abcStock; &#125; public void execute()&#123; abcStock.sell(); &#125;&#125; Step 4.1234567891011121314151617// Broker.javaimport java.util.ArrayList;import java.util.List;public class Broker&#123; private List&lt;Order&gt; orderList = new ArrayList&lt;Order&gt;(); public void takeOrder(Order order)&#123; orderList.add(order); &#125; public void placeOrders()&#123; for (Order order : orderList)&#123; order.execute(); &#125; orderList.clear(); &#125;&#125; Step 5.123456789101112131415// CommandPatternDemo.javapublic class CommandPatternDemo&#123; public static void main(String[] args)&#123; Stock abcStock = new Stock(); BuyStockOrder buyStockOrder = new BuyStockOrder(abcStock); SellStockOrder sellStockOrder = new SellStockOrder(abcStock); Broker broker = new Broker(); broker.takeOrder(buyStockOrder); broker.takeOrder(sellStockOrder); broker.placeOrder(); &#125;&#125; Example Statement Remote Control, The remote control can control a stereo remotely. While a stereo is switched on by the remote control, the CD and volume will be set at the same time. Cut, Copy, Paste on a Document, An editor application carries a document. A menu in the editor application contains some menu items which performs three specific operations such as cut, copy, and paste on a document. Adapter PatternDesign AspectInterface to an object Convert the interface of a class inter another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces. Problem The request method of the requester object should be modified once it changes its receiver class with a new interface. Graph StepsStep 1.12345678910// MediaPlayer.javapublic interface MediaPlayer&#123; public void play(String audioType, String fileName);&#125;// AdvancedMediaPlayer.javapublic interface AdvancedMediaPlayer&#123; public void playVlc(String fileName); public void playMp4(String fileName);&#125; Step 2.123456789101112131415161718192021// VlcPlayer.javapublic class VlcPlayer implements AdvancedMediaPlayer&#123; @Override public void playVlc(String fileName)&#123; System.out.println(&quot;Playing vlc file. Name: &quot; + fileName); &#125; @Override public void playMp4(String fileName)&#123;&#125;&#125;// Mp4Player.javapublic class Mp4Player implements AdvancedMediaPlayer&#123; @Override public void playVlc(String fileName)&#123;&#125; @Override public void playMp4(String fileName)&#123; System.out.println(&quot;Playing mp4 file. Name: &quot; + fileName); &#125;&#125; Step 3.1234567891011121314151617181920212223// MediaAdapter.javapublic class MediaAdapter implements MediaPlayer&#123; AdvancedMediaPlayer advancedMusicPlayer; public MediaAdapter(String audioType)&#123; if (audioType.equalsIgnoreCase(&quot;vlc&quot;))&#123; advancedMusicPlayer = new VlcPlayer(); &#125; else if (audioType.equalsIgnoreCase(&quot;mp4&quot;))&#123; advancedMusicPlayer = new Mp4Player(); &#125; &#125; @Override public void play(String audioType, String fileName)&#123; if (audioType.equalsIgnoreCase(&quot;vlc&quot;))&#123; advancedMusicPlayer.playVlc(fileName); &#125; else if (audioType.equalsIgnoreCase(&quot;mp4&quot;))&#123; advancedMusicPlayer.playMp4(fileName); &#125; &#125;&#125; Step 4.123456789101112131415161718// AudioPlayer.javapublic class AudioPlayer implements MediaPlayer&#123; MediaAdapter mediaAdapter; @Override public void play(String audioType, String fileName)&#123; if(audioType.equalsIgnoreCase(&quot;mp3&quot;))&#123; System.out.println(&quot;Playing mp3 file. Name: &quot; + fileName); &#125; else if(audioType.equalsIgnoreCase(&quot;vlc&quot;) || audioType.equalsIgnoreCase(&quot;mp4&quot;))&#123; mediaAdapter = new MediaAdapter(audioType); mediaAdapter.play(audioType, fileName); &#125; else&#123; System.out.println(&quot;Invalid media. &quot; + audioType + &quot; format not supported&quot;); &#125; &#125;&#125; Step 5.1234567891011// AdapterPatternDemo.javapublic class AdapterPatternDemo&#123; public static void main(String[] args)&#123; AudioPlayer audioPlayer = new AudioPlayer(); audioPlayer.play(&quot;mp3&quot;, &quot;beyond the horizon.mp3&quot;); audioPlayer.play(&quot;mp4&quot;, &quot;alone.mp4&quot;); audioPlayer.play(&quot;vlc&quot;, &quot;far far away.vlc&quot;); audioPlayer.play(&quot;avi&quot;, &quot;mind me.avi&quot;); &#125;&#125; Example Statement New Vendor in Existing Software, You’ve got an existing client class that use a vendor class library. After a while you found another vendor class library is better, but the new vendor designed their interfaces differently. A Text Shape, A drawing editor Want to add a TextShape that using display method to display text and using boundingBox method to get bounding. A drawing editor Meanwhile, an external library already provide a TextView class using display method to display text and using getExtent method to get bounding. We’d like to reuse TextView to display text of shape. Builder PatternDesign Aspecthow a composite object gets created Separate the construction of a complex object from its representation so that the same construction process can create different representations. Problem Construct complex objects step-by-step, and return the product as a final step. Graph StepsStep 1.1234567891011// Item.javapublic interface Item&#123; public String name(); public Packing packing(); public float price();&#125;// Packing.javapublic interface Packing&#123; public String pack();&#125; Step 2.1234567891011121314// Wrapper.javapublic class Wrapper implements Packing&#123; @Override public String pack()&#123; return &quot;Wrapper&quot;; &#125;&#125;// Bottle.javapublic class Bottle implements Packing&#123; @Override public String pack()&#123; return &quot;Bottle&quot;; &#125;&#125; Step 3.123456789101112131415161718192021// Burger.javapublic abstract class Burger implements Item&#123; @Override public Packing packing()&#123; return new Wrapper(); &#125; @Override public abstract float price();&#125;// ColdDrink.javapublic abstract class ColdDrink implements Item&#123; @Override public Packing packing()&#123; return new Bottle(); &#125; @Override public abstract float price();&#125; Step 4.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// VegBurger.javapublic class VegBurger extends Burger&#123; @Override public float price()&#123; return 25.0f; &#125; @Override public String name()&#123; return &quot;Veg Burger&quot;; &#125;&#125;// ChickenBurger.javapublic class ChickenBurger extends Burger&#123; @Override public float price()&#123; return 50.5f; &#125; @Override public String name()&#123; return &quot;Chicken Burger&quot;; &#125;&#125;// Coke.javapublic class Coke extends ColdDrink&#123; @Override public float price()&#123; return 30.0f; &#125; @Override public String name()&#123; return &quot;Coke&quot;; &#125;&#125;// Pepsi.javapublic class Pepsi extends ColdDrink&#123; @Override public float price()&#123; return 35.0f; &#125; @Override public String name()&#123; return &quot;Pepsi&quot;; &#125;&#125; Step 5.12345678910111213141516171819202122232425262728// Meal.javaimport java.util.ArrayList;import java.util.List;public class Meal&#123; private List&lt;Item&gt; items = new ArrayList&lt;Item&gt;(); public void addItem(Item item)&#123; items.add(item); &#125; public float getCost()&#123; flaot cost = 0.0f; for (Item item : items)&#123; cost += item.price(); &#125; return cost; &#125; public void showItems()&#123; for (Item item : items)&#123; System.out.println(&quot;Item : &quot; + item.name()); System.out.println(&quot;, Packing : &quot; + item.packing().pack()); System.out.println(&quot;, Price : &quot; + item.price()); &#125; &#125;&#125; Step 6.12345678910111213141516// MealBuilder.javapublic class MealBuilder&#123; public Meal prepareVegMeal&#123; Meal meal = new Meal(); meal.addItem(new VegBurger()); meal.addItem(new Coke()); return meal; &#125; public Meal prepareNonVegMeal()&#123; Meal meal = new Meal(); meal.addItem(new ChickenBurger()); meal.addItem(new Pepsi()); return meal; &#125;&#125; Step 7.12345678910111213141516// BuilderPatternDemo.javapublic class BuilderPatternDemo&#123; public static void main(String[] args)&#123; MealBuilder mealBuilder = new MealBuilder(); Meal vegMeal = mealBuilder.prepareVegMeal(); System.out.println(&quot;Veg Meal&quot;); vegMeal.showItems(); System.out.println(&quot;Total Cost: &quot; + vegMeal.getCost()); Meal nonVegMeal = mealBuilder.prepareNonVegMeal(); System.out.println(&quot;\\nNon-Veg Meal&quot;); nonVegMeal.showItems(); System.out.println(&quot;Total Cost: &quot; + nonVegMeal.getCost()); &#125;&#125; Example Statement A RTF(Rich Text Fromat) Converter, A reader for the RTF (Rich Text Format) document exchange format should be able to convert RTF to many text formats. The reader converts RTF documents into TeX text or into a text widget by recognizing different RTF tokens(Character, Font Change and Paragraph). A Vacation Planner, Patternsland wants to build a vacation planner. A vacation planner can choose a hotel and various types of admission tickets, make restaurant reservations, even book special events and day. The difference types vacation (normal, backpacking) will have difference options. State PatternDesign Aspectstates of an object Allow an object to alter its behavior when its internal state changes. The object will appear to change its class. Problem An object’s behavior depends on its state, and it must change its behavior at run-time depending on that state. Graph StepsStep 1.1234// State.javapublic interface State&#123; public void doAction(Context context);&#125; Step 2.1234567891011121314151617181920212223// StartState.javapublic class StartState implements State&#123; public void doAction(Context context)&#123; System.out.println(&quot;Player is in start state&quot;); context.setState(this); &#125; public String toString()&#123; return &quot;Start State&quot;; &#125;&#125;// StopState.javapublic class StopState implements State&#123; public void doAction(Context context)&#123; System.out.println(&quot;Player is in stop state&quot;); context.setState(this); &#125; public String toString()&#123; return &quot;Stop State&quot;; &#125;&#125; Step 3.123456789101112131415// Context.javapublic class Context&#123; private State state; public Context()&#123; state = null; &#125; public void setState(State state)&#123; this.state = state; &#125; public State getState()&#123; return state; &#125;&#125; Step 4.12345678910111213// StatePatternDemo.javapublic class StatePatternDemo&#123; public static void main(String[] args)&#123; Context context = new Context(); StartState startState = new StartState(); startState.doAction(context); System.out.println(context.getState().toString()); StopState stopState = new StopState(); stopState.doAction(context); System.out.println(context.getState().toString()); &#125;&#125; Example Statement A TCP Connection, A class TCPConnection that represents a network connection. When a TCPConnection object receives an Open request from other objects, it responds differently depending on its current state. A TCPConnection object can be in one of several different states: Established, Listening, and Closed. A Gumball Machine A GumballMachine has four actions: Insert Quarter, Eject Quarter, Turn Crank, and Dispense. There are four states in the GumballMachine: No Quarter, Has Quarter, Out of Gumballs and Gumball Sold. As the following state diagram. Visitor PatternDesign AspectOperations that can be applied to objectswithout changing their classes Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates. Problem The problem is that distributing all these operations across the various classes in an object structure leads to a system that’s hard to understand, maintain, and change. Moreover, adding a new operation usually requires recompiling all of these classes. Graph StepsStep 1.1234// ComputerPart.javapublic interface ComputerPart&#123; public void accept(ComputerPartVisitor computerPartVisitor);&#125; Step 2.12345678910111213141516171819202122232425262728293031323334353637383940// Keyboard.javapublic class Keyboard implements ComputerPart&#123; @Override public void accept(ComputerPartVisitor computerPartVisitor)&#123; computerPartVisitor.visit(this); &#125;&#125;// Monitor.javapublic class Monitor implements ComputerPart&#123; @Override public void accept(ComputerPartVisitor computerPartVisitor)&#123; computerPartVisitor.visit(this); &#125;&#125;// Mouse.javapublic class Mouse implements ComputerPart&#123; @Override public void accept(ComputerPartVisitor computerPartVisitor)&#123; computerPartVisitor.visit(this); &#125;&#125;// Computer.javapublic class Computer implements ComputerPart&#123; ComputerPart[] parts; public Computer()&#123; parts = new ComputerPart[] &#123;new Mouse(), new Keyboard(), new Monitor()&#125;; &#125; @Override public void accept(ComputerPartVisitor computerPartVisitor)&#123; for (int i = 0; i &lt; parts.length; i++)&#123; parts[i].accept(computerPartVisitor); &#125; computerPartVisitor.visit(this); &#125;&#125; Step 3.1234567// ComputerPartVisitor.javapublic interface ComputerPartVisitor&#123; public void visit(Computer computer); public void visit(Mouse mouse); public void visit(Keyboard keyboard); public void visit(Monitor monitor);&#125; Step 4.12345678910111213141516171819202122// ComputerPartDisplayVisitor.javapublic class ComputerPartDisplayVisitor implements ComputerPartVisitor&#123; @Override public void visit(Computer computer) &#123; System.out.println(&quot;Displaying Computer.&quot;); &#125; @Override public void visit(Mouse mouse) &#123; System.out.println(&quot;Displaying Mouse.&quot;); &#125; @Override public void visit(Keyboard keyboard) &#123; System.out.println(&quot;Displaying Keyboard.&quot;); &#125; @Override public void visit(Monitor monitor) &#123; System.out.println(&quot;Displaying Monitor.&quot;); &#125;&#125; Step 5.1234567// VisitorPatternDemo.javapublic class VisitorPatternDemo&#123; public static void main(String[] args)&#123; ComputerPart computer = new Computer(); computer.accept(new ComputerPartDisplayVisitor()); &#125;&#125; Example Statement Compiler and AST, There are several nodes in an abstract syntax tree (AST), such as VariableRefNode and AssignmentNode, which represent respective parts in source code and keep the code information. Each node currently provides three interfaces for the compiler to use in order to check its type, generate code and print out the content. Nutrition Retrieval from A Restaurant Menu, The menu components of the Diner restaurant which comprises menu items and diner menus can be printed by a waitress. Each diner menu consists of several menu items. The Diner restaurant would like to provide calories, protein and carbs information for each menu item. Equipment Power Consumption, There are three types of equipment in the inventory, such as chassis, buses, and floppies. Among all the equipment, Chassis is composited of others. Chassis provides an interface for the creation of an iterator, which iterates all the equipment in one chassis with next and hasNext operations. Each equipment provides its power consumption and cost in addition. Chassis provides a sum of power consumption or cost for all its components. Singleton PatternDesign Aspectthe sole instance of a class Ensure a class only has one instance, and provide a global point of access to it Problem It’s important for some classes to have exactly one instance and ensure that the instance is easily accessible. A global variable makes an object accessible, but it doesn’t keep you from instantiating multiple objects. Graph StepsStep 1.1234567891011121314// SingleObject.javapublic class SingleObject&#123; private static SingleObject instance = new SingleObject(); private SingleObject()&#123;&#125; public static SingleObject getInstance()&#123; return instance; &#125; public void showMessage()&#123; System.out.println(&quot;Hello World!&quot;); &#125;&#125; Step 2.1234567// SingletonPatternDemo.javapublic class SingletonPatternDemo&#123; public static void main(String[] args)&#123; SingleObject object = SingleObject.getInstance(); object.showMessage(); &#125;&#125; Example Statement Chocolate Boiler, A chocolate boiler is used to boil chocolate. Before boiling chocolate with the boiler, you have to make sure that the boiler is now empty and then fill chocolate in. Besides, you can’t boil chocolate again while the chocolate has already been boiled. After boiling, it is time to drain out the boiled chocolate and make the boiler empty again. In order to prevent some unexpected situation, it is not allowed to have multiple instances of the chocolate boiler in the system. FlyWeight PatternDesign AspectStorage costs of objects Use sharing to support large numbers of finegrained objects efficiently. Problem Some applications could benefit from using objects throughout their design, but a naive implementation would be prohibitively expensive. Graph StepsStep 1.1234// Shape.javapublic interface Shape&#123; void draw();&#125; Step 2.12345678910111213141516171819202122232425262728// Circle.javapublic class Circle implements Shape&#123; private String color; private int x; private int y; private int radius; public Circle(String color)&#123; this.color = color; &#125; public void setX(int x)&#123; this.x = x; &#125; public void setY(int y)&#123; this.y = y; &#125; public void setRadius(int radius)&#123; this.radius = radius; &#125; @Override public void draw()&#123; System.out.println(&quot;Circle: draw() [ Color: &quot; + color + &quot;, x: &quot; + x + &quot;, y: &quot; + y + &quot;, radius: &quot; + radius + &quot;]&quot;); &#125;&#125; Step 3.123456789101112131415// ShapeFactory.javaimport java.util.HashMap;public class ShapeFactory&#123; private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap(); public static Shape getCircle(String color)&#123; Circle circle = (Circle)circleMap.get(color); if (circle == null)&#123; circle = new Circle(color); circleMap.put(color, circle); System.out.println(&quot;Creating circle of color: &quot; + color); &#125; return circle; &#125;&#125; Step 4.1234567891011121314151617181920212223// FlyWeightPatternDemo.javapublic class FlyWeightPatternDemo&#123; public static final String colors[] = &#123;&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;White&quot;, &quot;Black&quot;&#125;; public static void main(Sting[] args)&#123; for (int i = 0; i &lt; 20; i++)&#123; Circle circle = (Circle)ShapeFactory.getCircle(getRandomColor()); circle.setX(getRandomX()); circle.setY(getRandomY()); circle.setRadius(100); circle.draw(); &#125; &#125; private static String getRandomColor()&#123; return colors[(int)(Math.random()*colors.length)]; &#125; private static int getRandomX() &#123; return (int)(Math.random()*100 ); &#125; private static int getRandomY() &#123; return (int)(Math.random()*100); &#125;&#125; Example Statement Document Editor, A document editor uses objects to represent embedded elements like rows, columns and characters. The characters have X-Y locations, and they can draw themselves dynamically.","categories":[],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"http://yoursite.com/tags/Design-Pattern/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Sorting Algorithms","slug":"sorted","date":"2017-11-09T05:36:07.000Z","updated":"2017-11-09T05:36:51.672Z","comments":true,"path":"2017/11/09/sorted/","link":"","permalink":"http://yoursite.com/2017/11/09/sorted/","excerpt":"","text":"排序算法是经典算法的重要一环，不仅需要了解如何实现，更应该注意每一种排序适用的范围以及相应的时间空间复杂度要求。 插入排序（Insertion sort）时间复杂度：Best = O（n）， Worst = O（n^2^）空间复杂度：O（1）稳定性：稳定 Code（C++）：1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;using namespace std;void insert_sort(vector&lt;int&gt;&amp; data)&#123; int temp, j; for (int i = 1; i &lt; data.size(); i++)&#123; temp = data[i]; for (j = i; j &gt; 0 &amp;&amp; temp &lt; data[j - 1]; j--)&#123; data[j] = data[j - 1]; &#125; data[j] = temp; &#125;&#125;int main()&#123; int len; int cond; vector&lt;int&gt; data; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; insert_sort(data); for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 选择排序（Selection sort）时间复杂度：Best = O（n^2^）， Worst = O（n^2^）空间复杂度：O（1）稳定性：不稳定 Code（C++）：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;using namespace std;void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123; int temp = data[i]; data[i] = data[j]; data[j] = temp;&#125;void selection_sort(vector&lt;int&gt;&amp; data)&#123; for (int i = 0; i &lt; data.size(); i++)&#123; int min = i; for (int j = i + 1; j &lt; data.size(); j++)&#123; if (data[j] &lt; data[min])&#123; min = j; &#125; &#125; if (i != min)&#123; swap(data, i, min); &#125; &#125;&#125;int main()&#123; int len; int cond; string ans = \"\"; vector&lt;int&gt; data; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; selection_sort(data) for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 希尔排序（Shell sort）时间复杂度：Best = O（n）， Worst = O（n^2^）空间复杂度：O（1）稳定性：不稳定 Code（C++）：12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;using namespace std;void Shell_sort(vector&lt;int&gt;&amp; data, int gap)&#123; for (; gap &gt; 0; gap = gap / 2)&#123; for (int i = gap; i &lt; data.size(); i++)&#123; int candidate = data[i]; int j = i - gap; for (; j &gt;= 0 &amp;&amp; data[j] &gt; candidate; j -= gap)&#123; data[j + gap] = data[j]; &#125; data[j + gap] = candidate; &#125; &#125;&#125;int main()&#123; int len, cond, gap; vector&lt;int&gt; data; string ans = \"\"; cin &gt;&gt; len; for (int i = 1; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; gap = data.size() / 2; Shell_sort(data, gap); for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 堆排序（Heap sort）时间复杂度：Best = O（nlogn）， Worst = O（nlogn）空间复杂度：O（1）稳定性：不稳定 Code（C++）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cmath&gt;using namespace std;void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123; int candidate = data[i]; data[i] = data[j]; data[j] = candidate;&#125;void heapify(vector&lt;int&gt;&amp; data, int root, int length)&#123; int leftChild = root * 2 + 1; int rightChild = root * 2 + 2; int max = -1; if (leftChild &lt; length &amp;&amp; (data[leftChild] &gt; data[root])) max = leftChild; else max = root; if (rightChild &lt; length &amp;&amp; (data[rightChild] &gt; data[max])) max = rightChild; if (max != root)&#123; swap(data, root, max); heapify(data, max, length); &#125;&#125;void heap_sort(vector&lt;int&gt;&amp; data)&#123; for (int i = floor(data.size() / 2) - 1; i &gt;= 0; i--)&#123; heapify(data, i, data.size()); &#125; for (int i = data.size() - 1; i &gt; 0; i--)&#123; swap(data, i, 0); heapify(data, 0, i); &#125;&#125;int main()&#123; int len, cond; vector&lt;int&gt; data; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; heap_sort(data); for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 冒泡排序（Bubble sort）时间复杂度：Best = O（n）， Worst = O（n^2^）空间复杂度：O（1）稳定性：稳定 Code（C++）：123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;string&gt;using namespace std;void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123; int temp = data[i]; data[i] = data[j]; data[j] = temp;&#125;void bubble_sort(vector&lt;int&gt;&amp; data)&#123; bool flag = true; for (int i = 0; i &lt; data.size() - 1 &amp;&amp; flag; i++)&#123; flag = false; for (int j = 0; j &lt; data.size() - i - 1; j++)&#123; if (data[j + 1] &lt; data[j])&#123; swap(data, j + 1, j); flag = true; &#125; &#125; &#125;&#125;int main()&#123; int len, cond; vector&lt;int&gt; data; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; bubble_sort(data); for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 摇晃/鸡尾酒排序（Shaker sort）时间复杂度：Best = O（n）， Worst = O（n^2^）空间复杂度：O（1）稳定性：稳定 Code（C++）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123; int temp = data[i]; data[i] = data[j]; data[j] = temp;&#125;void shaker_sort(vector&lt;int&gt;&amp; data)&#123; int left = 0; int right = data.size() - 1; int shift = 0; while (left &lt; right)&#123; for (int i = left; i &lt; right; i++)&#123; if (data[i] &gt; data[i + 1])&#123; swap(data, i, i + 1); shift = i; &#125; &#125; right = shift; for (int i = right; i &gt; left; i--)&#123; if (data[i] &lt; data[i - 1])&#123; swap(data, i, i - 1); shift = i; &#125; &#125; left = shift; &#125;&#125;int main()&#123; int len, cond; vector&lt;int&gt; data; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; shaker_sort(data); for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 快速排序（Quick sort）时间复杂度：Best = O（nlogn）， Worst = O（n^2^）空间复杂度：O（nlogn）稳定性：不稳定 Code（C++）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123; int temp = data[i]; data[i] = data[j]; data[j] = temp;&#125;void Quick_sort(vector&lt;int&gt;&amp; data, int first, int last)&#123; if (first &lt; last)&#123; int pivot = data[first]; int left = first + 1; int right = last; while (true)&#123; while (data[left] &lt;= pivot)&#123; if (left != right) left++; else break; &#125; while (data[right] &gt; pivot) right--; if (left &lt; right) swap(data, left, right); else break; &#125; swap(data, right, first); Quick_sort(data, first, right - 1); Quick_sort(data, right + 1, last); &#125;&#125;int main()&#123; int len, cond; vector&lt;int&gt; data; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data.push_back(cond); &#125; Quick_sort(data, 0, data.size() - 1); for (int i = 0; i &lt; data.size(); i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 归并排序（Merge sort）时间复杂度：Best = O（nlogn）， Worst = O（nlogn）空间复杂度：O（n）稳定性：稳定 Code（C++）：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cmath&gt;using namespace std;int* merge(int* left, int* right, int len, int l, int r)&#123; int* sorted = new int[len]; int leftsize = 0, rightsize = 0; for (int i = 0; i &lt; l + r; i++)&#123; if (leftsize == l) sorted[i] = right[rightsize++]; else if (rightsize == r) sorted[i] = left[leftsize++]; else if (left[leftsize] &lt; right[rightsize]) sorted[i] = left[leftsize++]; else sorted[i] = right[rightsize++]; &#125; return sorted;&#125;int* merge_sort(int* data, int len)&#123; if (len &gt; 1)&#123; int* left = new int[len]; int* right = new int[len]; int middle = ceil(len / 2); int cout_l = 0, cout_r = 0; for (int i = 0; i &lt; middle; i++)&#123; left[i] = data[i]; cout_l++; &#125; for (int j = middle; j &lt; len; j++)&#123; right[j - middle] = data[j]; cout_r++; &#125; left = merge_sort(left, cout_l); right = merge_sort(right, cout_r); return merge(left, right, len, cout_l, cout_r); &#125; return data;&#125;int main()&#123; int len, cond; int* data = new int[len]; int* result = new int[len]; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data[i] = cond; &#125; result = merge_sort(data, len); for (int i = 0; i &lt; len; i++)&#123; char temp[64]; sprintf(temp, \"%d\", result[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 基数/桶排序（Radix sort）时间复杂度：Best = O（d(n+r)）， Worst = O（d(n+r)），其中d代表回合数，n代表数组长度，r代表基数（桶）大小空间复杂度：O（nr）稳定性：稳定 Code（C++）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;using namespace std;void init_bucket(int** buckets, int count[], int len)&#123; for (int i = 0; i &lt; 10; i++)&#123; buckets[i] = new int[len]; count[i] = 0; &#125;&#125;int* radix_sort(int* data, int len)&#123; int max = 100; int dataindex = 0, radix = 1; int** buckets = new int*[10]; int count[len]; init_bucket(buckets, count, len); while(radix &lt;= max)&#123; for (int i = 0; i &lt; len; i++)&#123; int LSD = (int)ceil(data[i] / radix) % 10; buckets[LSD][count[LSD]] = data[i]; count[LSD]++; &#125; radix *= 10; dataindex = 0; for (int i = 0; i &lt; 10; i++)&#123; if (count[i] != 0)&#123; for (int j = 0; j &lt; count[i]; j++)&#123; data[dataindex++] = buckets[i][j]; &#125; &#125; count[i] = 0; &#125; &#125; return data;&#125;int main()&#123; int len, cond; int* data = new int[len]; string ans = \"\"; cin &gt;&gt; len; for (int i = 0; i &lt; len; i++)&#123; cin &gt;&gt; cond; data[i] = cond; &#125; int* result = radix_sort(data, len); for (int i = 0; i &lt; len; i++)&#123; char temp[64]; sprintf(temp, \"%d\", data[i]); string s(temp); ans += s.c_str(); ans += \" \"; &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125;","categories":[],"tags":[{"name":"Sorted Algorithm","slug":"Sorted-Algorithm","permalink":"http://yoursite.com/tags/Sorted-Algorithm/"}]},{"title":"算法工程师笔面试汇总","slug":"exam","date":"2017-11-09T05:31:15.000Z","updated":"2017-11-09T05:39:56.534Z","comments":true,"path":"2017/11/09/exam/","link":"","permalink":"http://yoursite.com/2017/11/09/exam/","excerpt":"","text":"操作系統与计算机结构 ThreadPool，Jdk原生线程池，四个参数详细解释原理，当线程池中poolSize达到corePoolSize且阻塞队列已满，再来一个任务，如何处理。 多线程实现同步的方式，互斥同步，非阻塞同步。 程序的编译、链接过程。 死锁的条件是什么？以及如何处理死锁问题？条件：互斥条件（Mutual exclusion）：1、资源不能被共享，只能由一个进程使用。2、请求与保持条件（Hold and wait）：已经得到资源的进程可以再次申请新的资源。3、非剥夺条件（No pre-emption）：已经分配的资源不能从相应的进程中被强制地剥夺。4、循环等待条件（Circular wait）：系统中若干进程组成环路，该环路中每个进程都在等待相邻进程正占用的资源。解决方法：1、忽略该问题。例如鸵鸟算法，该算法可以应用在极少发生死锁的的情况下。为什么叫鸵鸟算法呢，因为传说中鸵鸟看到危险就把头埋在地底下，可能鸵鸟觉得看不到危险也就没危险了吧。跟掩耳盗铃有点像。2、检测死锁并且恢复。3、仔细地对资源进行动态分配，以避免死锁。4、通过破除死锁四个必要条件之一，来防止死锁产生。（Synchronize） 请阐述动态链接库与静态链接库的区别。静态链接库是 .lib 格式的文件，一般在工程的设置界面加入工程中，程序编译时会把lib文件的代码加入你的程序中因此会增加代码大小，你的程序一运行lib代码强制被装入你程序的运行空间，不能手动移除lib代码。动态链接库是程序运行时动态装入内存的模块，格式 .dll ，在程序运行时可以随意加载和移除，节省内存空间。在大型的软件项目中一般要实现很多功能，如果把所有单独的功能写成一个个lib文件的话，程序运行的时候要占用很大的内存空间，导致运行缓慢；但是如果将功能写成dll文件，就可以在用到该功能的时候调用功能对应的dll文件，不用这个功能时将dll文件移除内存，这样可以节省内存空间。 请阐述进程与线程的区别。从概念上：进程：一个程序对一个数据集的动态执行过程，是分配资源的基本单位。线程：一个进程内的基本调度单位。线程的划分尺度小于进程，一个进程包含一个或者更多的线程。从执行过程中来看：进程：拥有独立的内存单元，而多个线程共享内存，从而提高了应用程序的运行效率。线程：每一个独立的线程，都有一个程序运行的入口、顺序执行序列、和程序的出口。但是线程不能够独立的执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。从逻辑角度来看（重要区别）：多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但是，操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理及资源分配。 用户进程间通信主要哪几种方式？主要有以下6种：1、管道：管道是单向的、先进先出的、无结构的、固定大小的字节流，它把一个进程的标准输出和另一个进程的标准输入连接在一起。写进程在管道的尾端写入数据，读进程在管道的道端读出数据。数据读出后将从管道中移走，其它读进程都不能再读到这些数据。管道提供了简单的流控制机制。进程试图读空管道时，在有数据写入管道前，进程将一直阻塞。同样地，管道已经满时，进程再试图写管道，在其它进程从管道中移走数据之前，写进程将一直阻塞。无名管道：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系（通常是指父子进程关系）的进程间使用。命名管道：命名管道也是半双工的通信方式，在文件系统中作为一个特殊的设备文件而存在，但是它允许无亲缘关系进程间的通信。当共享管道的进程执行完所有的I/O操作以后，命名管道将继续保存在文件系统中以便以后使用。2、信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其它进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。3、消息队列：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。4、信号：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。5、共享内存：共享内存就是映射一段能被其它进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其它进程间通信方式运行效率低而专门设计的。它往往与其它通信机制（如信号量）配合使用，来实现进程间的同步和通信。6、套接字：套接字也是一种进程间通信机制，与其它通信机制不同的是，它可用于不同机器间的进程通信。 巨量化数据处理模型Hadoop和Spark的基本原理和区别。 Python垃圾回收机制（gc）：引用计数、标记回收、分代回收。 MySQL第一、二、三范式要求。（属性原子性；不存在函数依赖；不存在传递依赖） CDN(Content Delivery Network)工作机制。（能够根据实时网络流量和各节点的链接、负载状况以及到用户的距离和响应时间等综合信息，将用户请求重新定向至离用户最近的服务节点上，解决网络拥挤和提高访问响应速度） 计算机网络Link OSI七层结构和功能。 TCP四层结构和功能。 五层协议的基本机构。 IP地址的分类，ABC三类以及Internet上保留地址用于内部。 IP地址和子网掩码相与得到主机号。 ARP地址解析协议工作流程。 基本网络协议。（ICMP、TFTP、HTTP、DHCP、NAT、DHCP） 三次握手和四次挥手。 在浏览器中输入网址后执行的全部过程。（DNS -&gt; IP找server -&gt; 打包报文段 -&gt; 选择和传输路由（ARP） -&gt; 通过协议进行端对端传输） TCP和UDP的区别（传输可靠性和面向连接，传输单位，数据安全性）。 报文段和用户数据报结构。(TCP -&gt; 首 + 数据，固定部分20字节，UDP -&gt; 首 + 数据，固定部分20字节) TCP协议端口。（FTP、Telnet、SMTP、POP3、HTTP） UDP协议端口。（DNS、SNMP、TFTP） DNS域名系统的工作原理。 面向连接和非面向连接服务的特点是什么？ TCP三次握手可以改成两次吗？为什么？ TCP和UDP的12字节伪首部。TCP：源IP地址（4）+目的IP地址（4）+0（1）+6(TCP标识符)(1)+TCP长度(2)UDP：源IP地址（4）+目的IP地址（4）+0（1）+17(UDP标识符)(1)+UDP长度（2） 什么是交换器、路由器、网关和主机。 程式语言 解释Synchronize关键字的锁优化技术，偏向锁，轻量级锁，重量级锁，这些锁是如何存储的，偏向锁撤销升级为轻量级锁的过程 volatile关键字语义，内存屏障如何实现，JMM对内存屏障做了哪些优化，volatile的语义增强。 Integer与int的区别。 hashMap为什么会造成死循环。Link C++如何实现动态绑定（Virtual动态绑定，利用基类动态指针和当前静态类型指针指向同一个对象的Virtual函数）。Link C++虚函数，虚函数表，虚指针，内存模型。 指针数组和数组指针的区别。 malloc-free和new-delete的区别。Link sizeof和strlen的区别。Link C++中父类构造函数，子类构造函数，父类派生函数，子类派生函数训醒顺序。Link C++ STL里面的vector的实现机制。(Vector的底层实现一般是连续的内存(数组)。deque的实现是连续的内存块，list的是双链表，set和map是红黑树)Link (STL) STL的容器可以分为以下几个大类:1、 顺序（序列）容器:有 vector,list,deque , string,stack(适配器类), queue(适配器类), priority queues(适配器类)。2、关联容器:有set, multiset,map,multimap, bitset,hash_set, hash_map, hash_multiset, hash_multimap。 怎么防止单例模式被破坏。Link LRU（Least Recently Used）cache 设计数据结构，怎么实现。Link 熟悉基本的设计模式：单例、工厂、观察者、装饰者以及MVC等模式。 Java中HashMap和HashTable的不同之处。（包括线程安全性，可否为null以及遍历方式，初始值与扩容方式，hash算法实现等等） 机器学习、算法和自然语言处理 SSD（Single Shot MultiBox Detector）的思路和里面的网络结构 讲下LR模型，LR模型为什么采用似然估计损失函数。 说下基本主题的LDA模型。 doc2vec中向量怎么产生的。（word2vec + TokenID） 说下频繁序列挖掘prefixspan 算法。（对比Apriori算法的过程和缺点，讲解该算法的优势，只需要扫描一次序列数据集，目标是挖掘出满足最小支持度的频繁序列，长度为1的前缀开始挖掘序列模式，搜索对应的投影数据库的频繁序列，然后递归的挖掘长度为2的前缀所对应的频繁序列。以此类推，一直递归到对应的投影数据库为空或者对应投影数据库中各项的支持度计数小于阈值为止。整个过程就是前缀不断的增长，产生1，2…N 频繁序列，对应的投影数据库不断缩小直至为空。优点：PrefixSpan算法由于不用产生候选序列，且投影数据库缩小的很快，内存消耗比较稳定，作频繁序列模式挖掘的时候效果很高。） 说说RBM编码器，Restricted Boltzmann Machine (RBM)限制波尔兹曼机。Link作用：1.降维，类似稀疏自动编码器2.用RBM训练得到的权重举证和偏移量作为BP神经网路的初始值，避免陷入局部极小值3.可以估计联合分布P(v,h)，进而求出P(h|v)。生成式模型4.直接计算P(h|v)进行分类。判别式模型 (序列标注) 适合序列标注问题的模型：1、HMM2、CRF3、RNN (反向传递) 在电影票房预测工作中，假如使用梯度下降优化均方差损失函数，并且希望模型训练效更偏重于票房较大的电影样本。能： 1、在训练数据中直接复制大票房电影的数据。2、修改损失函数，使其偏重大票房电影的误差。3、针对大票房数据，在训练时增加学习步长。(增大Learning rate相当于增大了权重值)不能： 增加大票房电影独有的特征，例如访问流量是否大于一定阈值。（不一定对训练有帮助，反而容易干扰学习方向） (降维) 降维算法的实现有：1、Latent Dirichlet Allocation(LDA)把文件投影到topic空间，降低了文件有效特征数。2、Word2Vec利用word embedding表示词的向量，将传统的dim维度稀疏的向量one-hot vector压缩到n维的向量，n&lt;&lt;dim。3、Principal component analysis(PCA)主成分分析，将特征通过在某个维度上的映射来降维。4、AutoEncoder神经网络压缩特征向量常用的方法。 (过拟合) 防止过拟合的方法：1、使用正则化项2、扩增训练数据集3、决策树模型剪枝4、early stop (生成、判别式模型) 判别式(Discriminative model)和生成式(Generative model)模型分类：判别式 ： 线性回归、逻辑回归、神经网络、SVM、高斯处理(Gaussian Process)、条件随机场(CRF)、CART生成式 ： 朴素贝叶斯、KNN、混合高斯模型、HMM、Sigmoid Belief Networks、马尔科夫随机场、深度信念网络(DBN) (无约束优化) 用来解决无约束优化的算法：（SMO用来解约束优化算法）1、随机梯度下降2、LBFGS3、共轭梯度法4、拟牛顿法 (二叉树) 一颗高度为4的平衡二叉树，其最少节点数为 : 7深度为n的平衡二叉树（Balance binary tree）至少有F（n）个节点，那么F（n）满足：F(n) = F(n-1)+F(n-2)+1 (二叉树) 一共三个结点的二叉树可能出现多少种结构 : 5节点形态数 = 卡特兰数 = C(2n, n) / (n+1) (哈弗曼编码) 现有一段文本，其中只有A，B，C，D，E包含五个字母，它们出现的次数分别是A出现1次，B出现2次，C出现10次，D出现6次，E出现4次，那么经过哈弗曼编码后，各个字母对应的编码可能是下面哪一组？ word2vec、sent2vec（doc2vec）如何得到向量？ 词嵌入（Word Embedding）过程中，如何找到相似的字符。 传统机器学习、深度学习考点：Link 常见数据挖掘算法：Link 卡方检定基本功能。（同质性、适合度、独立性分析） 基础算法编程: Link 经典演算法实例：Link 排序算法和比较：Link 其他其他的问题可以参考牛客网专项练习和公司专题。","categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]},{"title":"剑指offer算法编程题（Python、C++、Java）","slug":"Algorithm","date":"2017-11-02T05:44:14.000Z","updated":"2017-11-02T05:58:59.042Z","comments":true,"path":"2017/11/02/Algorithm/","link":"","permalink":"http://yoursite.com/2017/11/02/Algorithm/","excerpt":"","text":"主要考点涵盖了基本数据结构，基础逻辑和算法应用以及智力题。 数据结构主要考察数据结构在现实算法中的实际应用和变形转换。 链表（linked list）从尾到头打印链表题目：输入一个链表，从尾到头打印链表每个节点的值。Input： {67,0,24,58} Output： [58,24,0,67] Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题属于基本题，最直接的思路就是使用一个栈（stack）结构来依次存取数组中所有的元素，然后将stack的值按顺序pop即为答案。 1234567891011121314151617# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: # 返回从尾部到头部的列表值序列，例如[1,2,3] def printListFromTailToHead(self, listNode): # write code here if listNode is None: return [] stack = [] while listNode is not None: stack.append(listNode.val) listNode = listNode.next return stack[::-1] 链表中倒数第k个结点题目：输入一个链表，输出该链表中倒数第k个结点。Input： 1, {1,2,3,4,5} Output： {5} Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题可以使用双指针解决，定义一前一后两个指针。让前指针先走k次，然后指针同时前进，当前指针到达链表尾部时，后指针所指的就是所要求的倒数第k个值。 12345678910111213141516171819class Solution: def FindKthToTail(self, head, k): # write code here if head is None: return None count = k first = head second = None while count: if first is not None: first = first.next count -= 1 else: return None second = head while first is not None: first = first.next second = second.next return second 合并两个排序的链表题目：输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。Input： {1,3,5}, {2,4,6} Output： {1,2,3,4,5,6} Requirement： Time limit = 1s, Space limit = 32768K 思路： 本体主要的条件是已排序，所以我们只要依次比较两个链表的最左端元素大小，依次插入新的链表即可。具体流程可使用递归的方式。 123456789101112131415161718192021# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: # 返回合并后列表 def Merge(self, pHead1, pHead2): # write code here if pHead1 == None: return pHead2 elif pHead2 == None: return pHead1 newHead = ListNode(0) if pHead1.val &lt; pHead2.val: newHead.val = pHead1.val newHead.next = self.Merge(pHead1.next, pHead2) else: newHead.val = pHead2.val newHead.next = self.Merge(pHead1, pHead2.next) return newHead 两个链表的第一个交点题目：输入两个链表，找出它们的第一个公共结点。Input： {1,2,3,6,7}, {4,5,6,7} Output： 6 Requirement： Time limit = 1s, Space limit = 32768K 思路： 两个链表有公共节点，其必定共用结尾，因此可以计算两个链表的长度差，然后让长的先走相差的步数。最后两个链表同时移动，判断相同的点为公共点。 12345678910111213141516171819202122232425262728293031323334# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def findlength(self, pHead): count = 0 while pHead: count += 1 pHead = pHead.next return count def FindFirstCommonNode(self, pHead1, pHead2): # write code here if not pHead1 or not pHead2: return None len_one = self.findlength(pHead1) len_two = self.findlength(pHead2) dis = abs(len_one - len_two) if len_one &gt; len_two: while dis: pHead1 = pHead1.next dis -= 1 elif len_one &lt; len_two: while dis: pHead2 = pHead2.next dis -= 1 while pHead1: if pHead1.val == pHead2.val: return pHead1 else: pHead1 = pHead1.next pHead2 = pHead2.next return None 链表中环的入口题目：一个链表中包含环，请找出该链表的环的入口结点。Input： {1,2}, {3,4,5} Output： 3 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题可以使用快慢指针，1个速度2倍于满指针的快指针。两指针一起移动，相遇的时候快指针在环中的距离为慢指针的2倍。此时慢指针距离入口的距离恰好等于起点距离入口的一半。 1234567891011121314151617181920# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def EntryNodeOfLoop(self, pHead): # write code here if not pHead or not pHead.next: return None slow = pHead.next fast = pHead.next.next while slow != fast: slow = slow.next fast = fast.next.next fast = pHead while fast != slow: fast = fast.next slow = slow.next return fast 树（tree）二叉树的镜像题目：操作给定的二叉树，将其变换为源二叉树的镜像。Input： {8,6,10,5,7,9,11} Output： {8,10,6,11,9,7,5} Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题的主要观念还是在树结构的问题上，由于题目给定的是二叉树，因此只会有左子节点和右子节点。值得注意的是在交换父节点的同时，父节点对应的子节点也跟着交换，这点符合镜像的要求，因此可以考虑使用递归的方式来实现这个过程。 1234567891011121314151617181920# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: # 返回镜像树的根节点 def transform(self, node): temp = node.left node.left = node.right node.right = temp def Mirror(self, root): # write code here if root is not None: self.transform(root) self.Mirror(root.left) self.Mirror(root.right) 重构二叉树题目：输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。Input： {1,2,3,4,5,6,7}, {3,2,4,1,6,5,7} Output： {1,2,5,3,4,6,7}， root = 1 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本体需要了解的关键点包括：树的遍历性质，递归的思维步骤等。先序遍历总是优先打印当前最大子树的root节点，而root节点的所有左子树的元素在中序遍历中必定出现在root前，相反右子树的所有元素都在后。根据这些性质就能够根据递归的思路对数的结构进行拆解，最后回归整棵树的结构。 1234567891011121314151617181920212223242526272829303132333435363738/** * Definition for binary tree * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* reConstructBinaryTree(vector&lt;int&gt; pre,vector&lt;int&gt; vin) &#123; int cand = pre[0]; if (vin.size() == 0)&#123; return NULL; &#125; TreeNode* head = new TreeNode(cand); vector&lt;int&gt; left_pre, right_pre, left_in, right_in; int count = 0; for (int i = 0; i &lt; vin.size(); i++)&#123; if (vin[i] == cand)&#123; count = i; break; &#125; &#125; for (int i = 0; i &lt; count; i++)&#123; left_pre.push_back(pre[i+1]); left_in.push_back(vin[i]); &#125; for (int i = count+1; i &lt; vin.size(); i++)&#123; right_pre.push_back(pre[i]); right_in.push_back(vin[i]); &#125; head -&gt; left = reConstructBinaryTree(left_pre, left_in); head -&gt; right = reConstructBinaryTree(right_pre, right_in); return head; &#125;&#125;; 树的子结构题目：输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）Input： {8,8,7,9,3,#,#,#,#,4,7}, {8,9,2} Output： False Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题用到的数据结构是二叉树，看到题目不难想到利用DFS的思路顺势搜索下去，如果能够找到答案就返回True，不行就返回False。DFS的行为主要依赖于递归的算法，对每一个节点进行深度检索，判断是否能够找到另一棵树。 123456789101112131415161718# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def search(self, root1, root2): if root2 is None: return True if root1 is None or root1.val != root2.val: return False return self.search(root1.left, root2.left) and self.search(root1.right, root2.right) def HasSubtree(self, pRoot1, pRoot2): # write code here if pRoot1 is None or pRoot2 is None: return False return self.search(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2) 二叉树的广度优先检索题目：从上往下打印出二叉树的每个节点，同层节点从左至右打印。Input： {10,6,14,4,8,12,16} Output： [10,6,14,4,8,12,16] Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题不需要考虑按层换行打印，因此难度稍微低了些。code中的last和nlast用来判断层的结束和遍历的位置。 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: # 返回从上到下每个节点值列表，例：[1,2,3] def PrintFromTopToBottom(self, root): # write code here if root is None: return [] queue = [] ans = [] last = root nlast = root queue.append(root) while queue: temp = queue.pop(0) ans.append(temp.val) if temp.left is not None: queue.append(temp.left) nlast = temp.left if temp.right is not None: queue.append(temp.right) nlast = temp.right if temp == last: last = nlast return ans 二叉树的后序遍历序列题目：输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。Input： [4,6,7,5] Output： True Requirement： Time limit = 1s, Space limit = 32768K 思路： 值得注意的关键条件是对于一个后续遍历的二叉树序列而言，最后一个元素永远是root结点。因此可以使用递归的方式判断root结点的左右子树（小于的节点在左边，大于的节点在右边）。两者的值连续分布，如果存在交叉或者奇异值，则判断条件不成立。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# -*- coding:utf-8 -*-class Solution: def VerifySquenceOfBST(self, sequence): # write code here if not sequence: return False if len(sequence) == 1: return True temp = sequence.pop() left = [] right = [] i = 0 while i &lt; len(sequence) and sequence[i] &lt; temp: left.append(sequence[i]) i += 1 while i &lt; len(sequence): if sequence[i] &lt; temp: return False right.append(sequence[i]) i += 1 left_flag = True right_flag = True if len(left): left_flag = self.VerifySquenceOfBST(left) if len(right): right_flag = self.VerifySquenceOfBST(right) return left_flag and right_flag``` ### 平衡二叉树题目：输入一棵二叉树，判断该二叉树是否是平衡二叉树。**Input：**&#123;1,2,3,4,5,#,6,#,#,7&#125;**Output：**True**Requirement：**Time limit = 1s, Space limit = 32768K**思路：** 平衡二叉树的性质是最大的深度差不超过1，因此计算深度之后就能够容易得到结果。```python=# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def check(self, root): if not root: return 0 left = self.check(root.left) right = self.check(root.right) return max(left + 1, right + 1) def IsBalanced_Solution(self, pRoot): # write code here if not pRoot: return True if abs(self.check(pRoot.left) - self.check(pRoot.right)) &gt; 1: return False else: return True 二叉树的下一个节点题目：给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。Input： {8,6,10,5,7,9,11}, 5 Output： 6 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题属于一个递归的思路，需要熟悉二叉树的中序遍历特点。首先如果一个node有右节点，那么我们就会去寻找这个右节点的左子树的最左节点。如果右节点不存在的时候我们就会去找父节点，如果父节点的左节点就是当前节点，那么父节点就是下一个输出的对象。这个需要考虑几个特殊情况，例如root节点，如果没有右节点，那么没有下一个节点；右子树的最右节点，没有next节点等。 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-# class TreeLinkNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = None# self.next = Noneclass Solution: def findleft(self, pNode): while pNode.left: pNode = pNode.left return pNode def GetNext(self, pNode): # write code here if not pNode: return None if pNode.right: return self.findleft(pNode.right) else: temp = pNode while temp.next: temp = pNode.next if temp.left == pNode: return temp pNode = temp return None 二叉树的对称题目：请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。Input： {8,6,6,5,7,7,5} Output： True Requirement： Time limit = 1s, Space limit = 32768K 思路： 该题的思路比较明确，就是判断二叉树的镜像是否相同，利用递归可以很好地解决。 1234567891011121314151617181920# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def is_same(self, left, right): if not left and not right: return True if left and right and left.val == right.val: return self.is_same(left.left, right.right) and self.is_same(left.right, right.left) return False def isSymmetrical(self, pRoot): # write code here if not pRoot: return True if (pRoot.left and not pRoot.right) or (pRoot.right and not pRoot.left): return False return self.is_same(pRoot.left, pRoot.right) 字符串（string）替换空格题目：请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy。则经过替换之后的字符串为We%20Are%20Happy。Input： “hello world” Output： “hello%20world” Requirement： Time limit = 1s, Space limit = 32768K 思路： 本体使用python的replace function可以快速得到结果。如果使用C++或是Java需要考虑替换的长度变化问题。另外替换过程中如果从第一个元素开始替换，需要进行大量的元素位移，因此考虑时间复杂度应该考虑从最后一位进行替换。而在原有的数组中进行替换，就需要知道数组的元素新增多少个空间。 1234567891011121314151617181920212223242526272829class Solution &#123;public: void replaceSpace(char *str,int length) &#123; if (str == NULL || length &lt;0) return; int countspace = 0; int oldlen = 0; int i = 0; while (str[i] != &apos;\\0&apos;)&#123; oldlen++; if (str[i] == &apos; &apos;) countspace++; i++; &#125; int newlen = oldlen + 2*countspace; if (newlen &gt; length) return; while (oldlen &gt;= 0 &amp;&amp; newlen &gt; oldlen)&#123; if (str[oldlen] == &apos; &apos;)&#123; str[newlen--] = &apos;0&apos;; str[newlen--] = &apos;2&apos;; str[newlen--] = &apos;%&apos;; &#125; else str[newlen--] = str[oldlen]; oldlen--; &#125; &#125;&#125;; 字符串的全排列题目：输入一个字符串,按字典序打印出该字符串中字符的所有排列。Input： abc Output： abc,acb,bac,bca,cab,cba Requirement： Time limit = 1s, Space limit = 32768K 思路： 全排列的问题可以看成是一个递归的过程，在固定第一个元素的基础上计算之后元素的排列数，以此类推。也可以理解成动态规划的问题，根据每一个元素在每一个位置出现的可能性，交换不同元素使之成为固定元素，然后计算其他元素的排列数，以此作为转换函数传递递归下去。 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-class Solution: def swap(self, ss, i, j): temp = ss[i] ss[i] = ss[j] ss[j] = temp def not_equal(self, ss, i, j): for k in range(i, j): if ss[k] == ss[j]: return False return True def permu(self, ss, temp, first, last): if not ss or last &lt; 1: return if first == last: temp.append(&quot;&quot;.join(ss)) else: for i in range(first, last): if self.not_equal(ss, first, i): self.swap(ss, first, i) self.permu(ss, temp, first + 1, last) self.swap(ss, first, i) def Permutation(self, ss): # write code here if not ss: return [] ans = [] st = [i for i in ss] self.permu(st, ans, 0, len(st)) return [&quot;&quot;.join(i) for i in ans] 第一次只出现一次的字符题目：在一个字符串(1&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置。Input： google Output： 4 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题考察hash的用法以及字符类型字典的建构。 123456789101112131415161718class Solution &#123;public: int FirstNotRepeatingChar(string str) &#123; if (str.empty())&#123; return -1; &#125; map&lt;char, int&gt; hash; for (int i = 0; i &lt; str.size(); i++)&#123; hash[str[i]]++; &#125; for (int i = 0; i &lt; str.size(); i++)&#123; if (hash[str[i]] == 1)&#123; return i; &#125; &#125; return 0; &#125;&#125;; 左旋转字符题目：汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。Input： abcdefg, 2 Output： “cdefgab” Requirement： Time limit = 1s, Space limit = 32768K 思路： 旋转字符属于基本的算法之一，其思路也有许多，包括最基本的取值平移（K位数直接平移）；以及3次反向（先对前k个取反，然后对后n-k个取反，最后对整个字符串取反）等。 123456789101112# -*- coding:utf-8 -*-class Solution: def LeftRotateString(self, s, n): # write code here if len(s) == 0: return &quot;&quot; if len(s) &lt;= n: return s left = s[:n] right = s[n:] ans = left[::-1] + right[::-1] return ans[::-1] 翻转单词顺序列题目：牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。后来才意识到，这家伙原来把句子单词的顺序翻转了。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？Input： I am a student. Output： student. a am I Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题属于旋转字符串的运用。 12345678# -*- coding:utf-8 -*-class Solution: def ReverseSentence(self, s): # write code here temp = s.split(&quot; &quot;) if len(temp) == 0: return [] return &quot; &quot;.join(temp[::-1]) 把字符串转换成整数题目：将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。Input： +2147483647 1a33 Output： 2147483647 0 Requirement： Time limit = 1s, Space limit = 32768K 思路： 实作stoi函数，需要考虑的有4点：是否有无关字符，正负符号问题，空指针以及是否越界（超过integer临界值）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Solution &#123;public: int StrToInt(string str) &#123; const char* temp = str.c_str(); const static int MAX_INT = (int)((unsigned)~0 &gt;&gt; 1); const static int MIN_INT = -(int)((unsigned)~0 &gt;&gt; 1) - 1; unsigned int ans = 0; if (*temp == &apos;\\0&apos;)&#123; return 0; &#125; while (isspace(*temp))&#123; temp++; &#125; int sign = 1; if (*temp == &apos;+&apos; || *temp == &apos;-&apos;)&#123; if (*temp == &apos;-&apos;)&#123; sign = -1; &#125; temp++; &#125; while (*temp != &apos;\\0&apos;)&#123; if (isdigit(*temp))&#123; int c = *temp - &apos;0&apos;; if (sign &gt; 0 &amp;&amp; (ans &gt; MAX_INT / 10 || (ans == MAX_INT / 10 &amp;&amp; c &gt; MAX_INT % 10)))&#123; ans = MAX_INT; break; &#125; else if (sign &lt; 0 &amp;&amp; (ans &gt; (unsigned)MIN_INT / 10 || (ans == (unsigned)MIN_INT / 10 &amp;&amp; c &gt; (unsigned)MIN_INT % 10)))&#123; ans = MIN_INT; break; &#125; ans = ans * 10 + c; temp++; &#125; else&#123; return 0; &#125; &#125; return sign &gt; 0 ? ans : -ans; &#125;&#125;; 表示数值的字符串题目：请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值而”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。Input： “+100” Output： True Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题是要设计一个正则表达式能够判断字符的格式。 1234567# -*- coding:utf-8 -*-import reclass Solution: # s字符串 def isNumeric(self, s): # write code here return re.match(&quot;^[+-]?\\\\d*(\\\\.\\\\d+)?([Ee][+-]?\\\\d+)?$&quot;, s) 字符流中第一次只出现一次的字符题目：请实现一个函数用来找出字符流中第一个只出现一次的字符。Input： google Output： l Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题使用hash的方式统计次数，需要注意的是需要得到的是第一次出现的单一字符，因此需要从头到尾判断。 12345678910111213141516171819# -*- coding:utf-8 -*-class Solution: # 返回对应char def __init__(self): self.dic = &#123;&#125; self.s = &quot;&quot; def FirstAppearingOnce(self): # write code here for i in self.s: if self.dic[i] == 1: return i return &apos;#&apos; def Insert(self, char): # write code here self.s += char if char in self.dic: self.dic[char] += 1 else: self.dic[char] = 1 数组（array）二维数组中的查找题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。Input： 7, [[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]] Output： True Requirement： Time limit = 1s, Space limit = 32768K 思路： 既然二维数组满足严格的递增关系，那么我们可以考虑从数组的一个极端值开始考虑。以左下角为例，row = len(array)-1，col = 0的点比同一个col的其他值都大，因此如果此时这个数比我们的目标要大，我们只需要向上寻找即可。寻找过程中如果出现当前数字小于目标的时候，尝试往右寻找。如此往复，直到无路可走为止。想法类似DFS。 1234567891011121314151617# -*- coding:utf-8 -*-class Solution: # array 二维列表 def Find(self, target, array): # write code here if not array[0]: return False row = len(array)-1 col = 0 while (row &gt;=0) and (col &lt; len(array[0])): if array[row][col] == target: return True elif array[row][col] &gt; target: row-=1 else: col+=1 return False 调整数组顺序让基数位于偶数前面题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。Input： [1,2,3,4,5,6,7] Output： [1,3,5,7,2,4,6] Requirement： Time limit = 1s, Space limit = 32768K 思路： 利用两个指针来表示新数组中奇数和偶数的位置，然后依次插入即可。 123456789101112131415# -*- coding:utf-8 -*-class Solution: def reOrderArray(self, array): # write code here if len(array) == 0: return [] new_list = [] temp = 0 for i in array: if i % 2 == 0: new_list.append(i) else: new_list.insert(temp, i) temp += 1 return new_list 数组中最小的k个数题目：输入n个整数，找出其中最小的K个数。Input： {4,5,1,6,2,7,3,8}， 4 Output： [1,2,3,4] Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题是经典的算法题之一，其思路多种多样。其中包括最基本的排序取前k个数；维护一个长度为k的最小堆以及BFPRT算法（利用中位数进行更精准的二分）等。 123456789101112131415161718192021# -*- coding:utf-8 -*-class Solution: def is_min(self, s, k): temp = s[-1] if k &lt; temp: s[-1] = k s = sorted(s) return s def GetLeastNumbers_Solution(self, tinput, k): # write code here if k == len(tinput): return sorted(tinput) if k == 0 or not tinput or k &gt; len(tinput): return [] min_heap = [] for i in range(k): min_heap.append(tinput[i]) min_heap = sorted(min_heap) for i in range(k, len(tinput)): min_heap = self.is_min(min_heap, tinput[i]) return min_heap 连续子数组的最大和题目：HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？Input： {6,-3,-2,7,-15,1,2,2} Output： 8 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本体求的是连续数组，可以使用循环或者动态规划的思维来解决。其核心就是在遍历数组的过程中维护两个值，其中一个记录当前的和，另一个记录最大和。当当前和大于0且大于最大和的时候，更新最大和；如果当前和小于零，则令当前和等于下一个元素。 12345678910111213141516# -*- coding:utf-8 -*-class Solution: def FindGreatestSumOfSubArray(self, array): # write code here if len(array) == 0: return 0 ans = array[0] cur = 0 for i in range(len(array)): if cur &lt; 0: cur = array[i] else: cur += array[i] if cur &gt; ans: ans = cur return ans 把数组排成最小的数题目：输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。Input： {3，32，321} Output： 321323 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题使用贪心（Greedy）算法和DFS结合的思路按照从长到短的顺序判断左右拼接字符的大小，然后选择大的继续。注意从长到短是因为长的数对全局影响比较大，用大的拼接小的可变化范围会增加。 12345678910111213141516# -*- coding:utf-8 -*-class Solution: def PrintMinNumber(self, numbers): # write code here if len(numbers) == 0: return &quot;&quot; ans = &quot;&quot; numbers = sorted(numbers) for i in range(len(numbers)): ans1 = int(ans + str(numbers[i])) ans2 = int(str(numbers[i]) + ans) if ans1 &gt; ans2: ans = str(ans2) else: ans = str(ans1) return ans 丑数题目：把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。Input： 2 Output： 2 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题如果使用遍历实数域的方式很难实现，所以可以考虑对因数进行组合。因为丑数是只包含2、3和5的因数，因此其值可以表示为 2i+3j+5k 的形式，因此我们去匹配相应的i、j、k系数，取组合数的最小值作为下一个出现的丑数，从而找到结果。注意：一次只加i、j、k中的一个值。 12345678910111213141516171819202122# -*- coding:utf-8 -*-class Solution: def GetUglyNumber_Solution(self, index): # write code here if index == 0: return 0 if index == 1: return 1 l = [1] idx_two = 0 idx_three = 0 idx_five = 0 for _ in range(index-1): temp = min(l[idx_two]*2, l[idx_three]*3, l[idx_five]*5) l.append(temp) if temp % 2 == 0: idx_two += 1 if temp % 3 == 0: idx_three += 1 if temp % 5 == 0: idx_five += 1 return l[-1] 数组中只出现一次的数字题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。Input： [2,4,3,6,3,2,5,5] Output： “4,6” Requirement： Time limit = 1s, Space limit = 32768K 思路： 利用hash和字典可以轻松解决。 123456789101112131415# -*- coding:utf-8 -*-class Solution: # 返回[a,b] 其中ab是出现一次的两个数字 def FindNumsAppearOnce(self, array): # write code here if len(array) == 0: return ans = [] dic = &#123;i : 0 for i in array&#125; for i in array: dic[i] += 1 for i, j in dic.items(): if j == 1: ans.append(i) return ans 数组中重复的数字题目：在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。Input： [2,1,3,1,4] Output： “true, 1” Requirement： Time limit = 1s, Space limit = 32768K 思路： 利用一个bool数组来动态规划。原本所有的数字table都为false，如果某一个数字对应数值位置的值为true，表示该数字已经出现过了。 123456789101112131415161718192021public class Solution &#123; // Parameters: // numbers: an array of integers // length: the length of array numbers // duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation; // Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++ // 这里要特别注意~返回任意重复的一个，赋值duplication[0] // Return value: true if the input is valid, and there are some duplications in the array number // otherwise false public boolean duplicate(int numbers[],int length,int [] duplication) &#123; boolean temp[] = new boolean[length]; for (int i = 0; i &lt; length; i++)&#123; if (temp[numbers[i]] == true) &#123; duplication[0] = numbers[i]; return true; &#125; temp[numbers[i]] = true; &#125; return false; &#125;&#125; 栈和堆叠（stack &amp; heap）用两个栈实现队列题目：用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。Input： [1, 2, 3, “POP”, “POP”, 4, “POP”, 5, “POP”, “POP”] Output： 1,2,3,4,5 Requirement： Time limit = 1s, Space limit = 32768K 思路： 栈的特点是先进后出，如果要让栈内元素先进先出，就必须使用另一个栈来接它pop出去的元素，利用第二个栈的顺序依次pop即为队列（queue）的顺序。此外要注意的是，在pop结束之后，如果第二个栈内有剩余的元素，需要将这些元素pop回第一个栈再继续push的动作，这样才能保证元素的顺序正确。 12345678910111213141516171819202122232425class Solution&#123;public: void push(int node) &#123; stack1.push(node); &#125; int pop() &#123; while (!stack1.empty())&#123; stack2.push(stack1.top()); stack1.pop(); &#125; int ans = stack2.top(); stack2.pop(); while (!stack2.empty())&#123; stack1.push(stack2.top()); stack2.pop(); &#125; return ans; &#125;private: stack&lt;int&gt; stack1; stack&lt;int&gt; stack2;&#125;; 包含min函数的栈题目：定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。Input： [3, “MIN”, 4, “MIN”, 2, “MIN”, 3, “MIN”, “POP”, “MIN”, “POP”, “MIN”, “POP”, “MIN”, 0, “MIN”] Output： 3,3,2,2,2,3,3,0 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题考察数据结构的实作，在stack的基础上实现判断最小值的功能。 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-class Solution: def __init__(self): self.stack = [] def push(self, node): # write code here self.stack.append(node) def pop(self): # write code here if self.stack: del self.stack[-1] def top(self): # write code here if self.stack: return self.stack[-1] def min(self): # write code here self.min_stack = [] if self.stack: min = self.stack[-1] else: min = 0 while self.stack: temp = self.top() self.min_stack.append(temp) self.pop() if temp &lt; min: min = temp self.stack = self.min_stack[::-1] return min 栈的压入与弹出序列题目：输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。Input： [1,2,3,4,5], [4,3,5,1,2] Output： False Requirement： Time limit = 1s, Space limit = 32768K 思路： 利用DFS的思路可以对pushV和popV里面所有时刻的值进行对比，判断是否能够组成一条完整的输出路线即可。 123456789101112131415# -*- coding:utf-8 -*-class Solution: def IsPopOrder(self, pushV, popV): # write code here if not pushV or len(pushV) != len(popV): return False stack = [] for i in range(len(pushV)): stack.append(pushV[i]) while stack and popV[0] == stack[-1]: stack.pop() popV.pop(0) if len(stack) != 0: return False return True 智力题和知识迁移矩阵覆盖题目：我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2n的大矩形，总共有多少种方法？*Input： 4 Output： 5 Requirement： Time limit = 1s, Space limit = 32768K 思路： t时刻的状态可以由t-1时刻的状态加上一个21的小矩阵构成，因此不难想到利用状态转移的方式进行解答。由于是21的矩阵，因此在扩展2n大矩阵的时候可能出现 ‘||’ 和 *’=’ 两种摆放形式，而这要求下矩阵需要以偶数形式出现。因此不难想到状态在偶数时会比奇数时多，一个典型的斐波那契数列应用。 123456789101112131415# -*- coding:utf-8 -*-class Solution: def rectCover(self, number): # write code here if number &lt; 1: return 0 if number == 1: return 1 ans = 1 a = 1 for i in range(2, number + 1): temp = ans ans += a a = temp return ans 顺时针打印矩阵题目：输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。Input： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output： 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 Requirement： 本体考察空间想象能力，通过每次将二维阵列的第一行从左到右顺序打印，然后删除打印的元素。之后对阵列进行倒序转置，一次往复就能够实现螺旋打印了。 Time limit = 1s, Space limit = 32768K 思路： 本体需要考虑的问题是打印的顺序属于动态变化的情况，因此我们采用动态阵列的定义 12345678910111213141516171819202122# -*- coding:utf-8 -*-class Solution: # matrix类型为二维列表，需要返回列表 def transform(self, matrix): n = len(matrix) m = len(matrix[0]) B = [] for i in range(m): A = [] for j in range(n): A.append(matrix[j][i]) B.append(A) return B[::-1] def printMatrix(self, matrix): # write code here result = [] while matrix: result += matrix.pop(0) if not matrix: break matrix = self.transform(matrix) return result 复杂链表的复制题目：输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空。Input： {1,2,3,4,5,3,5,’#’,2,’#’} Output： {1,2,3,4,5,3,5,’#’,2,’#’} Requirement： Time limit = 1s, Space limit = 32768K 思路： 该题可以利用几种不同的思路进行解答，其中包括先利用临时阵列存取所有node的random值，然后复制原先的阵列，再将random值顺序赋值给对应的node。另一种是将遍历的每一个node复制到它的next结点，然后通过跳过一次的方式提取偶数node作为复制后的链表。 123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# class RandomListNode:# def __init__(self, x):# self.label = x# self.next = None# self.random = Noneclass Solution: # 返回 RandomListNode def Build(self, pHead): temp = [] while pHead: ans = pHead.random temp.append(ans) pHead = pHead.next return temp def Clone(self, pHead): # write code here if not pHead: return temp = self.Build(pHead) root = pHead res = RandomListNode(root.label) result = res result2 = res while root.next: root = root.next newNode = RandomListNode(root.label) result.next = newNode result = result.next for i in temp: result2.random = i result2 = result2.next return res 二叉检索树转换成双向链表题目：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。Input： {10,6,14,4,8,12,16} Output： From left to right are: 4,6,8,10,12,14,16; From right to left are: 16,14,12,10,8,6,4; Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题主要考察的是对数据结构的熟悉程度以及利用深度优先检索的中续遍历来构建双向链表的思路。 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def Convert(self, pRootOfTree): # write code here if not pRootOfTree: return None stack = [] flag = True root = pRootOfTree while root or len(stack) != 0: while root: stack.append(root) root = root.left root = stack.pop() if flag: pRootOfTree = root pre = root flag = False else: pre.right = root root.left = pre pre = root root = root.right return pRootOfTree 整数中1出现的次数题目：求出1-13的整数中1出现的次数,并算出100-1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。Input： 10 Output： 2 Requirement： Time limit = 1s, Space limit = 32768K 思路： 设N = abcde ,其中abcde分别为十进制中各位上的数字。如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100-199，1100-1199,2100-2199，，…，11100-11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100-199，1100-1199,2100-2199，，….，11100-11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100-12113,一共114个，等于低位数字（113）+1。③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100-199,1100-1199，2100-2199，…，11100-11199,12100-12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。 1234567891011121314151617# -*- coding:utf-8 -*-class Solution: def NumberOf1Between1AndN_Solution(self, n): # write code here ans = 0 temp = 1 cand = n while cand: last = cand % 10 cand = cand // 10 ans += cand * temp if last == 1: ans += n % temp + 1 elif last &gt; 1: ans += temp temp *= 10 return ans 扑克牌顺子题目：LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。Input： [1,3,2,5,4] Output： true Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题比起正向思考，反向考虑其矛盾点更为明智。首先需要组成顺子必须保证有5张牌，其次如果5张牌有王，就必须保证除了王之外的数相差不超过5。同时不能有重复的出现。 12345678910111213141516171819202122232425# -*- coding:utf-8 -*-class Solution: def is_same(self, s, i, k): for i in range(i, k-1): temp = s[i] for j in range(i+1, k): if s[j] == temp: return True return False def IsContinuous(self, numbers): # write code here if len(numbers) != 5: return False num = sorted(numbers) point = 0 if num[-1] == 0: return False while num[point] == 0: point += 1 if point != len(num) - 1: if self.is_same(num, point, len(num)): return False if num[-1] - num[point] &gt;= 5: return False return True 孩子们的游戏（环中剩下的数）题目：每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)。Input： 5, 3 Output： 3 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题可以使用递归的思路解答，最后的胜利者永远不变，可以不断添加失败者进行递归的动作。另一种解法就是把环当成一个数组，然后根据规则每次删除数组中的相应的元素，最后的元素就是胜利者。 123456789101112# -*- coding:utf-8 -*-class Solution: def LastRemaining_Solution(self, n, m): # write code here if n == 0 or m &lt; 0: return -1 temp = 0 ans = range(n) while len(ans) &gt; 1: temp = (temp + m - 1) % len(ans) ans.pop(temp) return ans[0] 1+2+3+4+…+n题目：求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。Input： 1+2+3 Output： 6 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题的难点在于无法使用判断退出循环。因此可以使用位操作符的特性来进行判断，大于小于作为bool值返回的时候可以作为判断条件。 123456789101112# -*- coding:utf-8 -*-class Solution: def __init__(self): self.sum = 0 def Sum_Solution(self, n): # write code here def func(n): self.sum += n n -= 1 return n &gt; 0 and self.Sum_Solution(n) func(n) return self.sum 构建乘积数组题目：给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。Input： [1,2,3,4,5] Output： [120,60,40,30,24] Requirement： Time limit = 1s, Space limit = 32768K 思路： B数组中的值就是A数组的值去掉i对应的哪一项后的乘积。不能使用除法的情况下，我们就可以使用动态规划，维护一个A*B的二维阵列，其中对应Ai = Bi的值全为1，然后计算整个阵列每行的乘积和即可。 123456789101112# -*- coding:utf-8 -*-class Solution: def multiply(self, A): # write code here B = [1 for _ in range(len(A))] for i in range(1, len(A)): B[i] = B[i - 1] * A[i - 1] temp = 1 for j in range(len(A) - 2, -1, -1): temp *= A[j + 1] B[j] *= temp return B 正则表达式题目：请实现一个函数用来匹配包括’.’和’‘的正则表达式。模式中的字符’.’表示任意一个字符，而’‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”abaca”匹配，但是与”aa.a”和”aba”均不匹配。*Input： “aa”, “aa” Output： true Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题的思路是递归加DFS。需要考虑的情况包括。如果下一个字符是’‘，则当前的值如果是’.’或者与匹配字符相等，则继续判断三种情况：1、匹配字符跳过与当前正则表达式的字符继续匹配；2、跳过正则表达式的当前字符和’‘，继续和匹配字符的当前字符比较；3、跳过正则表达式的当前字符和’‘同时跳过匹配字符的当前字符，匹配双方的下一个字符。这三种情况有一种成立即可继续。另外，如果’‘前面的字符不匹配，则跳过’‘继续匹配。如果下一个字符不是’‘，则匹配当前字符是否为’.’或者匹配字符，如果是跳过双方继续。 123456789101112131415161718# -*- coding:utf-8 -*-class Solution: # s, pattern都是字符串 def match(self, s, pattern): # write code here if len(s) == 0 and len(pattern) == 0: return True if len(s) &gt; 0 and len(pattern) == 0: return False if len(pattern) &gt; 1 and pattern[1] == &apos;*&apos;: if len(s) &gt; 0 and (pattern[0] == &apos;.&apos; or pattern[0] == s[0]): return self.match(s, pattern[2:]) or self.match(s[1:], pattern) or self.match(s[1:], pattern[2:]) else: return self.match(s, pattern[2:]) else: if len(s) &gt; 0 and (pattern[0] == &apos;.&apos; or pattern[0] == s[0]): return self.match(s[1:], pattern[1:]) return False 之字形打印二叉树题目：请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。Input： {8,6,10,5,7,9,11} Output： [[8], [10,6], [5,7,9,11]] Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题的思路就是在二叉树的广度优先检索（BFS）算法的基础上加上了一些变形，维护一个flag来判断当前是顺序打印还是逆序打印。 1234567891011121314151617181920212223242526272829# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def Print(self, pRoot): # write code here if not pRoot: return [] res, temp = [], [] last = pRoot queue = [pRoot] flag = True while queue: cand = queue.pop(0) temp.append(cand.val) if cand.left: queue.append(cand.left) if cand.right: queue.append(cand.right) if cand == last: res.append(temp if flag else temp[::-1]) flag = not flag temp = [] if queue: last = queue[-1] return res 序列化和反序列化二叉树题目：请实现两个函数，分别用来序列化和反序列化二叉树。Input： {8,6,10,5,#,9,11} Output： {8,6,10,5,#,9,11} Requirement： Time limit = 1s, Space limit = 32768K 思路： 序列化二叉树就是用一个数据结构来表示二叉树，最简单的就是利用字符串以’,’区隔树的每一个node，然后用’#’表示空，按照从左到右的顺序编码。解码的时候就是编码的逆序。 123456789101112131415161718192021222324# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def __init__(self): self.idx = -1 def Serialize(self, root): # write code here if not root: return &apos;#&apos; return str(root.val) + &apos;,&apos; + self.Serialize(root.left) + &apos;,&apos; + self.Serialize(root.right) def Deserialize(self, s): # write code here temp = s.split(&apos;,&apos;) self.idx += 1 if temp[self.idx] == &apos;#&apos;: return None root = TreeNode(int(temp[self.idx])) root.left = self.Deserialize(s) root.right = self.Deserialize(s) return root 滚动窗口的最大值题目：给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。Input： [2,3,4,2,6,2,5,1], 3 Output： [4,4,6,6,6,5] Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题的关键信息在于window的size，我们可以维护一个window大小的数组，然后从左往右判断第一个数是否是最大的，如果此时长度已经达到了size的要求，那么pop第一个数，数组右移加入新的成员；或者如果数组中有数比第一个元素大则pop左边元素（目的是保证数组最左边的数永远最大）。 12345678910111213141516171819202122232425# -*- coding:utf-8 -*-class Solution: def is_max(self, deque): temp = deque[0] for j in range(1, len(deque)): if temp &lt;= deque[j]: return True return False def process(self, num, deque, size): while len(deque) &gt; size or self.is_max(deque): deque.pop(0) if len(deque) == 1: break return deque def maxInWindows(self, num, size): # write code here ans = [] if len(num) == 0 or len(num) &lt; size or size == 0: return [] deque = num[:size-1] for i in range(size-1, len(num)): deque.append(num[i]) temp = self.process(num, deque, size) ans.append(temp[0]) return ans 机器人的运动范围题目：地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？Input： 5, 10, 10 Output： 21 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题是一个深度检索和动态规划的结合应用，利用维护一个阵列来动态判断每一个格子的可能性，然后利用深度检索的方式便利空间图形中的所有格子。 123456789101112131415161718192021222324# -*- coding:utf-8 -*-class Solution: def __init__(self): self.count = 0 def move(self, matrix, threshold, rows, cols, i, j): if not (0&lt;=i&lt;rows and 0&lt;=j&lt;cols): return temp = sum(map(int, str(i) + str(j))) if matrix[i][j] == -1 or temp &gt; threshold: matrix[i][j] = -1 return if matrix[i][j] == 1: return matrix[i][j] = 1 self.count += 1 self.move(matrix, threshold, rows, cols, i+1, j) self.move(matrix, threshold, rows, cols, i-1, j) self.move(matrix, threshold, rows, cols, i, j+1) self.move(matrix, threshold, rows, cols, i, j-1) def movingCount(self, threshold, rows, cols): # write code here matrix = [[0 for _ in range(cols)] for _ in range(rows)] self.move(matrix, threshold, rows, cols, 0, 0) return self.count 基本算法和逻辑递归和循环（recursive &amp; recurrent）斐波那契数列题目：大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。（n&lt;=39）Input： 4 Output： 3 Requirement： Time limit = 1s, Space limit = 32768K 思路： 斐波那契数列的性质来看，通过循环或者动态规划可以轻松实现。 1234567891011121314# -*- coding:utf-8 -*-class Solution: def Fibonacci(self, n): # write code here if n &lt;= 0: return 0 ans = 1 pre = 1 while n &gt; 2: temp = ans ans = ans + pre pre = temp n-=1 return ans 普通跳台阶问题题目：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。Input： 4 Output： 5 Requirement： Time limit = 1s, Space limit = 32768K 思路： 斐波那契数列的简单应用。 12345678910111213141516# -*- coding:utf-8 -*-class Solution: def jumpFloor(self, number): # write code here if number == 1: return 1 if number == 2: return 2 a1 = 1 a2 = 2 ans = 0 for i in range(3, number+1): ans = a1 + a2 a1 = a2 a2 = ans return ans 跳台阶进阶问题题目：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。Input： 2 Output： 2 Requirement： Time limit = 1s, Space limit = 32768K 思路： 不同与普通跳台阶问题，状态的转移关系到之前所有的状态累加。因此考虑t+1的状态可以表示成t状态的转移量，即1~t-1所有状态到t状态的可能性加上t到t+1状态的可能性。我们用ans表示X状态下对应的说有可能性，则t+1时刻的ans = t时刻的ans + （1~t-1）时刻的ans，而1~t-1时刻的ans又 = t时刻的ans。因此t+1时刻的ans = 2*t时刻的ans。 12345678# -*- coding:utf-8 -*-class Solution: def jumpFloorII(self, number): # write code here ans = 1 for i in range(2, number + 1): ans += ans return ans 数值的整数次方题目：给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。Input： 2, 3 Output： 8.00000 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题如果用python的pow function可以轻易实现，如果使用循环的方式则属于考察临界条件的连乘问题。 1234567891011121314# -*- coding:utf-8 -*-class Solution: def Power(self, base, exponent): # write code here ans = 1 if base == 0: return 0 temp = exponent if exponent &lt; 0: temp = -exponent while temp != 0: ans *= base temp -= 1 return ans if exponent &gt;= 0 else 1/ans 二叉树的深度题目：输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。Input： {1,2,3,4,5,#,6,#,#,7} Output： 4 Requirement： Time limit = 1s, Space limit = 32768K 思路： 典型的递归问题。 1234567891011121314# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: def TreeDepth(self, pRoot): # write code here if not pRoot: return 0 left = self.TreeDepth(pRoot.left) right = self.TreeDepth(pRoot.right) return max(left+1, right+1) 删除链表中重复的结点题目：在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。Input： {1,2,3,3,4,4,5} Output： {1,2,5} Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题可以使用递归的思路解决，可以使用两个指针分别遍历链表，如果下一个指针和当前指针相同的话则跳过后者。 123456789101112131415161718192021# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def deleteDuplication(self, pHead): # write code here if not pHead or not pHead.next: return pHead temp = pHead.next if temp.val != pHead.val: pHead.next = self.deleteDuplication(temp) else: while pHead.val == temp.val and temp.next: temp = temp.next if temp.val != pHead.val: pHead = self.deleteDuplication(temp) else: return None return pHead 矩阵中的路径题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。Input： “ABCESFCSADEE”, 3, 4, “ABCCED” Output： true Requirement： Time limit = 3s, Space limit = 32768K 思路： 本题是典型的DFS应用在Graph上的例子，在空间二维字符表中进行深度检索，利用动态规划的方式确定答案是否存在。 1234567891011121314151617181920212223242526# -*- coding:utf-8 -*-class Solution: def search(self, matrix, rows, cols, path, i, j): if not path: return True matrix[i*cols + j] = -1 if j+1&lt;cols and matrix[i*cols+j+1] == path[0]: return self.search(matrix, rows, cols, path[1:], i, j+1) elif j-1&gt;=0 and matrix[i*cols+j-1] == path[0]: return self.search(matrix, rows, cols, path[1:], i, j-1) elif i+1&lt;rows and matrix[(i+1)*cols+j] == path[0]: return self.search(matrix, rows, cols, path[1:], i+1, j) elif i-1&gt;=0 and matrix[(i-1)*cols+j] == path[0]: return self.search(matrix, rows, cols, path[1:], i-1, j) else: return False def hasPath(self, matrix, rows, cols, path): # write code here if not path or not matrix: return False for i in range(rows): for j in range(cols): if matrix[i*cols + j] == path[0]: if self.search(list(matrix), rows, cols, path[1:], i, j): return True return False 查找和排序（search &amp; sort）旋转数组的最小数字题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。Input： [6501,6828,6963,7036,7422,7674,8146,8468,8704,8717,9170,9359,9719,9895,9896,9913,9962,154,293,334,492,1323,1479,1539,1727,1870,1943,2383,2392,2996,3282,3812,3903,4465,4605,4665,4772,4828,5142,5437,5448,5668,5706,5725,6300,6335] Output： 154 Requirement： Time limit = 3s, Space limit = 32768K 思路： 本体的关键条件是已排序数组，因此旋转之后的数组仍存在具有有序性。利用这个规律二分查找转折点就是最小值所在。 12345678910111213141516171819202122232425class Solution &#123;public: int minNumberInRotateArray(vector&lt;int&gt; rotateArray) &#123; if (rotateArray.size() == 0)&#123; return 0; &#125; int first = 0; int last = rotateArray.size()-1; int mid = -1; while (true)&#123; if (last - first == 1)&#123; mid = last; break; &#125; mid = first + (last - first) / 2; if (rotateArray[mid] &lt;= rotateArray[last])&#123; last = mid; &#125; if (rotateArray[mid] &gt;= rotateArray[first])&#123; first = mid; &#125; &#125; return rotateArray[first]; &#125;&#125;; 数组中出现次数超过一半的数题目：数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字，如果不存在则输出0。Input： {1,2,3,2,2,2,5,4,2} Output： 2 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题属于经典题目之一，其解法和思路多种多样，包括最基本的排序取中间值；每次删除2个不同的元素，以及利用两个变数candidate和nTime来动态规划。遍历数组，利用candidate参数记录一个元素，并用nTime参数记录当前该元素出现次数，如果下一个相同则nTime加1，否则减1。直到nTime等于0，candidate替换成下一个出现的元素。 1234567891011121314151617# -*- coding:utf-8 -*-class Solution: def MoreThanHalfNum_Solution(self, numbers): # write code here if not numbers: return 0 if len(numbers) == 1: return numbers[0] numbers = sorted(numbers) n = len(numbers) if n % 2 == 0: if numbers[int(n / 2)] == numbers[int(n / 2) - 1]: return numbers[int(n / 2)] else: if numbers[int(n / 2)] == numbers[int(n / 2) + 1]: return numbers[int(n / 2)] return 0 二叉树中和为某一值的路径题目：输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。Input： {10,5,12,4,7}, 22 Output： [[10,5,7],[10,12]] Requirement： Time limit = 1s, Space limit = 32768K 思路： 求和为定值的问题最先想到的应该是利用递归的方式考虑所有可能路径数字组合的DFS问题。只是这次的数据结构换成了二叉树，因此搜索的方向变成了树的深度方向。 12345678910111213141516171819# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: # 返回二维列表，内部每个列表表示找到的路径 def FindPath(self, root, expectNumber): # write code here if not root: return [] if root and not root.left and not root.right and root.val == expectNumber: return [[root.val]] res = [] left = self.FindPath(root.left, expectNumber - root.val) right = self.FindPath(root.right, expectNumber - root.val) for i in left+right: res.append([root.val] + i) return res 数字在排序数组中出现的次数题目：统计一个数字在排序数组中出现的次数。Input： [1,2,3,3,3,3,4,5], 3 Output： 4 Requirement： Time limit = 1s, Space limit = 32768K 思路： 一个典型的利用二分查找的思路。 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-class Solution: def GetNumberOfK(self, data, k): # write code here if len(data) == 0: return 0 left = 0 right = len(data)-1 while left &lt;= right: mid = int(left + (right - left) / 2) if data[mid] == k: first, last = mid, mid if data[first] == data[0]: first = 0 else: while data[first - 1] == k: first -= 1 if data[last] == data[-1]: last = len(data) - 1 else: while data[last + 1] == k: last += 1 return last - first + 1 elif data[mid] &gt; k: right = mid - 1 else: left = mid + 1 return 0 和为定值的连续正数序列题目：小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!Input： 3 Output： [[1,2]] Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题可以使用双指针的思路解决。一大一小两个指针分别位移，终止条件为小指针大于总数的一半（两个数都大于一半和一定超过总数）。因为是连续的，因此如果大小指针和小于总数，只要把大指针加1继续扩大和就行，同时当前总数加上新的值。如果等于总数，则输出小指针到大指针之间的所有数。如果当前总数大于总数，则小指针加1，同时当前总数减去新的值。 1234567891011121314151617181920212223# -*- coding:utf-8 -*-class Solution: def FindContinuousSequence(self, tsum): # write code here if tsum &lt; 3: return [] small = 1 big = 2 ans = [] cur = small + big stop = int((1 + tsum) / 2) while small &lt; stop: if tsum == cur: ans.append(list(range(small, big+1))) big += 1 cur += big elif tsum &gt; cur: big += 1 cur += big else: cur -= small small += 1 return ans 和为定制的两个数题目：输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。Input： [1,2,4,7,11,15], 15 Output： [4,11] Requirement： Time limit = 1s, Space limit = 32768K 思路： 因为数组为递增排序的数组，因此考虑使用大小指针进行解答。另外需要判断输出的多样性，需要对所有结果进行乘积的比较。 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-class Solution: def FindNumbersWithSum(self, array, tsum): # write code here if len(array) == 0: return [] if len(array) == 1: return array[0] left = 0 right = len(array) - 1 ans = [] flag = True while left &lt; right: cur = array[left] + array[right] if tsum == cur: if flag: temp = array[left] * array[right] flag = False ans = [array[left], array[right]] else: if array[left] * array[right] &lt; temp: temp = array[left] * array[right] ans = [array[left], array[right]] left += 1 right -= 1 elif tsum &gt; cur: left += 1 else: right -= 1 return ans 二叉树的分层列印题目：从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。Input： {8,6,10,5,7,9,11} Output： [[8],[6,10],[5,7,9,11]] Requirement： Time limit = 1s, Space limit = 32768K 思路： 二叉树的分层打印是经典算法之一，其主要思想是在传统的BFS算法基础上维护两个变量来判断换行的条件。 123456789101112131415161718192021222324252627282930# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: # 返回二维列表[[1,2],[4,5]] def Print(self, pRoot): # write code here if not pRoot: return [] queue = [pRoot] last = pRoot nlast = pRoot res, cand = [], [] while len(queue) != 0: temp = queue.pop(0) cand.append(temp.val) if temp.left: queue.append(temp.left) nlast = temp.left if temp.right: queue.append(temp.right) nlast = temp.right if last == temp: last = nlast res.append(cand) cand = [] return res 二叉检索树的第k大节点题目：给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \\ 3 7 /\\ /\\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。Input： {5,3,7,2,4,6,8} Output： 4 Requirement： Time limit = 1s, Space limit = 32768K 思路： 本题利用了二叉检索树的性质，就是左子树的节点小于根节点小于右子树的节点。根据这个规律利用中序遍历的方式可以得到排序后的节点数组。 123456789101112131415161718192021# -*- coding:utf-8 -*-# class TreeNode:# def __init__(self, x):# self.val = x# self.left = None# self.right = Noneclass Solution: # 返回对应节点TreeNode def middle_traversal(self, root, ans): if not root: return self.middle_traversal(root.left, ans) ans.append(root) self.middle_traversal(root.right, ans) def KthNode(self, pRoot, k): # write code here ans = [] self.middle_traversal(pRoot, ans) if k &lt;= 0 or len(ans) &lt; k: return None return ans[k-1] 位运算二进制中1的个数题目：输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。Input： 6 Output： 2 Requirement： Time limit = 1s, Space limit = 32768K 思路： 看到二进制问题首先想到的应该是位运算，将数字n右移一位的结果和1作and位运算，就可以知道当前位是否为1。 12345# -*- coding:utf-8 -*-class Solution: def NumberOf1(self, n): # write code here return sum([(n &gt;&gt; a &amp; 1) for a in range(32)]) 不用加减乘除做加法题目：写一个函数，求两个整数之和，要求在函数体内不得使用+、-、、/四则运算符号。*Input： 4, 5 Output： 9 Requirement： Time limit = 1s, Space limit = 32768K 思路： 经典的位运算运用，两个数的加法等于两数的xor加上2*两书的and。 12345# -*- coding:utf-8 -*-class Solution: def Add(self, num1, num2): # write code here return (num1 ^ num2) + ((num1 &amp; num2) &lt;&lt; 1)","categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]},{"title":"New GANs(对抗生成网络)","slug":"GAN","date":"2017-10-17T15:55:32.000Z","updated":"2017-11-30T12:06:13.437Z","comments":true,"path":"2017/10/17/GAN/","link":"","permalink":"http://yoursite.com/2017/10/17/GAN/","excerpt":"","text":"介绍（Introduction）当今AI时代在人工智慧领域取得许多伟大的突破，其中机器学习与深度学习等计算机算法的崛起更是带来了一波又一波的浪潮。如今的深度学习模型已经数不胜数，而Generative Adversarial Network就是其中耀眼的一部分。在Quora上Facebook的AI研究团队主任Yann LeCun说了这样一句话：“Adversarial training is the coolest thing since sliced bread.” 说起GAN的种类，可谓是层出不穷：https://github.com/hindupuravinash/the-gan-zoo 在训练GAN网络的同时也存在许多Tricks:https://github.com/soumith/ganhacks 用途（Usage） Drawinghttps://zhuanlan.zhihu.com/p/24767059 Writing Poems 主要思想（Basic Idea）GAN的本质和大多数的神经网络模型一样,都是通过一系列Function的变化来拟合输入和输出的关系。GAN内部可以分为两个部分：1、Generator 2、Discriminator ，顾名思义Generator的职责就是根据输入的Vector中所隐含的Feature信息来生成结果所需要的形式（如图片或文字等）。 生成器（Generator） Input : Vector Hidden : NN or Function Output : Image or Text … Generator的输入为一个固定维度的Vector，经过隐藏层的变化之后得到相应的输出。而这个隐藏层内部可以是一个神经网络（Neural Network） 或者是一个 方法（Function）。 如图所示，Input端的Vector中不同的Feature会有不同的含义，而它们都决定了最终结果输出时候所具有的某个特征（Each dimension of input vector represents some characteristics）。只是这个特征被计算机量化成了一个人为无法辨识的数字罢了。只要能够掌握这些Features所代表的特征含义，我们就能够根据自己的意愿来调整结果的形态了。 Tips： 我们可以通过改变特征值来改变特征在结果中的表现。这个侧面说明了特征feature在数值上是连续的。只有当信号在一定区间范围内是连续的分布时，我们才能根据自己的意愿去调整特征的表象。 判别器（Discriminator） Input : Image or Text … Hidden : NN or Function Output : Scalar (Always normalize to 0~1) Discriminator的结构和Generator类似，只是它的输入转而变成了Generator所产生的输出而已。输入同样经过一系列隐藏层（NN或Function）得到相应的结果，而结果是一个Scalar，表示对输入的评价（Larger value means real, smaller value means fake）。 GAN网络(GAN Network)GAN的工作原理就是依靠生成器和判别器的对抗来让彼此变得更强，一个类似进化论的概念。 以图中的例子来说：生成器不断产生不同的图片，然后由初代的判别器判断图片的好坏，直到能够符合第一代的判别器的要求。这时判别器已经没有能力再去打击生成器说它不够强大了，而这个情况并不是判别器想要看到的，于是它只能通过利用Real Images来训练我们的判别网络，使之进化到L2，而此时生成器也需要继续改变才能适应新的判别器的判别方式。就这样一方越来越好，一方越来越严格，两个模型都在不断变得更强（This is where the term “adversarial” comes from）。 为什么需要GAN（Why GAN）了解了GAN的运作机制后，很多人可能会有这样一些疑问： Why generator cannot learn by itself Question1 ： 既然生成器能够生成物件，那么为什么生成器不自己学习那些Real images呢？ 第一个问题是： 我们的Generator是从随机的code信息中生成相应的物件（object），但是这些code又从何而来呢？ 我们可以借助Auto-Encoding的方式来帮助找寻code。利用encoder和decoder的联合作用，就能够利用已知的数据产生数据表示向量，也就是我们的code。 第二个问题是： 我们已经解决了code的来源问题，那么针对code中不同的Feature我们虽然能够准确辨识，但是对于结果的Feature Representation而言都太过绝对了。一个值表示一个特征，如果我们想要的特征不在这些Code向量的表示范围内，应该如何改变它们呢？ 这个时候直觉的做法应该是找两个最接近这个特征的其他特征，然后通过加权组合来建构新的特征。而这种方式可以通过VAE来实现： Variational Auto-encoder通过将Auto-encoder中encoder生成的code向量进行维度的拆分。利用一部分特征维度来进行分布扩散，最后和剩下的保留维度特征进行加总得到一个新的code向量。 为什么要这么做呢？它的结果又会对Feature Representation造成哪些影响呢？ 我们可以通过下面这种图来理解： 传统的Auto-encoder让我们每一个Feature都能够对应结果产生的某一个特定的Feature Representation，但是相对的浮动范围却很有限（相当于一个个离散的点）。如果Feature的向量和真实的向量存在些许偏差，产生的code将无法表示成为特定的Representation。而VAE将某些特征向量的分布进行了拓展，使得原本离散的点在一定范围内连续了起来。这样即使code的特征向量存在偏差，还是能够运用这些偏差进行调试。此外最关键的一点，如果让两个向量的特征拓展后存在交集，那么交集上的特征将具有两个特征的加权组合结果。 1Vector -&gt; Encoder -&gt; Low dimension code + Noise -&gt; decoder -&gt; Vector 那么回归问题，既然这些问题都解决了，还存在什么使得GAN的Generator不能自己训练呢？ 那么就是所谓的第三个问题了： 原来，如果直接训练我们的神经网络让他来自行判断并产生objects，势必会存在这样的问题——结果越像训练资料越好（这是SGD的想法）。 图中上半部分由于改变了一个新的像素点，因此误差error = 1，神经网络觉得是比较好的结果，但是在人为看来却不再是2这个数字了；相对的下半部分结果多了6个像素点error = 6，神经网络觉得它不够优秀，需要重新训练，但是在人为的角度却是ok的。 导致这种问题的原因在于，我们的神经网络输出层往往是根据结果的类别所建立的one-hot vector，而这就使得结果的层级之间处于相对平行的状态，层内的neuron之间无法相互传递信息所导致的： neuron之间无法沟通就会使得输出结果无法掌握全局的最优情况。 上图是Generator产生的two-dimension的one-hot vector。从结果可以看出，在X2的坐标轴上，蓝点的分布十分散乱，这是因为神经网络在考虑输出的时候，负责输出X2结果的neuron没有考虑X1的分布情况；相对的X1的情况也是一样。 因此，我们迫切需要一个能够将输出结果进行统整的结构，而最适合的结构就是神经网络了。因此我们引入了Discriminator来整合Generator的输出结果。 Why discriminator don’t generate object itself Question2 ： 既然判别器能够学习什么样的物件是好的物件，那为什么判别器不自己生成物件呢？ 判别器在训练过程中，我们通过Real Data作为输入来让它能够识别好的物件： 但是这种训练只能让模型拟合好的例子，对于不好的例子随着训练的进行模型会一直降低它们的分数（Scalar），到最后模型就成为了一个二分类器了（只有0和1），显然这个不是我们想要的结果。 如何选择negative examples呢？ 我们不能够选择那些距离real sample很远的examples作为反面例子，而是需要选择尽可能接近的作为反面教材，因为只有这样模型才能学到细致的区分特性。 我们还需要给我们的模型一些反面的训练数据，好让它能够预测scalar值介于0和1之间的情况从而进行SGD的动态更新。 总而言之就是判别器比起生成器无法保证每次产生的结果都能够用在提升模型效能，特别是在模型的结构是“Deep”的时候。另一个重要的一点就是我们可以通过Argmax函数确定好的模型，但是却 无法判断哪些生成的图片是不好的（Difficult to recognize the negative sampling） 。(因为不够灵活，不符合训练资料的很难判定为好的图片) How discriminator and generator interact Question3 ： 判别器和生成器之间是如何互动的呢？ GAN神经网络被广泛应用在Structured Learning领域中，而这种机器学习方式的可靠指出在于它能够适应更加复杂的环境。对于One-shot、Zero-shot Learning的问题上，传统的机器学习分类模式讲究的是利用监督式学习的方法用大量例子来拟合网络结构。而Structured Learning除了能够拟合那些带有Label的数据外，还能够在输出范围较大的时候主动去尝试拟合那些模型从未处理过的数据类别。从而创造出全新的类别成员，因此该学习方式也要求模型的结构更加智能。 利用Structured Learning的这些特性，我们就能够将两个神经网络结合进行训练，让他们彼此竞争相互学习，最后双双得到提升。 General Algorithm 在训练两个网络的时候，我们通过一些positive examples和由Generator随机生成的negative examples来作为训练数据。在每个迭代中，利用positive examples训练Discriminator，将数据标记为1。然后将Generator生成的negative examples标记成0，利用Gradient Ascent的方式提升GAN网络的最大似然结果（argmax）。 Gradient Ascent是用来提高Generator产生结果的最大似然分数（scalar），如果评估标准换成计算Discriminator的反馈和Generator生成结果之间的误差时，则用的是Gradient Descent。 如何提升GAN的效能（How to improve GAN）了解了GAN的用途之后，我们就要开始了解如何才能提升GAN的效能，GAN的种类有很多，不同的GAN网络具有自己独特的功能。但是在训练过程中仍然有一些细节是共通的。 Binary classifier as Discriminator训练效果的好坏只是评估模型的学习能力如何，关键还是要看在实战（Testing）中的表现。为了能让模型更灵活而不仅仅是依赖于训练资料，我们要防止过拟合的出现。 那么防止过拟合的方法又可以有哪些呢？ Least Square GAN（LSGAN）首先想到的应该就是用线性的方法取代传统的非线性模型，用简化边缘区分度的方式来防止过拟合的出现。而将传统二分类的Sigmoid function换成Linear的方式就是LSGAN的做法，即利用最小二乘法拟合一条直线来对样本进行分类。 Wasserstein GAN（WGAN）既然Discriminator是将real data的结果当成1，而来自Generator的结果当成0，那么就必然希望real data训练出来的分数越大越好，Generator产生结果的分数越小越好。 Original WGAN的做法势必会带来一些问题： Generator的学习过程是有一定的幅度的，根据Shrinkage的想法每次走一小步的结果去逼近最终答案比起每次走一大步去逼近更容易防止过拟合。因此我们要求Discirminator的分类曲线的区分度需要满足1-Lipschitz function（利普希茨函数）。 对优越值的无限优化会导致模型无法收敛。 过大的误差反而会增大Generator的学习负担，入不敷出。因此我们会选择设定一个阈值，当超过这个阈值的时候我们就利用Clipping的方式将值重置为阈值。这就是Improved WGAN模型的思想。 Lipschitz function(利普希茨函数)该函数要求函数满足算子： 而1-Lipschitz 就是当K=1时的函数。从函数关系式不难看出需要满足这个的条件就是在任意时刻函数的斜率不能高于1。 Sentence Generation(Real sentence V.S. WGAN)我们用one-hot vector表示句子： Real sentence: Generator: 可以看出利用三角函数进行分类的WGAN在句子生成上能够做到比较好的效果。 Loss-sensitive GAN(LSGAN)传统的WGAN会无限提升优质物件的scalar并且降低不理想物件的scalar值，这样训练的结果会让模型变得异常严格，难以客观评估。因此Loss-sensitive GAN就提出了利用分布式拟合的方法一步步逼近最终的结果： 我们可以先定义一个“好”的标准，并把生成器的结果编辑为“不好”。利用每一次训练慢慢减小这两者之间的差距。然后再将原先“好”的标准定义为“不好”，把更接近real data的图片定义为“好”，如此一点点进步。 利用LSGAN训练需要保证两极端值不能无限增长和下降，因此需要辅助以Improved WGAN或者Energy-based GAN作为Discriminator的训练瞄准。 Energy-based GAN(EBGAN)如果一个物件足够优秀并且特征明确，我们就一定能够通过autoencoder的方式提取code特性。Energy-based GAN的Discriminator正式利用了autoencoder的方式进行训练的。 我们的目的是要最大化结果scalar X，从而使误差为0。与WGAN不同的是，利用autoencoder训练的Discriminator会尽可能让优化区间在一个有限的区间内增长。对于下降的趋势不需要太过强烈，同样通过clipping的方式进行修剪： EBGAN的训练过程中，我们会分成两个部分，最大化Real object，和最小化Gen object。而我们设置一个region来限制对gen的惩罚，因为惩罚远比reconstruct要容易，而因为这个限制，我们的模型最后只能通过提高Real object的值来更新参数。 如此一来通过Gen区间不断向Real Data移动，最终得到一个有限的区间就是所谓的“优秀区间”。为了避免区间之间的过度太剧烈，同样能够让评估曲线满足Lipschitz function的条件。 如何评估GAN的结果好坏（Evaluation）对于模型结果的评估，通常利用连个指标来区分，其中一个就是Likelihood，而另一个是Quality。 Likelihood顾名思义就是生成的Object和Real Data特征分布的相似程度。 Quality则是指生成的Object中优秀样本的多少，无需和Real Data完全相似，而是关注训练样本本身是否优秀。 如下列举两种极端条件： 如上图所示，生成样本和评估样本结果的相似度为0，但是其样本本身的质量OK。也就是生成器完全没有学习特征的匹配，而是尽可能提升结果的质量。 相对而言对于模型训练相似度高的模型，如果换一种新的样本主题（不同的特征组合），那么结果就会急速下降。也就是模型本身过于拟合那些特征的分布，而忽略了灵活变通的能力。 有了上面两个例子，我们所要得到的就是介于两者之间，既能够一定程度上还原样本的特征分布，又能产生不错的结果的模型。 为什么GAN很难训练我们的generator能够产生一个范围作为它自身认为的正确的范围，然后通过和正确结果的范围误差来缩小距离（likelihood）。如下图所示： 但是generator无法计算两者之间的差距，因此需要Discriminator来判断两者是否相似，然后通过不同的GAN模型来达成不同的判别器的目的，用来以不同的方式评估范围的差距，然后更新范围。因此不同的GAN就是用不同的方法来实作error的计算。panelty的不同会让两者形状更新不同，谁包含谁范围会不一样大。 那么GAN的训练究竟有那些难点呢？ 选择一个合适的结构来表示我们的feature是十分重要的，因为这个关系到optimizer对结果优化时候计算误差的标准。不同的标准带来的结果也不一样： Jensen–Shannon divergence（JSD） JSD利用传统的KL散度（Kullback–Leibler divergence）来衡量两个几率分布之间的差异性。因而也被称作information radius (IRad) 或 total divergence to the average。 由图中可以看出：JS计算相似度的时候关注的是数值本身的差异性，而忽略了数值之间的相对距离因素。所以如果使用JSD进行评估的话，会导致样本训练过程中无法判断模型训练趋势的好坏。 Earth Mover’s Distance（EMD） EMD与JSD都是评估两个几率分布的差异性，不同的是EMD通过region D计算两个样本之间的相对距离，从而反应从一个样本转换到另一个样本的cost。这种评估方式无意可以让训练的reward变得清晰。 Conditional GAN条件生成模型顾名思义就是能够按照我们设定的条件参数来动态生成一些相关的物件特征的模型。 如上图所示，我们输入的特征给Generator的Noise不再只是一连串毫无关联的特征向量，而是含有一些人为标记的条件参数。 要实现Conditional Generation需要具备一些要求。 Modifying Input Code要想让生成器产生的资料具有人为规定的特定特征表现，最直观的思维就是理解Input Code中每一个变量对应的含义，然后有选择性地改变它们。为此就衍生出了所谓的InfoGAN。 InfoGAN我们通过可视化模型特征向量可以在维度空间中构建特征的表示（Representation）。我们理想中的特征往往是均匀分布的，然而事实真是如此吗？ 事实上特征的分布比我们想象的还要杂乱，并不容易发现其中的关联性。例如改变了一个特征对结果没有变化，而改变两个特征结果却发生了变化，然而单独改变其中一者又会是另外一种结果。因此对于这些众多的特征组合，我们应该如何发现其中有用的信息呢？ 通过训练一个decoder来对特征进行压缩，其结果就是生成能够有效还原物件本身的特征集合（Code）。如图所示：Z的特征包括了有用的c和没用的特征Z’，通过autoencoder的方式能够利用X重新生成X。而训练的过程中，我们的classifier得到的中间产物（hidden layer output）就包含了我们所要的特征集合（Code）。通过共享decoder和Discriminator input part的参数，我们就能够完美的将X的特征毫无泄漏地输入Discriminator中。 AutoEncoder还可以用来解决特征消失和模型缺口的问题（Mode Collapse） 如图所示，我们模型在训练过程中会根据自身参数选择特征，而如果对特征的前处理不够完整，模型可能会遗漏掉一些重要的特征，这个过程就被称为“Missing Mode”。而为了避免这种问题，我们就可以使用infoGAN的方式来对特征进行前处理。 Controlling By Input ObjectsInput Data的不同种类也会对训练模型产生不同程度的影响。一般的Input可以分为3个类别：Paired data、Unpaired data、Unsupervised。 Paired Data传统的监督式学习就是使用了Paired Data，一个pair包含了input和label两个部分。以依照描述生成图片为例： 如果输入包括了input：Description 和 label：image。这时候Traditional Supervised Learning就会通过训练学习文字和图片之间的对应关系。 Traditional Supervised Neural Network通过设定输入为一段描述，输出为一张对应的图片。通过梯度下降的方式拟合描述的文字和图片之间的权重。 测试时同样输入一段描述，根据权重生成图片。而这个图片往往是所有满足该描述的图片的加权平均结果，因此会是一个相对模糊的结果（Blurry Result）。 GAN的方式不同与传统的监督式神经网络拟合描述和图片，而是利用生成器生成一个分布表示描述下所有可能图片的出现条件。然后用判别器判断新的描述是否落在分布的合理位置。 如果输入包括Image和Distribution，则我们的判别器不单单是判断图片产生的好不好，还会挖掘描述和图片之间的关联程度，依照关联度判断是否输出相应的图片。 如上图所示，利用条件分布来表示图片和描述是GAN的一个优势所在。不同与Traditional Supervised Learning只是单纯建立描述到图片的映射关系，GAN网络还能判断从图片到描述的关联程度。我们还可以将判别器产生的结果加入训练资料来完善分布曲线。 Unpaired Data除了成对存在的Paired Data之外，还存在一些原本只有单独出现的数据，通过对数据本身进行一些改变而生成另一组数据，这样的数据在原先的训练集中并不存在（没有label），因此称之为Unpaired Data。 以图片的风格转换为例： 上图中展示了两种不同风格的图片，每种图片具有自己的Datasets，我们需要利用这些data将Domain X的图片转换成Domain Y的图片。 如果按照GAN的训练思路来看，我们可能很容易想到下面的训练方式： 通过Generator训练生成随机的图片（即随意改变原先图片的像素值）。然后通过Discriminator来判断生成的图片和Domain Y图片的相似程度。但是这样的方式存在一个很大的问题： 在判别器的作用下，为了让判别器觉得产生的图片好，因此生成器可能选择完全无视Input的图片，只需要致力于生成带有特定Feature的Output，这样就会偏离我们的目的。为了解决这个问题，我们引入了Cycle GAN的概念。 Cycle GAN在处理Unpaired Data的时候，我们需要注意让生成器不会完全放弃生成器原本输入的信息，那么如何锁住一个输入信息的Feature呢？ AutoEncoder应该是一个绝佳的选择，能够通过建立AutoEncoder的网络来提取和压缩Generator的Input Data中潜在的Feature。 有了AutoEncoder的限制和Discriminator的辅助我们就能够对生成的中间产物进行scalar的计算了。但这种判断方式也要求两个Domain的feature不能相差太大。 Unsupervised我们只有一堆物件（如图片），却没有图片的Label，因此我们利用所有图片的Features来对Input进行Embedding(Feature Embedding)。此时我们在组合Feature的时候，不需要将两个Feature进行直接的组合，而是在Embedding的Code中寻找Vector相似的那个Output作为新的Output。 Feature Extraction有了输入资料和模型架构，剩下的就是需要让输入的资料能够表示成模型能够识别和方便处理的形态了。而这个所谓的形态就是资料feature的表示和提取。 Domain Independent Feature在使用神经网络训练和识别不同Domain的Feature时，神经元除了需要学习物件本身的特征之外，还需要区分不同的Domain。使用Traditional Neural Network拟合Training Data的同时，网络也会记住Training Data的Domain Feature，这样在预测Testing Data的时候一定会产生很大的问题。（问题本质：Training Data和Testing Data之间存在本质区别的Domain Feature） Domain-Adversarial Training如果使用Training Data Domain Feature来预测Testing Data Domain Feature势必会有很大的误差，因此我们除了训练Label本身的特征，还需要训练Domain Feature的差异性。 如上图所示：为了解决Domian依赖的问题，我们需要训练三个不同的网络来组合成一个总体的大网络结构。这个大网络中的训练目的各有些许不同，Feature Extractor的结果会极力接近Label predictor(Minimize Label Loss)，同时排斥Domain classifier(Maximize Domain Loss)。 要实现排斥Domain Label的结果，我们需要对Domain classifier的反馈进行一个负向的更新，这样就能够让Domain的Information完全消失，摆脱Domain的束缚。 Improving Auto-encoderAuto-encoder在对Generator的训练过程中的特征降维以及保持特征本质特征等方面做出了极大的贡献。如何应用Auto-encoder也成为了GAN的一个重要过程。 VAE-GAN之前提到的利用VAE不仅能保存物件特征，还能够通过扩散特征的表示范围来产生新的特征。而利用这样的方法能够有效提升Generator的效能。 BiGAN与VAE相似的BiGAN network利用一个双向的网络结构来进行训练。 Encoder输入为real data，输出为固定Dimension的code z。而Decoder利用这个code z重新还原data的模样，成为generated data。实际上就是将AutoEncoder网络拆分开来训练。利用Discriminator来辅助两个网络的训练，解决AutoEncoder中Encoder和Decoder无法分开训练的问题。 这个时候对于Encoder而言，其思想就相当于GAN网络中的Discriminator，通过真实资料提取信息，从而尽可能地学习原始资料的全部特征分布。因此为了提高Encoder的编码能力，我们需要让Discriminator尽可能降低Image x的scalar同时提高code z的scalar。通俗的理解也就是尽可能降低图片可以提供特征的条件，在这种严苛的条件下训练Encoder能够提取到尽可能高scalar的code z。相反，对于Decoder而言，则其思想就相当于GAN网络中的Generator，通过模糊的特征杂讯（noise）来生成物件。因此为了提高Decoder的解码能力，我们就需要让Discriminator尽可能提高Image x的scalar，同时降低code z的scalar。通俗理解为我们需要让结果达到一个高scalar的分数，同时要让我们的模型尽可能在最严苛的环境（code z的scalar很小，可以理解为杂讯很多）下训练。 GAN Examples当今的GAN network被广泛应用于图片的生成和Dataset的产生。 Anime Face GenerationExample Code: https://github.com/mattya/chainer-DCGAN https://zhuanlan.zhihu.com/p/24767059 https://github.com/jayleicn/animeGAN Dataset Collection: http://konachan.net/post/show/239400/aikatsu-clouds-flowers-hikami_sumire-hiten_goane_r https://drive.google.com/open?id=0BwJmB7alR-AvMHEtczZZN0EtdzQ Text-to-image: https://github.com/paarthneekhara/text-to-image Decision Making and ControlWidely Studies: Gym: https://gym.openai.com/ Universe: https://openai.com/blog/universe/ 无论是GAN还是普通的神经网络结构，在解决特定问题的过程中都离不开决策和调控的平衡问题。AI的精髓在与自我调控和学习，因此神经网络结构不同，也会导致机器认知和判断决策的不同： Self-driving car Dialogue System Go playing What do we miss?当Decision making的议题出现之后，紧跟着的一个棘手的问题就是：Machine dosen’t know the influence of each action.而这个问题的根本原因就在于模型所有的行为都取决于它能够接收到的资讯，对于那些具有延迟性或者没有办法及时反馈的reward就没有办法很好地照顾到。 针对这种情况现有的解决方案： Reinforcement Learning 从环境中获得reward。 Learning by demonstration 从过往经验中学习和总结。 Reinforcement Learning一个好的强化学习模型能够针对环境中的变化做出总结，并试图理解环境的本质。例如Alpha Go综合了Policy-based、Value-based和Model-based等不同模式于一身，这些模式相互协调帮助模型更好地学习环境中的反馈。 首先根据环境得到一个状态S，根据状态再去预测接下来的行为a，如此反复最终达到一个结果状态结束。 以上过程中我们的每一个时刻表示为（S，a）的pair，所以全局的Actor、Environment信息就能够表示成： 而根据S和推导出来的a，我们就能够得到一个环境的反馈（可能不是即时的），最终的Reward可以表示成： 最后，最大化reward就是我们模型所到达到的目标了。 对于Reward的计算有一些值得注意的地方： 以上是Reward进行反向传递时候的误差，因为一般情况下，可能会出现无论如何改变参数，决策的行为会一直被判断成positive的情况（环境很温和），这种情况往往会让模型产生极端分化。因此我们通常会加入一个Baseline来减缓这种太过温和的环境反馈，让模型从一个相对优越的起点开始学习，降低学习成本。 Neural network除了强化学习的方式以外，神经网络也能够作为行为预测的模型。利用NN来predict最终结果所要表示行为的one-hot vector，利用argmax来选择几率最大的行为输出也是一种Actor的决策方式。 与Reinforcement Learning结构相似的，神经网络只是将Actor的决策交给神经元来计算得到。Actor模型需要对环境进行编码，然后再利用权重计算得到相应的行为分数，取最大的行为进行输出。 然而传统的神经网络利用SGD等梯度下降的方式进行反向传递更新参数，而在环境中的决策问题往往是不可微分的，行为与行为之间属于离散分布，这个时候通常会借助强化学习的Policy Gradient来帮助输出的决策。 RNN Generation with GANGAN在自然语言生成方面的应用： Sentence Generation 具体操作流程如下： Initialize generator G and discriminator D In each iteration: Sample real sentences x from datasets Generate sentences x’ by G Update D to increase D(x) and decrease D(x’) Update G such that increase scalar 到了这里就会有一个关键的问题出现了：在句子生成的序列化决策行为上，我们可以对GAN网络做反向传递吗？ 答案是No！因为vocabulary字典序列的不连续性（Discrete），反向传递改变的细微变化无法改变原先的结果。 因此我们会使用输出为固定行为的Policy Gradient来取代输出为一个区间范围取值的传统神经网络模型。以一个例子来看：如果我的结果是token，而传统神经网络通过预测token’的取值来逼近结果，然而如果预测的token不在字典集中就会回传UNK，因为token的数值能够进行梯度下降的运算。但是Policy Gradient是通过计算每一个token出现的概率来选择合适的token输出，因此更新的参数也只是token出现的概率，避免了梯度下降计算的误差出现的UNK现象。（NN：label=1，prediction_sequence = [0.2, 0.4, 0.5, 0.8, 0.9, 0.95, 1.0]；PG：label=1，prediction_sequence = [0, 0, 1, 0, 1, 1, 1]） SeqGAN Neural Network + GAN + Reinforcement learning = SeqGAN SeqGAN Consider the discriminator as reward function Consider the output of discriminator as total reward Update generator to increase discriminator to get maximum total reward Generator is a neural network updated with reinforcement learning GAN在自然语言处理上出现的问题： 问题一： 我们知道，GAN在自然语言处理方面仍无法得到让人满意的结果，其原因主要可分为三类：首先，GAN主要应用于连续的数据类型上，在离散数据例如文字方面的问题上并不适用。最初的GANs仅仅定义在实数领域上，通过判别器输出的误差反向传递给生成器，利用梯度下降的方式进行优化更新。然而在离散的数据范围内，由于结果是通过sampling的方式取得，因此每一个离散的点微分结果等于零，因此来自判别器的误差无法通过梯度下降的方式进行反向传递更新优化。 如果保留softmax之后的结果作为传入判别器的latent codes反向传递误差，则会让判别器学到许多“作弊”的手段，例如输入的vector的每一项是一个介于0和1之间的数，而最终的结果是只包含一个1其他全是0的one-hot vector，这样的误差会让判别器认为只要存在0和1之外的数，这个生成结果就不算完美，如此一来模型的训练就会陷入瓶颈。 针对上面的问题，通常的方式是采用Reinforcement learning的方式来取代传统的Gradient Descent Optimization。或者使用类似Gumbel-softmax等特助分布函数来取代传统的softmax作为Discriminator的输入。 问题二： GAN在利用RNN等序列化生成模型作为生成器的时候，也会面临因为MLE误差函数所带来的error累积问题。随着句子长度的增加，生成器的训练就容易出现exposure bias的问题，从而让判别器的结果飘忽不定，模型难以优化更新。 问题三： 在生成句子的同时，判别器对生成器产生的反馈是一个全局的作用，也就是说这个标准是针对句子中每一个词都有相同的作用力度。这样的方式会带来一些潜在的问题，迷惑生成模型的更新思路，从而难以判断序列生成过程中每一个步骤的优劣程度，对模型的更新产生影响。 针对这个问题，通常的解决办法是采用Mento-Carlo Search的方式对每一个subsequence进行单独深度扩展，从而评估每一个部分的reward值。 Chat-bot with GAN GAN在聊天机器人的应用和Sentence Generation十分类似，都是应用序列化决策的方式决定句子的生成问题。其主要的注意点如下： Genrator is composed of Encoder and Decoder Using paired or unpaired data to train with conditional GAN Reinforcement learning and attention mechanism are useful for obtaining reward and conmunicating context Actor + Critic Actor通过神经网络预测当下的输出行为，通过TD或MC的方式结合环境因素进行模拟，最后根据Learning Critic来判断行为的reward新型反向更新。 更多介绍 Inverse Reinforcement LearningInverse Reinforcement Learning的思想其实就是跟着大佬走不吃亏！。 在训练过程中我们需要通过一些专家序列（Expert sequence）的行为新型模拟，然后制定相应的reward function，根据这个function一步步优化我们的模型。细节如下： Define a principle Initialize an actor In each iteration The actor interacts with the environment to obtain some trajectories Define a reward function, which makes the trajectories of the teacher better than the actor The actor learns to maximize the reward based on the new reward function Output the reward funciton and the actor learned from the reward function 对比GAN和IRLGAN网络和IRL在结构和功能上具有一定的相似性： GAN通过discriminator的到的scalar来评估Generator的好坏，进而促使Generator以提高scalar为目标不断提升。 IRL的Expert相当于GAN中的Discriminator，Actor则相当于Generator。Reward function反馈给Expert一个较高的分数，而给予Actor一个较低的分数，促使Actor为了提高奖励就不断向Expert靠拢，一步步得到提升。 ReferenceGenerative Adversarial Network Improving Generative Adversarial Network","categories":[],"tags":[{"name":"GAN","slug":"GAN","permalink":"http://yoursite.com/tags/GAN/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://yoursite.com/tags/Deep-Learning/"}]},{"title":"细数生成对抗网络和自然语言处理的那些恩怨情仇","slug":"GANs_in_nlp","date":"2017-10-17T15:55:32.000Z","updated":"2018-07-13T09:42:06.626Z","comments":true,"path":"2017/10/17/GANs_in_nlp/","link":"","permalink":"http://yoursite.com/2017/10/17/GANs_in_nlp/","excerpt":"","text":"文本生成的基础模型（Introduction）在众多NLP的task中，文本生成(Text Generation) 是一种结合了机器学习和自然语言处理等技术层面而衍生出来的应用。他的诞生在一定程度上诠释了当今这些技术的发展水平。例如前不久出现在网络上的Drumpf推文产生器。 文本生成分类文本生成的应用大体上可以分为以下几类： 机器翻译（machine translation） 问答系统（Question-Answering System） 对话生成（dialogue generation） 核心模型介绍使用在文本生成的模型不唯一，比较常用的是循环神经网络（RNN），使用的Cell包括了LSTM，GRU等。作为序列生成模型的核心框架，encode-decode framework开始出现在人们的视线范围之内，并在短时间内成为了广为人知的核心模型框架。 类似于编码的原理，通过encoder将一个句子序列x（可以理解为utf-8编码）编码成为数字向量（也可以是矩阵或者Tensor，可以理解为unicode）。之后decoder利用这个编码后的context information将信息还原成为另一个对应的序列y（可以理解为big5编码）。虽然编码的过程是计算机通过改变初始化的超参数改变特征在隐层的映射机理，因此难以探究其具体含义，但是这也正应证了特征的分布是真实存在的（可以通过控制变量的方式探究每一个参数的具体含义）。 对于文字生成的任务，首先最重要的一点就是如何表示文字。我们知道图像是由像素（pixel）组成的，而像素在计算机中是被编码成数字的形式，因此我们可见的颜色图案都是由0和1这些数字构成的。虽然文字本身也被赋予了各自的编码（如utf-8等），但是这些编码却很难被应用在神经网络的参数传递中。通常的做法是建立一个词库字典（vocabulary）涵盖所有可能出现的字，而这些对应的字都会表示成one-hot vector的形式（不是唯一）作为模型的输入。每一次模型都会通过当前输入的字去预测下一个时间点会出现的字最可能是什么，从而一步一步得到完整的句子序列。 而我们往往会选择使用Softmax表示所有最终的结果，通过概率表示每一个字对应的概率值来选取最有可能的候选字作为输出。就这样，模型每次以一组“样本（sample：x）-标签（label：y）”作为训练的资料，通过循环神经网络主导的encoder和decoder将x转换成y。 传统GANs的数学定义和问题（Related Works）GANs顾名思义是由两个模型构成的：1、生成器（Generator） 2、判别器（Discriminator）。其中生成器的目标是产生最接近真实样本的分布，从而骗过判别器的判断。而判别器相反就是尽可能准确地区分出真实样本和生成样本。 损失函数在GANs中对于判别器而言，想要达到相应的目标就应该尽可能把真实样本当成正例，而把生成样本当成反例： 而对于生成器而言其损失函数有两种： 和改进之后的 存在的问题相信喜欢研究GANs的你也经常看到一些这样的说法“判别器训练的越好，生成器的模型就会越不稳定越南收敛”。传统的文字故难表达其中蕴含的奥秘，因此我们来通过数学方式了解一下。（推荐文章：令人拍案叫绝的Wasserstein GAN） 首先通过 可以知道，当判别器达到最优化状态（我们想要的理想收敛状态，处于saddle point梯度为0）时，我们可以得到： 我们对其求梯度（gradient）得到： 化简之后得到： 这个公式中的 P 可以理解为通过x序列得到的y属于真实样本还是生成样本的概率值。当两者相等，则结果是0.5证明模型无法给出判断，因此为欠拟合状态。 如果此时我们将判别器训练的太好，那么生成器的loss就会降不下去（来自loss vanishing的问题）。我们给 加上一项与生成器无关的项（虽然改变了loss，但是却不改变优化生成器的梯度，同时也是判别器损失函数的反），得到： 化简之后得到： 这个式子涉及到的物理意义被称为KL散度（Kullback-Leibler divergence）和JS散度（Jensen-Shannon divergence）两个相似度衡量指标。具体的数学表达式如下： KL divergence JS divergence 将散度的公式代入增加了辅助项后的生成器优化函数，我们可以得到： 现在我们明确了一个道理：那就是在GANs训练过程中，当判别器到达了一个最佳状态的时候，生成器的目标就相当于最小化真实分布和生成分布之间的JS散度。我们越是训练判别器，生成器的损失函数（loss function）就会越接近JS散度的值。 那么这又会引起什么问题呢？我们知道越是减小误差，JS散度就会越小，生成分布就会被带向真实分布。但是假如两个分布本身就存在维度差或者说两个分布本身就没有重合的部分呢？这个问题比较抽象，下面通过一些例子来介绍： 首先介绍一下什么叫做两个分布没有重合的部分呢？维度差有是什么呢？怎么样的分布之间才算得上具有维度差呢？Wasserstein GAN告诉我们当 Pg 和 Pr 的支撑集（support）是高维空间中的低维流形（manifold）时，两者重合的部分的测度（measure）为0。 解释几个专有名词： 支撑集（Support）：函数的非零部分的子集，例如ReLU的支撑集就是0到正无穷，一个概率分布的支撑集就是他所有概率密度非零值得集合。 流形（manifold）：高维空间中的曲线、曲面的概念延伸。当两个分布的本质维度（intrinsic dimension）不同时，他们的自由度（二维的自由度包括长和宽）就会不同。 测度（measure）：高维空间中的长度、面积、体积等测量指标的概念延伸。 打个比方，如果我们要比较一个正方体和一个三角形的相似程度，我们就会陷入一个问题。正方体的维度是3，而三角形的维度是2，相差了“高”这一维度特征。如果把像和不像作为分类问题来看，前者比后者多出了整整一个特征，在三维的分类空间（往往会取最大的维度空间）中他们的重合部分仅仅是一个平面。这也就以为这如果三角形的底边和高都等于正方体的边长，但是我们仍然无法通过某种方法让三角形“逼近”（可以理解为变换）正方体。 在文字生成的任务中，由于GANs的生成器采用从一些杂讯信号中随机抽样组合，再通过类似DNN的全连接层进行维度扩展，从而达到能够在维度空间匹配最终结果的一个输出信号。但是不要忽略了一点，这些生成信号的本质（特征集合）还是停留在原先的杂讯信号的基础上没有改变。换句话说，即使进行了维度提升，但若是全连接层的神经元不足够强大，就没有办法还原所有的特征从而让两个比较的结果处于同一个维度空间中。 其次，从离散的角度分析，对于一个x输入信号可能会有以下几种可能： 第一种情况不存在两个分布的距离这样的说法（因为两个分布本身就不存在），因此对JS散度的计算没有帮助。第二种情况和第三种情况，代入公式可以得到 和 而唯有第四种情况的两个分布才有可能存在交集从而达到减小JS散度的目的。 说完了JS散度在分布呈现不同状态时存在的问题，那么怎么样联想到GANs中呢？可以试想一下，如果现在的 P1 就是 Pr ，而 P2 就是 Pg 。那么当判别器训练到最佳情况的时候， Pg 就会为0（相当于第二种情况），此时JS散度就是一个常数 log2 ，这也就意味着生成器的损失函数对于他本身的超参数的偏微分结果为0——没有梯度！这样一来每一次的对抗学习都会让生成器陷入一个迷茫的状态，也就是梯度的消失（gradient vanishing）。 总结一下，生成器的第一种损失函数是因为在判别器接近最优状态时，生成器的误差就相当于 Pr 和 Pg 的JS散度。而所有的情况都指明了，在这种最优条件下，无论两个分布怎么变换，都会让梯度变成0或者无意义。这样一来GANs训练不稳定的原因也就清楚了。判别器训练得太好，生成器的梯度就会消失，判别器训练得不好，生成器的梯度就会不准确，四处乱跑。只有当判别器训练刚刚好火候的时候，GANs才能平稳地进行对抗训练。 那么既然这种生成器的损失函数存在这样的问题，就以为着我们无法随心所欲地让模型自己朝着收敛的目标前进，势必会对训练模型造成影响。那么如果采用改进后的第二种损失函数呢？ 在论述第一个损失函数的时候我们已经证明了： 我们先对KL散度进行一些调整： 由这个KL散度的启发，可以得到新的损失函数表达式如下： 由于目标是优化生成器，因此计算梯度的项只保留对生成器可微分的项即可。舍弃梯度为0的项之后得到： 相比推到这里，也有很多人能看出这个式子本身存在的一些问题了吧。首先，这个损失函数的目的是要同时最小化生成分布和真实分布的KL散度，又要最大化两个分布的JS散度。但是我们知道这两个散度的物理意义是朝着同一个方向发展的（两者正相关）。所以这样的优化目的显然存在矛盾的地方，从而让我们的生成器训练不稳定。其次，KL散度本身的量化也存在一些问题，原因就是他不是一个对称的衡量单位。 KL散度的问题比较一下 和 可以发现： 当 而 时， ，对 的贡献趋近于0 当 而 时， ，对 的贡献趋近于无穷大。 这些差异意味着什么呢？我们可以这样理解，KL散度对于以上两种方式定义的不同，也就侧面反映了生成器在面对判别器两种不同情况时候给出的判断。首先第一种情况下，错误来自于 “生成器没有办法生成真实的样本” ，这个时候的惩罚比较小（KL散度趋于0）。而第二种错误对应的错误则来自于 “生成器无法生成真实样本（当生成器的模型达到最佳状态的时候，判别器给出的分数仍然很低）” ，这个时候的惩罚是非常大的（KL散度趋于无穷大）。第一种误差让生成模型缺乏多样性，因为模型只是为了尽可能模仿真实样本进行输出。而第二种误差则让生成模型缺乏准确性，因为模型一旦尝试一些不一样的方法便会受到大量的惩罚。这样的权衡之下，模型和人一样是具有惰性的，在一切条件相近的前提下，模型宁可选择那些惩罚小的苟且方式而放弃挺而走险尝试不同的东西。这样一来生成器模型往往会选择接受第一种错误，而让生成的句子千篇一律，这在特征角度被定义为塌陷模式（collapse mode）。 总结经过了上述的介绍和数学推倒，我们可以看到GANs的模型所具备的一些问题和缺陷。其中包括了在最优判别器的时候，生成器往往会出现梯度消失的问题；以及在KL散度的物理意义上来说GANs的优化目标存在一定的矛盾性以及盲目性（collapse mode）。 解决方案关于以上的问题具体可以参考Wasserstein GAN一文，介绍了如何利用新的距离衡量两个分布的关系，从而解决KL散度和JS散度的一些问题。 Wasserstein GAN，那些年我们一起填完的坑我们知道最开始生成器的损失函数面临KL散度和JS散度所带来的问题，而改进之后却又有着矛盾的优化策略。这样对一个模型而言是十分致命的，因此必须有人来填补这个坑，才能让GANs真正进入人们的实现成为一门科学。 Wasserstein GAN对GAN的改进是从替换KL散度进行的，他开创了一种全新的用来计算散度（divergence）的指标——Earth Mover (EM) distance。Wesserstein GAN的散度计算将两个分布看作是两堆土，而目的就是计算将第一堆土堆成第二堆的形状需要搬运的总距离。如下图所示： 左边的那个分布想要达到右边的状态，就必须移动制高点左边的那部分，而距离和量的考量就成为了当前的关键指标。 那么这样的评估方式又有什么好处呢？为什么说他能够解决KL散度和JS散度所带来的问题呢？首先我们先要明确一下问题的本质，从之前的讨论可以看出，KL散度和JS散度在当判别器训练到最佳状态的时候存在的问题就是两个分布的重合部分可忽略或者不存在。这个时候我们得到的生成器的损失函数（是一个常数 log2 ），除非能够让两个分布重合，这个时候才会突然变化成为最优解。这样一来我们的优化就缺少了一个所谓的“演化”过程，换句话说就是我们无法通过损失函数的改变来描述从好到不好的渐变过程，这样对于模型的训练是不利的。而利用Earth Mover distance我们就可以量化每一次更新之后的差异，从而还原这个重要的过程。具体情况如下图： Wasserstein散度能够通过通过不同的距离 d 来反应每一个时刻样本的变化情况。生成器每一次的output能否更加接近真实样本的那些“进步”都能被抓到并传回，这样就保证了对于离散数据的对抗能够持续下去。 传统GANs在NLP上遇到的问题（Motivation）说完了传统的GANs模型本身的问题之后，我们需要进一步了解为什么GANs用在NLP的领域又是另外一片天地。曾经就有人问过，GANs能否被使用在文字生成领域，在Generative Adversarial Networks for Text一文（可见参考文献部分）中GANs的作者Ian Goodfellow就层明确给出了回答。让人心寒的是，作者给出的答案是否认的成分居多，并且还提出了一些理由： 从文中的一些表达例如：“there is no way…”和“no one really knows…”等表达来看，当时的作者对于这一个问题保持着疑问和反对的态度是多么的强烈。 那么首先让我们来看一下这段回文中提到的一个问题，那就是“Discrete numbers（离散数字）”。保留作者的观点可以看出，GANs当初被设计的初衷是定义在真实数据的情况下，通过生成器的到的合成数据都是连续的分布。因此，只有在数据连续的情况下，才有可能通过略微改变合成的数据，而如果是离散的数据，就无法通过改变这些数据来得到新的结果。 这个表达听起来很难get到精髓是什么，因此作者给出了一个形象的例子。如果一张图片，其像素点是1.0，那么改变了这个值成为1.0001之后，就会成为其他的值（在计算机的表现方式中，不同的像素值代表了输出不同的颜色）。而如果输入的是一个文字“penguin”，那么接下来我们就无法用同样的方式进行输出的转换，因为没有人知道“penguin+0.001”之后得到的新的文字会是什么。因为对于自然语言而言，每一个文字都是离散的存在，包括“单词”，“音节”，“字母”等等。尽管有的研究也在尝试将离散的文字之间建立起连续的转换机制，例如：考虑化学物质的性质，假设我们得到了化学式A，B，C并且知道了这些物质的特性，我们就能得到三者的转换关系（D=A-B+C），同样的道理能不能用在文字上呢？我们是否可能设计出类似queen-woman+man=king这样的结果呢？尽管听起来make sense，然而当前的一些数据表示（Data representation）和嵌入方式（Word embedding）都无法完全解决这个问题（即让文字具有连续性和数学意义）。 困扰GANs在NLP上应用的三大强敌即便是短短的发言，我们依然从中看出了GANs在文字生成领域乃至整个NLP应用层面存在着巨大的挑战。然后随着后续研究者们的不断探索，一个振奋人心的消息圣诞生了：那就是我们终于又发现了新的问题！！！下面就让我们来认识一下阻碍GANs在自然语言科学领域发展的“三巨头”： 原始的GANs设计初衷是为了应用在连续的空间数据，而在离散空间中并不能工作。那么什么是离散数据呢？文本就是一个典型的离散数据，所谓的离散，并不是逐字逐词叫做离散，而是分布的不连续特性。这样的解释是不是感觉又绕了回来了？没错，想要了解离散的概念，最简单的就是去理解什么是连续。在计算机内部的资料表示形式中，往往是通过浮点数进行的，而浮点数就是连续的数值。一些连续的分布就是指数据本身的意义就是通过数字表示的：例如图像的基本单位是像素点（pixel），并且这些pixel本身就是一些数字，换句话说数字就是pixel的全部。图像通过矩阵（二维）的形式将这些数字组合起来，就形成了一张图片。因此改变图片的方法无非是改变其中的数字即可。例如左上角的哪一个pixel太红了，就把红色的那个色阶的值减小一些，而输出的数值无论是多少都会有一个对应的颜色来与之对应。 而文字不同，一个句子是被定义为了一个词库的one-hot vector形式（不唯一，但是本质相同），通过类似table的形式索引字典里的每一个字。而引发问题的根本原因就是模型输出的结果都是一个大小和one-hot vector相同的概率分布。而这个分布若想要最终反应成为真实的字，就必须进过一个过程叫做“sampling”，而问题就是出在“sampling”上。我们往往通过softmax得到了一个分布，然后sample出其中最大的那一个维度的值对应的字作为输出。 从上图的例子来看，通常模型的优化方法是通过一些优化函数改变参数的分布，从而观察输出有没有好一点（loss小一些）。但是判别器若是得到sampling之后的结果呢？我们经过参数调整得到的结果是优化后的直接表现。例如：假如倒数第二个字对应最大的0.85并不是我们想要的那个输出，我们就会减小他的值假设成为了0.65，而第三项的0.12才是我们想要的那个字，因此我们扩大他的权重成为0.32，然而经过了sampling之后，呈现在判别器面前的仍然是倒数第二个字。这时候判别器给出的答案一样还是很糟糕，这样一来生成器就会失去训练的方向（可以理解为loss飘忽不定，有可能越优化loss越高）。 也有人因此提出质疑： 既然sampling过程会造成这样的问题，那么不要sampling直接把softmax的结果丢进判别器不就好了？ 不得不说这个确实是一个可行的方法，但是却遭到了模型本身的拒绝。为什么说是“拒绝”呢？其实判别器的训练初衷是为了分辨生成样本和真实样本的差距，那么这个时候如果两个样本的表达方式存在差异（一个是one-hot vector，一个是softmax；一个是one-hot encoder，一个是probability distribution）。这个时候就会出现之前说过的两者的特征维度不重合的现象。在这里这个现象可以理解为模型在经过神经元转换后的latent space中往往存在许多的desert hole（AI技术讲座精选中的术语）。在training的时候，模型往往会因为两者的分布出现差异而故意现在那些不重叠的区域不肯跳出。从而导致模型判别的根基出现问题（模型学习到的判断方式可能就是看输出的分布是不是one-hot vector，如果不是直接over；而不是努力去比较softmax和真实的one-hot vector究竟有多像）。 如下图所示：Comparison of continuous &amp; discrete distributions. (x : θ, y : loss) 左边的连续分布我们总能找到一个loss下降的梯度，从而移动x轴（生成器的超参数）来达到更小的loss，这个过程被称为梯度下降优化（gradient descent）。而相比于离散的数据分布可以看到，独立点之间的优化是无法得到梯度的，因此我们往往会遇到上述提到的问题。 在生成文字的过程中，大多数模型都是基于循环神经网络（Recurrent neural network）模型设计的，这种时序性的模型在隐层表示（latent codes）计算过程中，error往往会随着序列不断累积直到最后。这种方式的另一个根本原因和最大似然估计（Maximum log-likelihood estimate）有关，也被称之为 “Exposure bias”。 在training过程中，我们每一个时刻输入的都会是真实资料对应的值，因此即使出现错误，下一个时刻的输入仍然是正确的。但是在testing的过程中，由于缺乏真实资料的辅助，如果上一个时刻的结果出现错误，我们就会用错误的记过进行下一个时刻的预测，造成错误的累加。 再生成文本序列的过程中，传统的GANs是对整个句子或是更大的序列单位进行评估的。这一点也是非常直观的一个反应，因为我们无法在一个人说完整句话之前就断章取义去推测这句话的好坏。但是在时序生成的过程中，因为loss在句子生成过程中的每一个字产生的时间点都会被计算，因此这个时候的error如何得到就成了一个新的问题。 最直观的想法就是将整句的分数当做每一个部分单独的分数，但是这样的方式会让句子的成分承受相同的代价，不符合我们直观的感觉。因为造成句子不好的原因可能往往来自单独的一些部分，而不是全部。 传承的智慧（Methods）见识到了GANs在文本生成领域的困难重重，是时候来一波强心剂了。尽管来自模型自身和外部环境的压力十分巨大，但是仍然有不少学者费尽心机探索学术的奥秘，挖掘最古老的智慧。 Generating Text via Adversarial Training 论文链接：https://zhegan27.github.io/Papers/textGAN_nips2016_workshop.pdf Key Points：这篇论文是比较早期利用GANs进行文本生成任务的尝试，通过循环神经网络（RNN+LSTM）作为生成器，采用光滑近似（smooth approximation）的优化理论来逼近真实样本分布。 Graph &amp; Algorithm： Feature Matching思路：文章提出的TextGAN模型利用了不同于以往的GANs所使用的优化函数，这种优化的思路基于特征匹配原理（feature matching）。 通过计算生成器输出和真实分布在隐层上特征的差异，从而比较两者的差异，并最终最小化这样的差异。 文章还采用了一个特殊的技巧，就是在判别器进行pre-training的过程中，利用真实的句子难免会让判别器的判断局限在你和那些表达。而如果加入一些十分类似却又略微不同的句子结构，势必会让模型的判断更为灵活。而作者采用了交换真实句子中两个词的位置从而得到新的句子，并利用这些新的样本来帮助判别器进行训练。从量化角度看，模型接触的信息量是相同的，能不能进行判断完全取决于模型对于文字内部关联的把握（如果利用卷积+同样的池化模式得到的结果会相近，采用序列生成模型可能会大不相同）。 论文实验部分提到了在对抗过程中想要让训练稳定进行，生成器的训练频率将会是判别器的5倍。原因是判别器采用了CNN的架构，而生成器采用LSTM，这两者的收敛难度存在一定的差异。 SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient 论文链接：https://arxiv.org/pdf/1609.05473.pdf Key Points：本文利用强化学习的思路，用reward代替gradient来进行前馈训练，避免了GANs无法在离散数据传递梯度的问题。同时利用蒙特卡罗检索（Monte Carlo Search）的方法得到每一个时间点的误差信息。 Graph &amp; Algorithm： Policy Gradient思路：如图所示，左边的部分是判别器（核心是CNN）的优化部分，利用真实资料和生成资料来训练判别器。右边的部分则是生成器（核心是LSTM）的优化部分，利用Monte Carlo的方式得到每一个时刻的reward，并借助policy gradient的强化学习方式进行模型优化更新。 强化学习更新的四个重要的因素包括：状态（state）、行为（action）、策略（policy）和奖励（reward）。在文字生成领域，state就相当于该时刻之前已经存在的序列（之前时刻输出的所有结果组成的sequence），action是当下需要选择生成的句子成分（当前解码后的字或词，也叫token），policy为GANs的生成器模型网络，reward则是GANs的判别器网络输出的概率值（也叫做scalar）。 Monte Carlo Search论文在得到部分序列（intermediate sequences）的奖励上面采用了蒙特卡罗（Monte Carlo）的方式，这样的策略通过多次平行抽样来共同决定当前的序列的可靠性。 当解码到 t 时刻的时候，模型会对后面的 T-t 个timestep采用蒙特卡罗检索出 N 条路径，这些路径经过判别器的结果会通过平均的方式作用在 t 时刻生成的那个token上。每一个序列都会经过几次深度检索得到不同的完整序列，然后这些序列的评分就综合决定了那个固定前缀的分数。作者给出了具体的算法如下： Schedule Sampling论文还参考了一种缓解exposure bias的方法。这种方法通过一个变化门槛值控制模型训练过程的每一个时刻是使用来自真实资料的值还是来自前一个时刻的预测结果，从而在训练的时候就让模型适应各种可能的错误发生。这样的经验在test的过程中就不容易因为一时的错误而让误差累积。 对于强化学习（reinforcement learning）的部分，文章采用了policy gradient的方法重新定义了生成器的目标函数： 求导结果如下： 目标函数告诉我们生成器模型的目的是要尽可能提高生成序列得到的来自判别器的reward分数的期望，这个目标与最初GANs的初衷不矛盾。 对于判别器的部分，论文给出了和原先GANs相同的优化策略： Adversarial Learning for Neural Dialogue Generation 论文链接：https://arxiv.org/pdf/1701.06547.pdf Key Points：这篇论文将对抗学习（adversarial learning）用在开放性对话生成（open-domain dialogue generation）领域。与SeqGAN相同的一点是，文章采用了强化学习的方式取代传统的梯度将GANs应用在离散数据中，借助奖励reward来指导生成器的训练。另外，本文还采用了teacher forcing的方式来辅助生成器的训练，能够让对抗学习的过程更加稳定。 Graph &amp; Algorithm： 思路：因为是开放性对话生成，因此很自然地想到了采用seq2seq来作为生成器的核心模型；另外作者选择了hierarchical encoder而非CNN作为判别器，原因是循环神经网络能够更好地拟合序列的时序特征。但是这个理由需要建立在我们能够控制好判别器的训练幅度，因为之前讨论过过度训练或者训练不足都会让对抗过程变得不稳定。 针对如何得到每一个时刻的奖励，该论文的作者给出了两种不同的方法：Monte Carlo Search以及依靠自己训练的一个能够对部分生成序列进行reward计算的模型。前面那种方法和SeqGAN的做法相同就不在进行介绍，相比之下后者的模型能够通过使用完整的（fully）和部分的（partially）解码序列来训练一个分类模型。但是这种方法存在一个问题，那就是重复的序列会让模型overfitting在固定序列的生成模式。因为早期产生的部分序列会出现在后续的更长的序列中。怎么理解呢？假设我们有一个序列“This is a man.”，在模型训练第三个序列“This is a”的时候，模型已经学习过“This”和“This is”。也就是说this这个token的权重在训练后续的时间点时会被重复训练多次，这样以来模型对于早期的前缀序列会具有很深刻的印象，导致模型overfitting在一些固定的表达法而难以跳脱。为了克服这个问题，作者就选择了每一次更新的时候仅从所有的正序列（positive sequences）和负序列（negative sequences）中分别随机sample一个来训练判别器。实验结果表明这种方法比蒙特卡罗省时，但是却无法在收敛之后达到比蒙特卡罗更好的结果。 Teacher Forcing在序列生成对抗的过程中，GANs的生成器只能间接地通过判别器产生的reward来判断所产生的句子的好坏。而不是直接接触最终的真实句子（可以叫做gold-standard）获取信息。这样的方式可能存在一个隐藏的问题点，那就是一旦生成器在某个时刻产生的句子不好，判别器就会给出一个较低的reward，这个时候对于生成器而言最直观的感觉就是需要对生成序列的分布进行改变。然而因为无法接触到最终label的任何信息，因此生成器很容易迷失（只知道自己不好，但是却不知道应该如何改进）。为了解决这个问题，本文引入了teacher forcing的策略，在生成器更新的过程中，如果判别器给出的reward很小，模型就会将真实的资料作为输入指导生成器进行下一次的更新优化。就好比一个老师在学生遇到困难的时候能够帮他指引方向一样。这样一来生成器就有可能在上述的情况下仍能得到较好的结果。 GANS for Sequences of Discrete Elements with the Gumbel-softmax Distribution 论文链接：https://arxiv.org/pdf/1611.04051.pdf Key Points：Gumbel Softmax Distribution Graph &amp; Algorithm： 思路：不同于之前的RL方法，该论文在处理离散数据的问题上采用了新的方法——Gumbel Softmax。离散数据通常是用one-hot vector表示，并可以通过sampling的方式从一些多项式（例如softmax函数）中采样得到。采样的过程： ，其中的 是服从Gumbel Distribution的分布函数。然而这样的函数在反向传递过程中是无法微分的，因此我们采用另一种表示方式： ，这样的方式通过调节温度系数 的值我们可以让softmax的分布在形式上尽可能逼近one-hot vector的形式，从而打破KL散度识别的误区。 Connecting Generative Adversarial Networks and Actor-Critic Methods 论文链接：https://arxiv.org/pdf/1610.01945.pdf Key Points：Summarize the correlation between GAN and Actor-Critic Graph &amp; Algorithm： 思路：大多数的强化学习模型只是采用了单一的决策（policy）和价值（value）方法。而Actor-Critic则是结合了两者的一项应用于一身的模型。类似GANs的运作方式，Actor-Critic也是采用了两种方法结合的训练模式。其中actor用来决策输出的action，而critic用来对action进行价值评估。 论文提到了很多关于GANs与Actor-Critic的相同之处。actor相当于generator，都是用来为下一个时刻产生相应的输出（sentence for GANs &amp; action for Actor-Critic）。critic相当于discriminator，都是用来评估所产生的输出所具备的价值水平。 Improving Neural Machine Translation with Conditional Sequence Generative Adversarial Nets 论文链接：https://arxiv.org/pdf/1703.04887.pdf Key Points：将SeqGAN用在机器翻译领域 Graph &amp; Algorithm： 思路：论文提出了CSGAN-NMT模型，用对抗学习的方式训练模型解决机器翻译的问题。生成器用的是attention based的NMT，而判别器采用的则是CNN based的分类器。（对比RNN based发现，RNN的模型在句子分类上具有较高的准确率，这样导致发生先前提到的判别器过度训练导致的梯度消失问题） 文章的训练手法和SeqGAN十分类似，首先采用MLE的方式对生成器和判别器进行预训练。之后通过policy gradients+Monte Carlo的方式将两者结合起来做对抗学习。文章还采用了一种取代Schedule Sampling的方式来应对exposure bias的问题——Professor Forcing。 Professor Forcing不同于Schedule Sampling采用预设的门槛来决定什么时候采用teacher forcing的训练方式和free running。professor forcing的方法采用训练一个分类器（discriminator）来对门槛进行评估。有点类似RL中的DQN和Policy gradients的关系，具体示意图如下： 这样的方法可以想象成NN-based Schedule Sampling。 Improved Training of Wasserstein GANs 论文链接：http://papers.nips.cc/paper/7159-improved-training-of-wasserstein-gans.pdf Key Points：让WGANs也能在NLP领域上发挥作用 Graph &amp; Algorithm： 思路：总结WGANs与传统GANs在实作上的差异包括：1、判别器最后一层的输出去掉sigmoid（或者softmax，相当于不做正规化）。2、生成器和判别器的loss不去log。（相当于利用value代替probability）3、每次更新判别器的参数之后把它们的绝对值截断到一个不超过c的范围（weight clipping）。4、不采用基于动量（momentum）的优化函数（如Adam），转而采用RMSProp或者SGD。 作者发现利用weight clipping的方式对判别器的输出分布进行Lipschitz限制，尽可能将结果逼近可靠的Wasserstein distance的方式是导致训练不稳定的一个关键因素。因为论文提出了通过梯度惩罚（gradient penalty）来代替之前采用的Lipschitz限制。 可以从算法中看出损失函数除了原先的部分，还加入了一个梯度惩罚项。 MaskGAN: Better Text Generation via Filling in the__ 论文链接：https://arxiv.org/pdf/1801.07736.pdf Key Points：采用Mask的方式让GANs在序列生成的时候更加robust Graph &amp; Algorithm： 思路：在针对exporsure bias和部分序列reward的问题上，论文采用了fill-in-the-blank或in-filling的方式加以缓解。在训练过程中，一部分文本信息将会被去除（masked），而模型的目的是随后需要填充文本中缺失的那些部分，让他尽可能和真实资料相近。 在文本数据中有着更复杂的mode，比如词组、短语、长的谚语等，这些都是我们希望模型能够学习的。然而SeqGAN中判别器是对一整个完整的句子进行判别，可以想象对于GANs来说句子的mode更是稀疏，那么GANs学习到的句子diversity会远远不足。于是，作者想办法让GANs能够在词级别（sub-sequence）的生成上做判断。然而，当模型在sampling时，也就是完全free-running的模式下，我们并不能确定每个位置的词还和ground truth保持一致，这会给模型训练带来很大的干扰。于是作者采用了让模型做完型填空的形式（像一种改进版Schedule Sampling），在原句子中随机挖几个空（mask），然后让模型去填，之后让判别器去判断输出的是否是正确的词。 模型采用一种 curriculum learning 的方式，随着训练的进行，不断增加sequence的长度，使得模型从short-term dependencies开始，慢慢学习到long-term dependencies。模型需要经过两轮预训练： 用传统的 maximum likelihood training pre-train一个语言模型，之后将这个语言模型的网络权值赋值给seq2seq模型的encoder和decoder模块; 用得到的seq2seq模型来做完型填空任务（ in-filling task），用传统的 maximum likelihood training来训练，得到的seq2seq模型网络权值赋值给MaskGAN的generator和discriminator。 参考（reference） DeepDrumpf Tweeter Generative Adversarial Networks for Text 令人拍案叫绝的Wasserstein GAN Role of RL in Text Generation by GAN AI技术讲座精选：GAN 在 NLP 中的尝试 《MASKGAN: BETTER TEXT GENERATION VIA FILLING IN THE 》阅读笔记 The encode-decode framework refer to Neural responding machine for short-text conversation (2015) ARJOVSKY, Martin; CHINTALA, Soumith; BOTTOU, Léon. Wasserstein gan. arXiv preprint arXiv:1701.07875, 2017. ZHANG, Yizhe; GAN, Zhe; CARIN, Lawrence. Generating text via adversarial training. In: NIPS workshop on Adversarial Training. 2016. YU, Lantao, et al. SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient. In: AAAI. 2017. p. 2852-2858. LI, Jiwei, et al. Adversarial learning for neural dialogue generation. arXiv preprint arXiv:1701.06547, 2017. KUSNER, Matt J.; HERNÁNDEZ-LOBATO, José Miguel. Gans for sequences of discrete elements with the gumbel-softmax distribution. arXiv preprint arXiv:1611.04051, 2016. PFAU, David; VINYALS, Oriol. Connecting generative adversarial networks and actor-critic methods. arXiv preprint arXiv:1610.01945, 2016. YANG, Zhen, et al. Improving neural machine translation with conditional sequence generative adversarial nets. arXiv preprint arXiv:1703.04887, 2017. GULRAJANI, Ishaan, et al. Improved training of wasserstein gans. In: Advances in Neural Information Processing Systems. 2017. p. 5767-5777. FEDUS, William; GOODFELLOW, Ian; DAI, Andrew M. Maskgan: Better text generation via filling in the _. arXiv preprint arXiv:1801.07736, 2018.","categories":[],"tags":[{"name":"GAN","slug":"GAN","permalink":"http://yoursite.com/tags/GAN/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://yoursite.com/tags/Deep-Learning/"}]},{"title":"Single Cycle MIPS CPU","slug":"CPU","date":"2017-08-29T09:28:33.000Z","updated":"2017-08-29T09:29:29.377Z","comments":true,"path":"2017/08/29/CPU/","link":"","permalink":"http://yoursite.com/2017/08/29/CPU/","excerpt":"","text":"OverviewThe goal of this experience is to understand how a single-cycle MIPS work and how to use Verilog hardware description language (Verilog HDL) to model electronic systems. We need to implement a single cycle MIPS CPU that can execute all the instructions shown in the MIPS ISA section. We need to follow the instruction table and satisfy all the requirements .In addition, we need to verify our CPU by using Modelsim. Testing steps will provide test fixtures that will run a MIPS program for the CPU. Environment Verilog ModelSim Description The single-cycle CPU use one cycle to execute instruction. There are five main components in CPU: controller, regfile, arithmetic logic unit (ALU), program counter(PC), and jump controller. The controller control most of the multiplexers, DM write enable, ALU, Jump Controller, and regfile. The file Controller.v implements the controller. The regfile is used to store data between memory and the functional units. The file Regfile.v implements the regfile. The arithmetic logic unit do arithmetic and bitwise operations. The file ALU.v implements the arithmetic logic unit. The program counter is stored in the PC module. The file PC.v implements the program counter. It is triggered by positive clock edges. The jump controller select a memory address and send to PC. The file Jump_Ctrl.v implements the jump controller. The instruction memory is used to store instructions and it is implemented in IM.v files. The data memory is used to store data and it is implemented in DM.v file. The MIPS ISA is shown in the following. Figure 2 shows the R-type instructions in the MIPS ISA. Figure 3 shows the I-type instructions in the MIPS ISA. Figure 4 shows the J-type instructions in the MIPS ISA. Figure 5 shows the datapath of the single-cycle CPU. This single-cycle CPU is similar to the single-cycle in the textbook. However, to simply the CPU design, only smaller instruction and data memory are used and only 18-bit addresses are needed to obtain data in the memory.","categories":[],"tags":[{"name":"Verilog","slug":"Verilog","permalink":"http://yoursite.com/tags/Verilog/"},{"name":"CPU","slug":"CPU","permalink":"http://yoursite.com/tags/CPU/"}]},{"title":"自编码（Auto-encoder）","slug":"auto-encoder","date":"2017-08-21T02:33:32.000Z","updated":"2017-08-21T02:34:48.442Z","comments":true,"path":"2017/08/21/auto-encoder/","link":"","permalink":"http://yoursite.com/2017/08/21/auto-encoder/","excerpt":"","text":"什么是自编码在神经网络训练过程中，往往会需要输入大量的信息，而这些信息对于计算机的学习来说具有十分巨大的负担。想想人类的学习过程，如果一次性塞给我们大量的信息，不但达不到很好的学习效果，还会浪费大量的时间。 因此我们需要一个特殊的神经网络来将原本的信息进行压缩，提取其中最具有代表性的信息，这个网络就是所谓的编码器（encoder）。之后再通过放大压缩后的信息，重现原始资料的全部信息，也就是 解码（decoder） 的过程。而我们所需要做的就是取得编码器压缩之后的简要信息，送入神经网络进行学习，从而达到我们的目的。 General Auto-encoder通常我们会利用神经网络的结构将输入和输出的vector进行维度的变化，从而拟合二者，而auto-encoder就是利用非监督式学习来自动找到能够表示输入信号的低维度（Low Dimension）特征向量。 如上图所示，如果单独想要依靠一个神经网络得到好的特征向是不可能的。因为是非监督式学习，对于NN Encoder而言，我们无法评估结果code的好坏；相对的NN Decoder而言我们无从得到code的信息。因此两者必须相互沟通，共同训练才能达到最终的目的。 Deep Auto-encoder如果说传统的Auto-encoder只是使用了简单的机器学习方法或是简单的神经网络作为encoder和decoder的内部构造，那么Deep Auto-encoder就是将这些网络结构替换成了更为复杂，从资料形态和特征出发的神经网络。 从图中可以看出，Deep Auto-encoder能够利用神经网络的特性将输入和输出（同样的输入资料）进行转换，最终得到资料的精华部分（code）。因此我们可以说： 下图是通过PCA和t-SNE对输入信号进行降维后在二维空间中的手写数字分类结果： 而经过Deep Auto-encoder之后的结果如下： 不难看出，Auto-encoder在特征的分类上还是有一定程度能够超越传统的主成分分析模型。 Sequence-to-Sequence Auto-encoderSequence-to-Sequence的Auto-encoder主要是用在提取输入信号是一个时序的特征向量。这个时候我们需要借助RNN的模型来对时序特征向量进行encode和decode的动作。 同样的利用Sequence-to-Sequence Model定义的Encoder对输入信号进行编码，输出的Vector通过Decoder重新解码。不同的是解码的结果需要拟合的是原先编码前的信号。如此一来解码器和编码器就能够准确地将原始输入信号的特征压缩和保存了。 Encoder输出的Vector就是我们需要的输入信息的精华，其中的Feature都能够对信息本身造成关键性的影响。","categories":[],"tags":[{"name":"Auto-Encoder","slug":"Auto-Encoder","permalink":"http://yoursite.com/tags/Auto-Encoder/"}]},{"title":"数据挖掘（Data Mining）十大经典算法","slug":"data","date":"2017-08-16T09:25:15.000Z","updated":"2017-08-16T09:27:21.190Z","comments":true,"path":"2017/08/16/data/","link":"","permalink":"http://yoursite.com/2017/08/16/data/","excerpt":"","text":"算法介绍（Introduction）C4.5C4.5是机器学习中的一个分类决策树（Decision Tree）算法，它是决策树的一个核心，ID3的改进算法。因此想要构造C4.5的结构，只需要了解决策树的构造方法即可实现大半。而总的来说就是每次选择一个好的特征以及分裂点作为当前节点的判断条件（树的分岔路口）。 C4.5相比于ID3改进的方面包括： 使用了信息增益率作为选择节点的标准。 传统的ID3算法使用了信息增益(Information Gain)作为衡量节点优异度的标准，也就是熵值（Entropy）的变化程度，而这个情况往往会导致选择属性的时候偏向选择取值多的属性。例如同样是跑步，一个人的速度为5m/s，另一个人的速度为3m/s，之后两人分别加速到了10m/s和6m/s。如果利用信息增益来评估两人的速度变化，那么显然前者的信息增益更强（10-5 &gt; 6-3）。然而如果使用信息增益率来说两人的加速度是一致的((10-5) / 5 = (6-3) / 3)。 在构建决策树的过程中对分支进行了修剪。 剪去那些只有几个节点的分支，因为选择方式少而单一，容易造成Overfitting。 能够处理不完整的数据。 The K-means Algorithm(K-means)K-means算法在机器学习中属于一个聚类算法，它是把n个对象根据他们的属性差异（Feature维度空间中的距离）来将彼此分成K群。它与处理混合正态分布的最大期望类似，因为都是试图找到数据中的聚类中心。K-means计算假设对象属性来自于空间向量，并且目标是使各个群组内部的误差最小化。 Support Vector Machine（SVM）支持向量机是一种监督式学习的方法，被广泛应用在分类和回归的分析中。它的原理是将空间中的向量映射到一个更高纬度的空间中，然后在空间中找到一个最大间隔超平面。通俗的来说就是在原有的维度空间中无法分割的情况下，我们先提高向量表示的维度空间，然后在高纬度空间中找到一个超平面，能够将不同类别的向量集合分割开来。我们在这个超平面两侧各取两个平行的超平面，然后最大化这两个平面的距离。 The Apriori algorithmApriori算法是一种最有影响力关联法则应用算法。其核心是结合了关联法则和递归的思想，我们会定义一个最小支持度（minimum support）来生成我们的频繁数据集。首先从所有数据中计算出频繁项集L1，之后再利用L1生成L2项集，以此类推最后能够得到频繁k项集。每次检索需要扫描所有数据一次。 关联度分析的基本概念 支持度 关联规则 A-&gt;B 的支持度（Support）= P（AB），指的是A和B同时发生的概率 置信度 A对B的置信度（confidence）= P（B | A）= P（AB）/ P（A），指的是A发生的情况下B发生的概率 最大期望（EM）算法在统计计算中，最大期望算法是在概率模型中寻找最大似然估计或者最大后验估计的算法，其中概率模型依赖于无法观测的隐性变量（Latent Variable）。 举个例子就是： 两个人分食物，我们没有必要利用十分精确的仪器来将食物分成完全相等的两份，而是先随便将食物分成两群，然后观察是否一样多，把比较多的那一份取出一部分到少的那一群。久而久之两群的差距就会越来越小最后收敛。 PageRankPageRank，又称网页排名，是一种根据相互的超链接计算关联度的技术。它通过网页的外部链接和内部链接的数量和质量来衡量网站的价值。PageRank背后的机制是投票，也就是每一次访问网页的链接都是对该页面的一次投票，票数越多代表网站的权重越高。 假设有一个4个对象组成的小团体A，B，C，D。如果所有对象都提到A，那么A的PageRank值就是B，C，D三个PageRanks的总和。即: 如果此时B有提到C，D也有提到A，B，C。由于一个页面不能出现两次，因此权重会被一个权重分配： AdaBoostAdaBoost是一种迭代的算法，其核心思想是针对同一个训练集训练不同的分类器，也叫作弱分类器。然后通过把这些弱分类器整合起来，构造出一个最终的强分类器。AdaBoost算法本身是通过动态改变数据的分布情况来实现的，根据每次训练样本的正确与否，以及上次分类的准确率，来调整每个样本的权重比例。然后再将结果送给下一次分类器的迭代中进行训练，以此类推。 K-nearest neighbor classification(KNN)KNN算法可以用于分类和回归问题，然而我们更常将其被用于解决分类问题上。KNN能够存储所有的案例，通过对比周围K个样本中的大概率情况，从而决定新的对象应该分配在哪一个类别。新的样本会被分配到它的K个最近最普遍的类别中去，因此KNN算法也是一个基于距离函数的算法。 Naive Bayes在所有的分类模型中，应用最为广泛的无非是两种分类模型了，它们分别是决策树模型和朴素贝叶斯（Naive Bayes）模型。在结构上，Naive Bayes所需估计的参数较少，对缺失数据不太敏感，算法也比较简单。Naive Bayes模型假设属性之间相互独立。通俗来说，一个朴素贝叶斯分类器假设分类的特性和其他特性不相关。朴素贝叶斯模型容易创建，而且在非监督式学习的大型数据样本集中非常有用，虽然简单，却能超越复杂的分类方法。其基本思想就是：对于给出的待分类项，求解在此项出现的条件下各个目标类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。 CART（分类与回归树）Classification and Regression Trees是在分类树下面总结两个关键的思想。一个是关于递归的划分自变量空间，第二个是用验证数据对树结构进行剪枝。我们知道分类树的输出是样本的类别标签。回归树的输出则是一个固定的数值。而CART包含了上述的两种决策树。它的结构是一棵二叉树，且每个非叶子节点都有两个Child，所以叶子节点数总是比非叶子节点数多1。CART中用于选择变量的不纯性度量标准是用Gini指数来处理的，也就是说树内部的属性越杂乱，Gini指数就越大。如果目标变量是离散的，并且具有两个以上的类别，则CART可能考虑将这些目标类别进行合并，最终合并成两个超类别（这个过程叫做双化）。如果目标变量是连续的，则CART会找出一组基于树的回归方程来预测目标变量的结果。","categories":[],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"},{"name":"Data Mining","slug":"Data-Mining","permalink":"http://yoursite.com/tags/Data-Mining/"}]},{"title":"An Implementation of Attention is all you need with Chinese Corpus","slug":"attention","date":"2017-08-15T09:42:49.000Z","updated":"2017-08-15T09:46:10.921Z","comments":true,"path":"2017/08/15/attention/","link":"","permalink":"http://yoursite.com/2017/08/15/attention/","excerpt":"","text":"LinkGithub Requirements Numpy &gt;= 1.13.1 Tensorflow-gpu &gt;= 1.2.1 tqdm nltk Construction DetailsAs we all know Translation System can be used in implementing conversational model just by replacing the paris of two different sentences to questions and answers. After all, the basic conversation model named “Sequence-to-Sequence” is develped from translation system. Therefore, why we not to improve the efficiency of conversation model in generating dialogues? This is the structure of transformer which is the core of implementing our model. Now let’s split it into several points: First one is Input Datasets(Get the batch datasets from generator, which is represented as a list of token ids in this experiment). Second one is Embedding layers(Including two parts:Dataset Embedding and Positional Embedding) Dataset Embedding transform input token ids into a one-hot vector whose size is the length of vocabulary. Positional Embedding also called positional encoding. It considered the index of each word in the list of sentence as the position symbol. Third we have a multi-head attention model to split the output of embedding layers into many pieces and run through different attention models parallelly. Finally we can get the result by concating all the outputs from every models. Finally, going through a feed forward layer and combining with residual items, so that we can get the result. Usage STEP 1. Download dialogue corpus with format like sample datasets and extract them to data/ folder. STEP 2. Adjust hyper parameters in params.py if you want. STEP 3. Run make_dic.py to generate vocabulary files to a new folder named dictionary. STEP 4. Run train.py to build the model. Checkpoint will be stored in checkpoint folder while the tensorflow event files can be found in logdir. STEP 5. Run eval.py to evaluate the result with testing data. Result will be stored in Results folder. Results1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859- Source: 肥 宅 初 夜 可 以 賣 多 少 `- Ground Truth: 肥 宅 還 是 去 打 手 槍 吧- Predict: 肥 宅 還 是 去 打 手 槍 吧- Source: 兇 的 女 生 484 都 很 胸- Ground Truth: 我 看 都 是 醜 的 比 較 凶- Predict: 我 看 都 是 醜 的 比 較 &lt;UNK&gt;- Source: 留 髮 不 留 頭- Ground Truth: 還 好 我 早 就 禿 頭 了- Predict: 還 好 我 早 就 禿 頭 了- Source: 當 人 好 痛 苦 R 的 八 卦- Ground Truth: 去 中 國 就 不 用 當 人 了- Predict: 去 中 國 就 不 會 有 了 -- Source: 有 沒 有 今 天 捷 運 的 八 卦- Ground Truth: 有 - 真 的 有 多- Predict: 有 - 真 的 有 多- Source: 2016 帶 走 了 什 麼 `- Ground Truth: HellKitty 麥 當 勞 歡 樂 送 開 門 -- Predict: &lt;UNK&gt; 麥 當 勞 歡 樂 送 開 門 -- Source: 有 沒 有 多 益 很 賺 的 八 卦- Ground Truth: 比 大 型 包 裹 貴- Predict: 比 大 型 包 &lt;UNK&gt; 貴- Source: 邊 緣 人 收 到 地 震 警 報 了- Ground Truth: 都 跑 到 窗 邊 了 才 來- Predict: 都 跑 到 &lt;UNK&gt; 邊 了 才 來- Source: 車 震- Ground Truth: 沒 被 刪 版 主 是 有 眼 睛 der- Predict: 沒 被 刪 版 主 是 有 眼 睛 der- Source: 在 家 跌 倒 的 八 卦 `- Ground Truth: 傷 到 腦 袋 - 可 憐- Predict: 傷 到 腦 袋 - 可 憐- Source: 大 家 很 討 厭 核 核 嗎 `- Ground Truth: 核 核 欠 幹 阿- Predict: 核 核 欠 幹 阿- Source: 館 長 跟 黎 明 打 誰 贏 -- Ground Truth: 我 愛 黎 明 - 我 愛 黎 明 -- Predict: 我 愛 &lt;UNK&gt; 明 - 我 愛 &lt;UNK&gt; 明 -- Source: 嘻 嘻 打 打- Ground Truth: 媽 的 智 障 姆 咪 滾 喇 幹- Predict: 媽 的 智 障 姆 咪 滾 喇 幹- Source: 經 典 電 影 台 詞- Ground Truth: 超 時 空 要 愛 裡 滿 滿 的 梗- Predict: 超 時 空 要 愛 裡 滿 滿 滿 的- Source: 2B 守 得 住 街 亭 嗎 `- Ground Truth: 被 病 毒 滅 亡 真 的 會 -- Predict: &lt;UNK&gt; 守 得 住 ComparisonImplement feedforward through fully connected. Training Accuracy Training Loss Implement feedforward through convolution in only one dimention. Training Accuracy Training Loss Reference:Thanks for Transformer 本文在原先的模组上添加了Attention is all you need提到的Position encoding的部分","categories":[],"tags":[{"name":"Transformer","slug":"Transformer","permalink":"http://yoursite.com/tags/Transformer/"},{"name":"Attention is all you need","slug":"Attention-is-all-you-need","permalink":"http://yoursite.com/tags/Attention-is-all-you-need/"},{"name":"Conversation Model","slug":"Conversation-Model","permalink":"http://yoursite.com/tags/Conversation-Model/"}]},{"title":"tensorflow快速入门","slug":"tensorflow","date":"2017-08-14T06:08:47.000Z","updated":"2017-08-14T06:09:41.304Z","comments":true,"path":"2017/08/14/tensorflow/","link":"","permalink":"http://yoursite.com/2017/08/14/tensorflow/","excerpt":"","text":"介绍（Introduction）Tensorflow是一个使用数据流图（Data flow graphs）技术进行数值运算的函式库。每一张图都是由节点（Node）和边（Edge）组成的。Tensorflow具有以下几点特性： 灵活性Tensorflow不是一个严格意义上的神经网络函式库，只要是能够使用数据流图来描述的计算问题，都能够通过Tensorflow来实现。与此同时还能够用简单的Python来实现高层次的功能。 可迁移性Tensorflow可以在任何具备CPU或者GPU的设备上运行，无需考虑复杂的环境配置问题，。 高效性Tensorflow可以提升神经网络的训练效率，且具备代码统一的有优势，便于和同行分享。 配置支持 Python C++ CUDA (GPU环境) CUDNN （GPU环境） Tensorflow的结构数据流图（Graph）数据流图是一种描述有向图的数值计算过程产物。图中的节点通常是代表数学运算，但也可以表示数据的输入、输出和读写等操作。图中的边（Edge）表示节点之间的某种关联，负责在节点之间传递各种数据单元，而Tensorflow的基本运算单元是Tensor。Tensorflow的flow也因此得名。 节点可以被分配到多个设备上运算，也就是所谓的异步并行操作。因为是有向图，所以只有等到先前的节点结束工作时，当前的节点才能够执行相应的操作。 节点（Ops）Tensorflow中的节点也被称为Operation。一个Ops通常使用0个或者以上的Tensors，通过执行某个特定的运算，产生新的Tensors。一个Tensor表示的是一个多维数组，例如[batch, height, width, channels]这样的形式，数组中的数多为浮点数。 边（Edge）Tensorflow各节点之间的通道被成为边，也可以理解为流（FLow），作用是在每个节点的计算过程中传输数据Tensor。因为是有向图的关系，边的传输方向也是有自己的规则，因此在Tensorflow的运算过程中往往需要安排好节点和边的关系。 Tensorflow的常见使用步骤 将计算流程表示成图的形式 通过Session来执行图计算 将数据表示为Tensors 通过Variable储存模型的状态数值 使用feeds和fetches来填充数据和抓取数据 Tensorflow运行中通过Session来执行图中各节点的运算，Session将Ops放置到CPU或者GPU中，然后执行他们。执行完毕后，返回相应的结果（Tensors），在Python中这些Tensors的形式是numpy ndarray的objects。 创建数据流图Tensorflow在使用过程中通常分为施工阶段 和 建设阶段两部分。在施工阶段我们创建一个神经网络的结构和功能，在建设阶段通过Session来反复执行我们所构建的神经网络。 和大多数编程语言类似，Tensorflow的Constant是一种没有输入的ops（常量），但是它本身可以作为其他ops的输入。 1234import tensorflow as tfmatrix1 = tf.constant([[3., 3.]])matrix2 = tf.constant([[2.], [2.]])product = tf.matmul(matrix1, matrix2) 这时我们已经在一个Default的Graph里面加入了三个Nodes，两个Constant ops和一个matmul的ops。为了能够得到两个矩阵运算的结果，我们就必须使用session来启动图。 在Session中执行数据流图刚才已经完成了施工的阶段，现在要开始建设阶段了，这样才能实作出我们想要的结果。 1234sess = tf.Session()result = sess.run(product)print(result)sess.close() 用定义式的Session执行需要一个结束的判定，或者我们可以使用with的方式来定义我们的执行过程: 123with tf.Session() as sess: result = sess.run(product) print(result) Tensorflow这些节点可以被分配到不同的设备上进行计算。如果是GPU，默认会在第一个GPU（id = 0）上执行，如果想在其他的GPU上执行相应的session，需要进行手动配置： 1234567with tf.Session() as sess: # 也可以用‘/cpu:0’ with tf.device(&quot;/gpu:1&quot;): matrix1 = tf.constant([[3., 3.]]) matrix2 = tf.constant([[2.], [2.]]) product = tf.matmul(matrix1, matrix2) print(sess.run(product)) 在一些交互界面（例如Ipython或者cmd）运行tensorflow的时候，我们往往不需要编译全局而用分布式运算的方式。因此我们可以使用InteractiveSession和eval()、Ops_name.run()等方式来进行分布式运算: 1234567891011import tensorflow as tfsess = tf.InteractiveSession()a = tf.Variable([1.0, 2.0])a.initializer.run()b = tf.constant([3.0, 3.0])sub = tf.subtract(a, b)print(sub.eval())sess.close() 运算中的数据结构TensorsTensorflow中使用的数据结构不同于其他语言中的结构，而是一种叫作Tensor的结构，它的本质是一个多维的数据集的表示形式，用来在数据流图中的各节点之间传递信息，一个Tensor具有固定的类型和大小（静态型别）。 变量Variable变量在图的执行过程中，保持着自己特有的状态信息，能够为图模型的运作保存变化的数值信息： 123456789101112131415import tensorflow as tfstate = tf.Variable(0, name = &quot;counter&quot;)one = tf.constant(1)new_value = tf.add(state, one)# 赋值函数update = tf.assign(state, new_value)init_op = tf.initializer_all_variables()with tf.Session() as sess: sess.run(init_op) print(sess.run(state)) for _ in range(3): sess.run(update) print(sess.run(state)) 一般我们会将神经网络的参数初始化为一些变量，等到训练的时候再通过Session来对参数进行更新。 抓取（Fetches）和填充（Feeds）我们在使用神经网络的过程中，每一个节点的图往往不是封闭的，也就是说它们需要传入和输出一些东西。而为了抓取ops的输出，我们需要执行Session的run函数，然后通过print的方式抓取它们的参数: 12345678910import tensorflow as tfinput1 = tf.constant(3.0)input2 = tf.constant(2.0)input3 = tf.constant(5.0)intermed = tf.add(input2, input3)mul = tf.multiply(input1, intermed)with tf.Session() as sess: result = sess.run(mul) print(result) 其中的result计算过程中，虽然mul的计算过程需要用到intermed的计算结果，但是我们不需要另外写入sess.run(intermed)。原因是Tensorflow是一个有向图集，因此我们定义后面的图，它就会自动去追溯先前的所有图并且实作它们。 有的时候我们在计算过程中有些参数我们是在之后建设的过程中才会得到的，因此我们在施工的时候就可以先用一个占位符把它的位置保留： 1234567import tensorflow as tfinput1 = tf.placeholder(tf.float32)input2 = tf.placeholder(tf.float32)output = tf.multiply(input1, input2)with tf.Session() as sess: print(sess.run(output, feed_dict = &#123;input1 : [7.], input2: [2.]&#125;)) 或者传入一个numpy array： 1234567891011import tensorflow as tfimport numpy as npn = 5a = tf.placeholder(dtype = tf.float32)b = tf.placeholder(&quot;float&quot;, [None, n])output = tf.multiply(a, b)with tf.Session() as sess: temp = np.asarray([[1., 2., 3., 4., 5.]]) print(sess.run(output, feed_dict = &#123;a: [2.], b: temp&#125;)) Tensorflow范例拟合曲线的计算12345678910111213141516171819202122import tensorflow as tfimport numpy as npx_data = np.random.randn(100).astype(&quot;float32&quot;)y_data = x_data * 0.1 + 0.3W = tf.Variable(tf.random_uniform([1], -1.0, 1.0))b = tf.Variable(tf.zeros([1]))y = W * x_data + bloss = tf.reduce_mean(tf.square(y - y_data))optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)init = tf.initialize_all_variables()sess = tf.Session()sess.run(init)for step in range(101): sess.run(optimizer) if step % 20 == 0: print(step, sess.run(W), sess.run(b)) MNIST手写识别利用线性分类： 1234567891011121314151617181920212223242526272829303132from tensorflow.examples.tutorials.mnist import input_data# mnist.train, mnist.test, mnist.validationmnist = input_data.read_data_sets(&quot;MNIST_data/&quot;, one_hot = True)import tensorflow as tfimport numpy as npbatch_size = 64train_iter = 1000# input_size = [batch_size, 28, 28]; output_size = one_hotx = tf.placeholder(tf.float32, [None, 784])y = tf.placeholder(tf.float32, [None, 10])W = tf.Variable(tf.zeros([784, 10]))b = tf.Variable(tf.zeros([10]))pred = tf.nn.softmax(tf.matmul(x, W) + b)loss = -tf.reduce_sum(y * tf.log(pred))optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss)correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, &quot;float&quot;))init = tf.initialize_all_variables()sess = tf.Session()sess.run(init)for step in range(train_iter): batch_xs, batch_ys = mnist.train.next_batch(64) sess.run(optimizer, feed_dict = &#123;x: batch_xs, y: batch_ys&#125;) if step % 100 == 0: print(sess.run(accuracy, feed_dict = &#123;x: mnist.test.images, y: mnist.test.labels&#125;)) 利用RNN（GRU）神经网络： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162from tensorflow.examples.tutorials.mnist import input_dataimport tensorflow as tfimport numpy as npmnist = input_data.read_data_sets(&quot;MNIST/&quot;, one_hot = True)n_input = 28time_step = 28n_hidden = 128n_output = 10learning_rate = 0.001train_iters = 1000batch_size = 64x = tf.placeholder(tf.float32, [None, time_step, n_input])y = tf.placeholder(tf.float32, [None, n_output])W = &#123; &apos;hidden&apos; : tf.Variable(tf.random_normal([n_input, n_hidden])), &apos;output&apos; : tf.Variable(tf.random_normal([n_hidden, n_output]))&#125;b = &#123; &apos;hidden&apos; : tf.Variable(tf.random_normal([n_hidden])), &apos;output&apos; : tf.Variable(tf.random_normal([n_output]))&#125;def RNN(x, W, b): x = tf.transpose(x, [1, 0, 2]) x = tf.reshape(x, [-1, n_input]) x = tf.matmul(x, W[&apos;hidden&apos;]) + b[&apos;hidden&apos;] x = tf.split(x, time_step, 0) lstm_cell = tf.nn.rnn_cell.GRUCell(n_hidden) outputs, _ = tf.contrib.rnn.static_rnn(lstm_cell, x, dtype = tf.float32) return tf.matmul(outputs[-1], W[&apos;output&apos;]) + b[&apos;output&apos;]pred = RNN(x, W, b)loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = pred, labels = y))optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)corrent_pred = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))accuracy = tf.reduce_mean(tf.cast(corrent_pred, tf.float32))init = tf.global_variables_initializer()with tf.Session() as sess: with tf.device(&apos;/cpu:0&apos;): sess.run(init) for step in range(train_iters): batch_x, batch_y = mnist.train.next_batch(batch_size) batch_x = batch_x.reshape(batch_size, time_step, n_input) sess.run(optimizer, feed_dict = &#123;x: batch_x, y: batch_y&#125;) if step % 100 == 0: acc = sess.run(accuracy, feed_dict = &#123;x: batch_x, y: batch_y&#125;) cost = sess.run(loss, feed_dict = &#123;x: batch_x, y: batch_y&#125;) print(&quot;MSG : Epoch &#123;&#125;, Training_accuracy = &#123;:.6f&#125;, Training_loss = &#123;:.5f&#125;&quot;.format((step // 100) + 1, acc, cost)) test_data = mnist.test.images.reshape(-1, time_step, n_input) test_labels = mnist.test.labels print(&quot;MSG : Testing_accuracy = &#123;:.6f&#125;&quot;.format(sess.run(accuracy, feed_dict = &#123;x: test_data, y: test_labels&#125;))) 利用CNN神经网络： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103from tensorflow.examples.tutorials.mnist import input_dataimport tensorflow as tfmnist = input_data.read_data_sets(&apos;MNIST/&apos;, one_hot = True)time_step = 28n_input = 28n_output = 10n_hidden = 1024learning_rate = 0.001train_iters = 20000batch_size = 64dropout = 0.5strides_size = 1kernal_size = 2window_size = 5def weight_variable(shape): initial = tf.truncated_normal(shape, stddev = 0.1) return tf.Variable(initial)def bias_variable(shape): initial = tf.constant(0.1, shape = shape) return tf.Variable(initial)def conv(x, W): return tf.nn.conv2d(x, W, strides = [strides_size] * 4, padding = &apos;SAME&apos;)def max_pooling(x): return tf.nn.max_pool(x, ksize = [1, window_size, window_size, 1], strides = [1, 2, 2, 1], padding = &apos;SAME&apos;)x = tf.placeholder(tf.float32, [None, time_step, n_input])x_image = tf.reshape(x, [-1, time_step, n_input, 1])y = tf.placeholder(tf.float32, [None, n_output])keep_prob = tf.placeholder(tf.float32)# conv1 layerW_conv1 = weight_variable([window_size, window_size, 1, 32])b_conv1 = bias_variable([32])# conv2 layerW_conv2 = weight_variable([window_size, window_size, 32, 64])b_conv2 = bias_variable([64])# linear flatten layerW_fc1 = weight_variable([7*7*64, n_hidden])b_fc1 = bias_variable([n_hidden])# softmax layerW_fc2 = weight_variable([n_hidden, n_output])b_fc2 = bias_variable([n_output])def CNN(x, W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2, keep_prob): # [-1, 28, 28, 1] h_conv1 = tf.nn.relu(conv(x, W_conv1) + b_conv1) h_pool1 = max_pooling(h_conv1) h_pool1_drop = tf.nn.dropout(h_pool1, keep_prob) # [-1, 14, 14, 32] h_conv2 = tf.nn.relu(conv(h_pool1_drop, W_conv2) + b_conv2) h_pool2 = max_pooling(h_conv2) h_pool2_drop = tf.nn.dropout(h_pool2, keep_prob) # [-1, 7, 7, 64] h_fc1 = tf.reshape(h_pool2_drop, [-1, 7*7*64]) h_fc1 = tf.nn.relu(tf.matmul(h_fc1, W_fc1) + b_fc1) h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob) # [-1, n_hidden] -&gt; [-1, n_output] # return tf.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2) return tf.matmul(h_fc1_drop, W_fc2) + b_fc2pred = CNN(x_image, W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2, keep_prob)# loss = -tf.reduce_sum(y * tf.log(pred))loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = pred, labels = y))optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)corrent_pred = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))accuracy = tf.reduce_mean(tf.cast(corrent_pred, tf.float32))init = tf.global_variables_initializer()with tf.Session() as sess: with tf.device(&apos;/gpu:0&apos;): sess.run(init) for step in range(train_iters): batch_x, batch_y = mnist.train.next_batch(batch_size) batch_x = batch_x.reshape(batch_size, time_step, n_input) sess.run(optimizer, feed_dict = &#123;x: batch_x, y: batch_y, keep_prob: dropout&#125;) if step % 100 == 0: acc = sess.run(accuracy, feed_dict = &#123;x: batch_x, y: batch_y, keep_prob: 1.0&#125;) cost = sess.run(loss, feed_dict = &#123;x: batch_x, y: batch_y, keep_prob: 1.0&#125;) print(&quot;MSG : Epoch &#123;&#125;, Training accuracy = &#123;:.6f&#125;, Training loss = &#123;:.5f&#125;&quot;.format((step // 100) + 1, acc, cost)) test_data = mnist.test.images.reshape(-1, time_step, n_input) test_labels = mnist.test.labels print(sess.run(accuracy, feed_dict = &#123;x: test_data, y: test_labels, keep_prob: 1.0&#125;)) 至此，基本能够掌握Tensorflow在神经网络构建过程中的一些流程细节。","categories":[],"tags":[{"name":"Tensorflow","slug":"Tensorflow","permalink":"http://yoursite.com/tags/Tensorflow/"}]},{"title":"挖掘神经网络的本质","slug":"Feature","date":"2017-08-09T03:10:11.000Z","updated":"2017-08-09T03:11:43.872Z","comments":true,"path":"2017/08/09/Feature/","link":"","permalink":"http://yoursite.com/2017/08/09/Feature/","excerpt":"","text":"Features &amp; Feature RepresentationIntroduction在神经网络训练过程中，我们往往会因为无法理解输入和输出数据之间的关系而面临无从选择神经网络结构模块的问题。为了进一步理解神经网络的功能和明白每一层神经网络层对输出的贡献程度，我们就必须了解这些输入在经过神经网络处理后是如何改变和反应在输出数据中的。 Experiment以传统的分类问题为例，想要利用神经网络解决分类的问题，就必须明确我们的输入数据拥有的哪些 特征（Features） 能够帮助我们区分这些输入从而将他们分配到不同的 类别（Labels）。 不同的特征数据对分类的结果具有不同的影响力，这也使得我们的神经网络需要学习一个能够区分特征的能力，而这个能力就是我们所谓的 权重值（Weights）。不同的权重值控制输入的特征值能够以不同的力度作用在最终的结果上，从而达到区分标记的作用。 以二维空间的散点二分类问题为例子，图中的点具有两个Label值，分别为 “蓝色” 和 “橙色”。而反应他们分布情况的特征可能有很多，比如空间的坐标值（X1 和 X2）或是距离原点（0, 0）的距离等。这里我们取坐标值作为输入的特征值。 特征值的输入方式有很多，除了特征值自己本身，我们还可以通过数学模型将这些特征值进行组合和转换，从而衍生出另一种特征值。这和神经网络层所做的事情十分类似，他们都是通过现有的特征想方设法组合出一些更加具有代表性的区分特征，从而拉近输入数据和Label之间的距离。 假设我们的特征值 X1 能够将数据空间的分布从X1 = 0处切分开来。 而组合特征值 X1X2 能够将数据空间的分布从X1 = 0和X2 = 0处同时切分开来，这时我们就可以利用这些特征表示法对最终的分布集合进行一个调整： 图中左边为我们选择使用的输入特征值和对应的区分方式。经过3层的神经网络层，它能够将这些特征的区分方式进行组合（动态增强某些部分）和调整（动态削弱某个部分），得到另外一个特征的表示（Feature Representation），这些表示方式会对最后的模型进行直接的影响。 神经网络的全连接（Fully Connected）也是有权重之分的，图中橙色的连接表示传入的Feature对当前的特征构建是有负向的影响（需要削弱）的，而相反蓝色的连接表示传入的Feature对当前的特征构建是有正向影响（需要加强）的。而线条的深浅则表示Feature对神经网络层的作用强度，越深的颜色表示影响越强烈。 如果我们观察每一个神经网络层中产生的任何一个新的特征表示（Feature Representation），我们就能观察到它们是如何作用在神经网络分配中的。原先的Feature无法在图中画出圆形的间隔区域，因此我们需要通过神经网络的计算来对Feature进行 变形和组合，让这些Feature能够更好地拟合我们的数据集。 训练过程中，神经网络会通过反向传递的方式动态调整layer中的Feature Representation，让这些形成的分割区域在经过了每次迭代之后能够更好的优化边缘，形成更完美的分类器。如果资料内部的噪声（Noise）比较少的时候，甚至可以达到100%的区分率（即loss = 0）。 但是现实生活中的数据是无法做到完全没有噪声干扰的，些许的噪声都会让资料集看起来无法完全区隔开来（如上图所示）。这时候我们通常就会选择使用维度扩充的方式，让他们在更高维度上进行收敛（也就是寻找其他特征，其中X1为第一维度，X2为第二维度），然后在将这些特征压缩成其他的Feature Representation。 Conclusion训练完毕的模型可以很好地通过Feature Representation将数据集在有限维度空间中区隔开来。但是不能忽视的一点是，我们的模型是用来最终判断资料特性而选择的模型，不是为了完全拟合训练数据的产物。因此我们往往不会选择训练误差最小的模型作为我们的最终模型，原因是因为这些模型的灵活度太低。 如上图所示，深色的点表示我们测试集资料，不难看出测试集的分布情况和训练集还是具有一定的差距的，如果我们的模型过分依赖训练集的边缘特性，那么在预测过程中就没有办法很好地区分那些全新的（训练集中未出现的）数据，反而造成测试误差的提升。因此我们需要通过类似Cross Validation等评估方式来让模型训练结果保持在较好的一个的动态范围内。","categories":[],"tags":[{"name":"Feature","slug":"Feature","permalink":"http://yoursite.com/tags/Feature/"},{"name":"Feature Representation","slug":"Feature-Representation","permalink":"http://yoursite.com/tags/Feature-Representation/"},{"name":"Neural Netword","slug":"Neural-Netword","permalink":"http://yoursite.com/tags/Neural-Netword/"}]},{"title":"十大常见机器学习算法","slug":"ML-algorithms","date":"2017-08-08T08:09:23.000Z","updated":"2017-08-08T08:11:02.738Z","comments":true,"path":"2017/08/08/ML-algorithms/","link":"","permalink":"http://yoursite.com/2017/08/08/ML-algorithms/","excerpt":"","text":"常用的机器学习算法，几乎可以用在所有的数据问题上： 线性回归（Linear Regression）线性回归通常用于根据连续变量估计实际数值等问题上。通过拟合最佳的直线来建立自变量（X，features） 和 因变量（Y，labels） 的关系。这条直线也叫做回归线，并用Y = a* X + b来表示。 在这个等式中： Y : 因变量（也就是Labels） a : 斜率（也就是Weights） X : 自变量（也就是Features） b : 截距（也就是Bias） 系数 a 和 b 可以通过最小二乘法（即让所有pairs带入线性表达式等号两边的方差和最小）获得。 逻辑回归（Logistic Regression）逻辑回归虽然名字中带有回归字样，但其实是一个分类算法而不是回归算法。该算法根据已知的一系列因变量估计离散的数值（0或1，代表假和真）。该算法通过将数据拟合进一个逻辑函数来预估一个事件发生的概率。由于其估计的对象是概率，所以输出的值大都在0和1之间。 逻辑回归通常用于解决二分类的问题，例如判断人是男是女等。逻辑回归就是通过人的一些基本性状特征来判断属于男女的概率。 从数学角度看，几率的对数使用的是预测变量的线性组合模型。1234# Probability of event occurence / not occurenceodds = p / (1 - p)ln(odds) = ln(p / (1 - p))logit(p) = ln(p / (1 - p)) = b0 + b1X1 + b2X2 + ... + bnXn 式子中 p 指的是特征出现的概率，它选用使观察样本可能性最大的值（极大似然估计）作为参数，而不是通过最小二乘法得到。 那么为什么要取对数log呢？ 简而言之就是对数这种方式是复制阶梯函数最好的方法之一。 关于改进模型的方法： 加入交互项（X1 * X2等） 对输入输出进行正规化 使用非线性模型 决策树（Decision Tree）该算法属于监督式学习的一部分，主要用来处理分类的问题，它能够适用于分类连续因变量。我们将主体分成两个或者更多的类群，根据重要的属性或者自变量来尽可能多地区分开来。 根据不同的决策属性，我们可以依次将输入进行分类，最终会得到一个标签（Label）。为了把总体分成不同组别，需要用到许多技术，比如Gini、Information Gain 和 Entropy 等。 Gini 图中的实际分配曲线（红线）和绝对平衡线（绿线）之间的面积为A，和绝对不平衡线（蓝线）之间的面积为B，则横纵坐标之间的比例的Gini系数为： A为零时，Gini系数为0，表示完全平衡。B为零时，Gini系数为1，表示完全不平衡。 Information Gain &amp; Entropy在我们建立决策树的时候，常常会有许多属性，那么用哪一个属性作为数的根节点呢？这个时候就需要用到 信息增益（Information Gain） 来衡量一个属性区分以上数据样本的能力强弱。信息增益越大的属性作为数的根节点，就能使得这棵树更加简洁。 以图中数据为例，要想知道信息增益，就必须先算出分类系的熵值（Entropy）。最终结果的label是yes或者no，所以统计数量之后共有9个yes和5个no。这时候P（“yes”） = 9 / 14，P（“no”） = 5 / 14。这里的熵值计算公式为： 之后就可以计算每一个属性特征的信息增益（Gain）了。以wind属性为例，Wind为Weak的共有8条，其中yes的有6条，no的有2条；为Strong的共有6条，其中yes的有3条，no的也有3条。因此相应的熵值为： 现在就可以计算Wind属性的信息增益了： 支持向量机（Support vector machine,SVM）SVM是一种常用的机器学习分类方式。在这个算法过程中，我们将每一笔数据在N维度的空间中用点表示（N为特征总数，Features），每个特征的值是一个坐标的值。 如果以二维空间为例，此时有两个特征变量，我们会在空间中画出这两个变量的分布情况，每个点都有两个坐标（分别为tuples所具有的特征值组合）。 现在我们找一条直线将两组不同的数据在维度空间中分开。分割的曲线满足让两个分组中的距离最近的两个点到直线的距离动态最优化（都尽可能最近）。 那么看到这里一定很多人和我一样有一个疑问，那就是这种线性分类的SVM和之前提到的逻辑回归（Logistic Regression）有什么区别呢？ 其实他们在二维空间的线性分类中都扮演了重要的角色，其主要区别大致可分为两类： 寻找最优超平面的方式不同。 形象来说就是Logistic模型找的超平面（二维中就是线）是尽可能让所有点都远离它。而SVM寻找的超平面，是只让最靠近的那些点远离，这些点也因此被称为支持向量样本，因此模型才叫支持向量机。 SVM可以处理非线性的情况。 比Logistic更强大的是，SVM还可以处理非线性的情况（经过优化之后的Logistic也可以，但是却更为复杂）。 朴素贝叶斯（Naive Bayesian）在假设变量间相互独立的前提下，根据贝叶斯定理（Bayesian Theorem）可以推得朴素贝叶斯这个分类方法。通俗来说，一个朴素贝叶斯分类器假设分类的特性和其他特性不相关。朴素贝叶斯模型容易创建，而且在非监督式学习的大型数据样本集中非常有用，虽然简单，却能超越复杂的分类方法。其基本思想就是：对于给出的待分类项，求解在此项出现的条件下各个目标类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。 贝叶斯定理提供了从P（c）、P（x）和P（x | c）计算后验概率P（c | x）的方法: 式子中的变量表示如下： P（c | x）是已知预测变量（属性特征）的前提下，目标发生的后验概率。 P（c）是目标发生的先验概率。 P（x | c）是已知目标发生的前提下，预测变量发生的概率。 P（x）是预测变量的先验概率。 举一个例子： 这是一个训练资料集，提供一些身体特征，用来预测人的性别。此时假设特征之间独立且满足高斯分布，则得到下表： 通过计算方差、均值等参数，同时确认Label出现的频率来判断训练集的样本分布概率，P（male） = P（female） = 0.5。 此时给出测试资料，我们希望通过计算得到性别的后验概率从而判断样本的类型： 男子的后验概率: 女子的后验概率: 证据因子（evidence）通常为常数，是用来对结果进行归一化的参数。 因此我们可以计算出相应结果： 最后可以得出后验概率: 因此女性的概率较大，我们估计结果为女性。 K近邻（K Nearest Neighbors）该算法可以用于分类和回归问题，然而我们更常将其被用于解决分类问题上。KNN能够存储所有的案例，通过对比周围K个样本中的大概率情况，从而决定新的对象应该分配在哪一个类别。新的样本会被分配到它的K个最近最普遍的类别中去，因此KNN算法也是一个基于距离函数的算法。 这些距离函数可以是欧氏距离、曼哈顿距离、明氏距离或是汉明距离。前三个距离函数用于连续函数，最后一个用于分类变量。如果K = 1，新的样本就会被直接分到距离最近的那个样本所属的类别中。因此选择K是一个关系到模型精确度的问题。 如图所示，如果我们取K = 3，即为中间的圆圈内，我们可以直观地看出此时绿点应该被归为红三角的一类。而如果K = 5，此时延伸到虚线表示的圆，则此时绿点应该被归为蓝色的类。 在选择KNN之前，我们需要考虑的事情有： KNN在K数量大的时候的计算成本很高。 变量（Features）应该先标准化（normalized），不然会被更高数量单位级别的范围带偏。 越是干净的资料效果越好，如果存在偏离度较高的杂讯噪声，那么在类别判断时就会收到干扰。 欧式距离空间中点X = （X1，X2，X3，…，Xn）与点Y = （Y1，Y2，Y3，…，Yn）的欧氏距离为： 曼哈顿距离在平面上，坐标（X1，X2，…，Xn）的点和坐标（Y1，Y2，…，Yn）的点之间的曼哈顿距离为: 明氏距离两点 P = (X1，X2，…，Xn) 和 Q = （Y1，Y2，…，Yn）之间的明氏距离为: 其中p取1时为曼哈顿距离，p取2时为欧氏距离。 汉明距离对于固定长度n，汉明距离是该长度字符串向量空间上的度量，即表示长度n中不同字符串的个数。 例子： “toned” 和 “roses” 之间的汉明距离就是3。因为其中 t - &gt; r，n -&gt; s，d -&gt; s 三个字符不相同。 K均值（K-means）K-means方法是一种非监督式学习的算法，能够解决聚类问题。使用K-means算法将一个数据样本归入一定数量的集群中（假设有K个）中，每一个集群的数据点都是均匀齐次的，并且异于其它集群。 K-means算法如何形成集群？ 给一个集群选择K个点，这些点称为质心。 给每一个数据点与距离最接近的质心形成一个集群，也就是K个集群。 根据现有的类别成员，找出每个类别的质心。 当有新的样本输入后，找到距离每个数据点最近的质心，并与质心对应的集群归为一类，计算新的质心位置，重复这个过程直到数据收敛，即质心位置不再改变。 如果新的数据点到多个质心的距离相同，则将这个数据点作为新的质心。 如何决定K值？ K-means算法涉及到集群问题，每个集群都有自己的质心。一个集群的内的质心和个数据点之间的距离的平方和形成了这个集群的平方值之和。我们能够直观地想象出当集群的内部的数据点增加时，K值会跟着下降（数据点越多，分散开来每个质心能够包揽的范围就变大了，这时候其他的集群就会被吞并或者分解）。集群元素数量的最优值也就是在集群的平方值之和最小的时候取得（每个点到质心的距离和最小，分类最精确）。 随机森林（Random Forest）Random Forest是表示决策树总体的一个专有名词。在算法中我们有一系列的决策树（因此为森林）。为了根据一个新的对象特征将其分类，每一个决策树都有一个分类结果，称之为这个决策树投票给某一个分类群。这个森林选择获得其中（所有决策树）投票数最多的分类。 Random Forest中的Decision Tree是如何形成的？ 如果训练集的样本数量为N，则从N个样本中用重置抽样的方式随机抽取样本。这个样本将作为决策树的训练资料。 假如有N个输入特征变量，则定义一个数字m &lt;&lt; M。m表示从M中随机选中的变量，这m个变量中最好的切分特征会被用来当成节点的决策特征（利用Information Gain等方式）。在构建其他决策树的时候，m的值保持不变。 尽可能大地建立每一个数的节点分支。 降维（Dimensionality reduction）当今的社会中信息的捕捉量都是呈上升的趋势。各种研究信息数据都在尽可能地捕捉完善，生怕遗漏一些关键的特征值。对于这些数据中包含许多特征变量的数据而言，看似为我们的模型建立提供了充足的训练材料。但是这里却存在一个问题，那就是如何从上百甚至是上千种特征中区分出样本的类别呢？样本特征的重要程度又该如何评估呢？ 其实随着输入数据特征变量的增多，模型很难拟合众多样本变量（高维度）的数据分类规则。这样训练出来的模型不但效果差，而且消耗大量的时间。 这个时候，降维算法和别的一些算法（比如Decision Tree、Random Forest、主成分分析（PCA） 和 因子分析）就能帮助我们实现根据相关矩阵，压缩维度空间之后总结特征规律，最终再逐步还原到高维度空间的训练模式。 主成分分析（PCA）在多元统计分析中，PCA是一种分析、简化数据集的技术，经常用于减少数据集的维数，同时保留数据集中的对方差贡献最大的那些特征变量。 该算法会根据不同维度的压缩（在这个维度上的投影）来测试各个维度对方差的影响，从而对每一个维度进行重新排序（影响最大的放在第一维度）。之后只需要取有限个数的维度进行训练，就能够保证模型拟合最佳的数据特征了。 因子分析该算法主要是从关联矩阵内部的依赖关系出发，把一些重要信息重叠，将错综复杂的变量归结为少数几个不相关的综合因子的多元统计方法。基本思想是：根据相关性大小把变量分租，使得同组内的变量之间相关性高，但不同组的变量不相关或者相关性低。每组变量代表一个基本结构，即公共因子。 Gradient Boost &amp; Adaboost当我们想要处理很多数据来做一个具有高度预测能力的预测模型时，我们会用到Gradient Boost和AdaBoost这两种Boosting算法。Boosting算法是一种集成学习算法，它结合了建立在多个基础估计值上的预测结果，来增强单个估计值的准确度。 AdaboostBossting能够对一份数据建立多个模型（如分类模型），通常这些模型都比较简单，称为弱分类器（Weak Learner）。每次分类都将上一次分错的数据权重值调大（放大的圆圈），然后再次进行分类，最终得到更好的结果。最终所有学习器（在这里值分类器）共同组成完整的模型。 Gradient Boost与Adaboost不同的是，Gradient Boost在迭代的时候选择梯度下降的方向来保证最后的结果最好。损失函数（Loss function）用来描述模型的误差程度，如果模型没有Over fitting，那么loss的值越大则误差越高。如果我们的模型能够让损失函数值下降，说明它在不断改进，而最好的方式就是让函数在梯度的方向上改变。（类似神经网络的Gradient Descend）","categories":[],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]},{"title":"医疗管理系统","slug":"database","date":"2017-08-04T06:51:50.000Z","updated":"2017-08-04T06:54:32.035Z","comments":true,"path":"2017/08/04/database/","link":"","permalink":"http://yoursite.com/2017/08/04/database/","excerpt":"","text":"Introduction本系统主要是基于 Struts2 MVC架构 + mysql资料库 共同开发的医疗信息管理系统模型。利用JSP打造简易的网页与接口，让用户能够通过系统纪录和查询医疗的细节流程。 下載鏈接 Environment 操作系统：Windows10 资料库：Mysql IDE：Eclipse 开发语言：Jsp + Sql + Java SQL Table资料库端分为五个Table，分别为 Department、Employee、Hospital、Patient 和 Report。 Attribute IntroductionHospital Table: 記錄醫院的具體信息 Hospital_ID:每間醫院的編號（唯一） Hospital_Name:醫院的名稱 Hospital_Address:醫院的地理位置 Hospital_Scale:醫院的規模大小 Department Table: 記錄醫院里各個不同部門的具體信息 Department_ID:醫院裏面不同部門的編號（唯一） Department_Subject:部門的名稱 Department_People:部門的人數 Field:部門所掌管的職能 Employee Table: 記錄醫院工作人員的具體信息 Doctor_ID:每個員工的編號（唯一） Doctor_Name:員工的姓名 Doctor_Age:員工的年齡 Doctor_Specialty:員工的專長 Patient Table: 記錄病人的具體信息 Patient_ID:每個病人的編號（唯一） Patient_Name:病人的姓名 Patient_Age:病人的年齡 Patient_Disease:病人的癥狀 Report Table: 記錄病人病歷記錄的具體信息 Report_ID:每個病歷記錄的編號（唯一） Report_Disease:病歷記錄的病人癥狀 Report_PatientName:病歷記錄的病人姓名 Report_Medicine:病歷記錄的病人用藥情況 ER Diagram Relation Schema Hospital Schema Hospital_ID Hospital_Name Hospital_Address Hospital_Scale Department Schema Department_ID Department_Subject Department_People Field Employee Schema Doctor_ID Doctor_Name Doctor_Name Doctor_Specialty Patient Schema Patient_ID Patient_Name Patient_Age Patient_Disease Report Schema Report_ID Report_Disease Report_PatientName Report_Medicine Relationship Introduction 每個醫院都會有許多不同的部門，每個部門都是隸屬於某一家醫院。 每個醫院部門都會招聘不同數量的員工，未退休的員工會屬於某一個部門。 所有負責醫療工作的員工都會給病人開具病歷證明，所有的病歷證明都是由醫療工作員工開具的。 所有的病人都有自己的病歷記錄，所有的病歷記錄記錄著該病人的醫療情況。 負責醫療工作的員工會給病人看病，同時醫院的員工也有可能是病人。 Usage配置好sql和server之后，就可以通过localhost或者IP来访问系统网址了，这里用的是Tomcat Server來訪問資料庫系統首頁。。 左邊的功能列表可以選擇需要操作的Entity進行不同的資料庫操作。 以醫院管理為例，進入醫院管理操作介面，系統會自動列出所有的數據庫資料。點擊左上角的添加按鈕可以添加新的醫院信息到database；同時可以通過Search的選項來索引資料庫裏面的資料；點擊操作欄位的修改和刪除可以分別對相應的資料進行修改和刪除；最後點擊右上角的手動修改和查詢可以分別通過手動輸入SQL指令來進行修改動作（insert，delete，update）和查詢動作（select）。 添加介面： 可以添加醫院的相關信息到數據庫。 選擇操作： 系統會給出相應的檢索結果： 修改和刪除： 點擊修改操作系統會自動捕捉當前的資料信息，方便進行修改。 點擊刪除操作系統會提示是否刪除，點擊確定則會從資料庫移除相應信息。 手動修改和刪除： 點擊手動修改和刪除操作，系統會跳出相應的輸入框，可以通過手動輸入SQL指令來進行Select檢索或者Insert，Update，Delete等操作。 Nested Query和Aggregate Query（以醫生管理為例）：點擊Nested Query會跳轉至如下畫面。 分別點擊不同的按鈕可以跳轉至相應功能對應的介面。 通過選項可以自動通過Button的方式呼叫資料庫，通過sql指令也可以進行資料庫的操作。 通過選項操作同樣可以用button的方式呼叫資料庫操作，sql指令同樣也能夠進行相應的操作。（注：在sql對於Aggregate操作過程中需要對應下方的欄位進行as重命名）","categories":[],"tags":[{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"},{"name":"System","slug":"System","permalink":"http://yoursite.com/tags/System/"},{"name":"Struts MVC","slug":"Struts-MVC","permalink":"http://yoursite.com/tags/Struts-MVC/"}]},{"title":"Word2Vec on Wikipedia","slug":"word2vec","date":"2017-08-04T06:51:25.000Z","updated":"2017-08-04T07:53:29.800Z","comments":true,"path":"2017/08/04/word2vec/","link":"","permalink":"http://yoursite.com/2017/08/04/word2vec/","excerpt":"","text":"我们知道语言在人际交往当中充当了重要的角色，理解语言的编码就能够了解对方所要表达的意思。而机器不同于人，无法从繁杂的文字当中快速提取有用的信息，因此需要借助一个能够代表文字语言的编码单位，也就是我们说的向量（Vector）。因此训练Word2Vec的模型，用来计算词语之间的相似度似乎成为了解决文字编码问题的不可或缺的重要途径之一。 配置需求 Python3 Gensim &gt;= 2.3.0 (沒試過更低的版本) Opencc jieba 模型训练语料 维基百科官方提供了大约11G的很好的英文語料： 開源數據鏈接。 同時也提供了大約1.5G的中文語料： 開源數據鏈接。 其主要的文档格式以 .xml 为主。 操作流程 下載相應的Python執行檔： 1git clone https://github.com/EternalFeather/Word2Vec-on-Wikipedia-Corpus.git 資料前處理前處理第一階段需要將wiki的 .xml 格式的數據轉換成 text 格式的數據: 通過 word2vec_process.py 實現，基本參數包括： -data： 輸入的維基百科數據集。 -output： 輸出的文件位置和名稱。 1python word2vec_process.py -data enwiki-latest-pages-articles.xml.bz2 -output wiki.en.text Tips: 如果是中文維基百科的語料訓練時，會存在一些繁體和簡體混雜的中文字，如果想要統一字體格式，就可以使用Opencc將字體進行轉換： 1opencc -i wiki.zh.text -o wiki.zh.text.jianti -c zht2zhs.ini 中文的維基百科數據接下來就是需要進行斷詞處理了，這裏使用的中文斷詞工具是 jieba。 這裏利用了gensim裏面處理維基百科的class WikiCorpus，通過 get_texts function將每篇文章換行輸出成text文本，並且已經完成了去標點的工作。運行之後就能夠得到英文維基百科的數據文檔 wiki.en.text(參數可自行設定名稱)。 模型訓練有了文章的text數據集之後，無論是word2vec binary版本還是gensim的word2vec，都可以用來訓練我們的模型，不過後者的運算速度比較快。 模型的建立通過 word2vec_model.py 實現，基本參數包括： -text： 輸入的維基百科文字檔名稱。 -vector： 輸出的向量文檔存儲位置和名稱（默認爲 wiki.en.text.vector）。 -core： 多進程運行使用的cpu數量（默認爲全部）。 1python word2vec_model.py -text wiki.en.text -vector wiki.en.text.vector -core 8 模型測試訓練結束之後就能得到一個gensim原始c版本的word2vec的vector格式的模型，這時候我們就可以利用這些模型進行一些文字的評估測試了： 導入模型進行操作通過 word2vec_eval.py 實現，基本參數包括： -vector： 載入的模型位置和名稱。 -mode： 想要執行模型的功能名稱（包括 similar【預測相關的words】、similarity*【判斷兩個words的相似度】等） 1python word2vec_eval.py -vector wiki.en.text.vector -mode similarity Reference我愛自然語言處理","categories":[],"tags":[{"name":"Word2Vec","slug":"Word2Vec","permalink":"http://yoursite.com/tags/Word2Vec/"},{"name":"Embedding","slug":"Embedding","permalink":"http://yoursite.com/tags/Embedding/"}]},{"title":"中文情緒字典（Chinese Sentiment Lexicon）","slug":"sentiment","date":"2017-08-04T06:51:16.000Z","updated":"2017-08-04T07:58:08.125Z","comments":true,"path":"2017/08/04/sentiment/","link":"","permalink":"http://yoursite.com/2017/08/04/sentiment/","excerpt":"","text":"功能利用 PMI 和 SOC-PMI 等語言統計分析算法，從現有文章中標記一些seed words，通過半監督式學習找出段落中隱含的其他情緒詞匯，從而建立起完整的情緒字典。 情緒字典的覆蓋範圍包括 名詞 、 動詞 和 形容詞 等部分，每個詞都會有一個正向分數（positive）和一個負向分數（negative）。兩個分數的高低可以判斷這個詞的情緒分布狀況。 必要配置 Python2 JDK jieba 使用流程 下載情緒字典程式： 1git clone https://github.com/EternalFeather/Chinese-Sentiment-Lexicon.git 將預設的Seed Word（也就是自行標記的幾個情緒面向詞匯）放入 SentimentLexicon/data/input/Seedwords.txt 中。 將需要提取情緒詞匯的訓練文章放入 SentimentLexicon/data/input/Corpus.txt 中。 運行 SL.jar 文件即可開始訓練過程： 1java -jar &apos;SL.jar&apos; 測試結果 得到的結果會儲存在 SentimentLexicon/data/Propagation/FinalMatrix.csv 文件中。 可以看出在比較詞的正負向上能夠取得比較可觀的結果。","categories":[],"tags":[{"name":"Sentiment Lexicon","slug":"Sentiment-Lexicon","permalink":"http://yoursite.com/tags/Sentiment-Lexicon/"},{"name":"NLP","slug":"NLP","permalink":"http://yoursite.com/tags/NLP/"},{"name":"PMI","slug":"PMI","permalink":"http://yoursite.com/tags/PMI/"}]},{"title":"Gal-game-on-Renpy","slug":"gal","date":"2017-08-02T07:09:53.000Z","updated":"2017-08-04T06:55:14.851Z","comments":true,"path":"2017/08/02/gal/","link":"","permalink":"http://yoursite.com/2017/08/02/gal/","excerpt":"","text":"安裝說明Renpy Platform可以用來設計自己專屬的視覺小說遊戲。 Demo遊戲鏈接提取密碼: m0va 素材來源遊戲使用的圖片、視頻以及音頻的剪輯原素材來源於 FAVORITE 和 YUZUSOFT 遊戲公司，未經授權不得用以商業目的性傳播和使用。大部分圖片經過PS修圖處理，如需轉載請注明出處。 使用說明 將Github上 images.rar 中的三個文件放入下載好的遊戲文件中的 game/images/ 目錄中。 運行 .exe 文件即可開始遊戲。 Demo 主界面（會根據劇情不同有所變化） CG鑑賞頁面 設定頁面 載入頁面 遊戲分支選單 遊戲主題內容部分 遊戲即時選單 選單 ENCYCLOPEDIA 遊戲介紹和玩法功能簡介","categories":[],"tags":[{"name":"Renpy","slug":"Renpy","permalink":"http://yoursite.com/tags/Renpy/"},{"name":"Gal-game","slug":"Gal-game","permalink":"http://yoursite.com/tags/Gal-game/"}]},{"title":"Ubuntu16.04配置深度學習開發環境（CUDA+CUDNN）","slug":"cuda","date":"2017-08-01T08:18:31.000Z","updated":"2018-07-26T03:56:53.818Z","comments":true,"path":"2017/08/01/cuda/","link":"","permalink":"http://yoursite.com/2017/08/01/cuda/","excerpt":"","text":"顯卡規格查詢首先需要確定自己顯卡的規格：1lspci -vnn | grep VGA -A 12 其中nvidia_375就是顯卡的規格指數，後面會用到。 安裝CUDA 8.0前往CUDA 8.0下載頁面選擇好系統參數進行下載。 配置CUDA環境Installation Instructions:123sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.debsudo apt-get updatesudo apt-get install cuda 安裝cuDNN for CUDA 8.0前往cuDNN下載點擊同意並選擇規格後開始下載。 配置cuDNN環境Installation Instructions:1234tar xvzf cudnn-8.0-linux-x64-v5.1-ga.tgzsudo cp cuda/include/cudnn.h /usr/local/cuda/includesudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn* 設定環境變數接下來到.bashrc檔案： 1sudo vim ~/.bashrc 將下面的指令復制到配置文件的末尾： 123export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/lib/nvidia-375export CUDA_HOME=/usr/local/cudaexport PATH=$PATH:/usr/local/cuda/bin 注意：其中的/usr/lib/nvidia-375就是之前查詢的顯卡規格。 安装CUDA 9.0前往CUDA 9.0下載頁面選擇好系統參數進行下載。 配置CUDA環境Installation Instructions:12345sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.debsudo apt-key add /var/cuda-repo-&lt;version&gt;/7fa2af80.pub (其中的entity表示需要自行填写的部分,因版本可能不同,所以建议使用tab来联想不容易出错。)sudo apt-get updatesudo apt-get install cuda Tips ： 这时候就可以使用nvidia-smi指令确认nvidia驱动是否成功安装了。 安裝cuDNN for CUDA 9.0p.s. cuDNN的下载需要注册账号 前往cuDNN下載點擊同意並選擇規格後開始下載。 不需要更改source code只需要下载runtime version即可。 配置cuDNN環境 Installing from a Tar File: 1234567tar -xzvf cudnn-9.0-linux-x64-v7.tgz（同样建议使用tab输入）sudo cp cuda/include/cudnn.h /usr/local/cuda/includesudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64sudo chmod a+r /usr/local/cuda/include/cudnn.h/usr/local/cuda/lib64/libcudnn* Installing from a Debian File Install the runtime library:12sudo dpkg -i libcudnn7_7.0.3.11-1+cuda9.0_amd64.deb(tab不解释) 查看配置結果配置完成後可以查看是否成功配置： 1nvidia-smi -l 即可即時查看GPU的運作情況 安裝Tensorflow-gpu1sudo pip install tensorflow-gpu 安裝之後會加入pip library中： 1pip freeze 如此以來就可以用GPU操作深度學習的框架了。","categories":[],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://yoursite.com/tags/Deep-Learning/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"http://yoursite.com/tags/Tensorflow/"},{"name":"CUDA","slug":"CUDA","permalink":"http://yoursite.com/tags/CUDA/"},{"name":"cuDNN","slug":"cuDNN","permalink":"http://yoursite.com/tags/cuDNN/"}]},{"title":"聊天机器人训练语料整理","slug":"Corpus","date":"2017-07-25T07:15:05.000Z","updated":"2017-08-04T06:54:46.051Z","comments":true,"path":"2017/07/25/Corpus/","link":"","permalink":"http://yoursite.com/2017/07/25/Corpus/","excerpt":"","text":"Dialog Datasets for Training Chatbot在进行Chatbot的研究过程中，除了要有一个漂亮的模型之外，还需要有大量可供训练的语料来强化我们的聊天机器人。越干净的语料就能训练出越接近人类自然语言回复的Chatbot。 目前网上公开的语料大多是一些带有噪音的、数量有限的语料。在这里总结了一些可行的语料以及一些利用爬取工具得到的语料，其中包括： 基本公开语料 dgk_shooter_min.conv中文电影对白语料，噪音大，由于对话未区分说话人，因此对白问答关系难以对应。 ChatBot多语种聊天语料ChatterBot聊天引擎所提供的基本语聊，涵盖语种范围广，但是数量不多，但质量较高，适合模型测试。 DataSets for Natural Language Processing这个是人为收集总结的自然语言处理研究论文以及对应的数据资料集，主要覆盖方面包括了： Question Answering, Dialogue Systems 以及 Goal-Oriented Dialogue System 等。文本都由英文构成，可用于机器翻译和对话模型使用。 小黄鸡对话机器人训练语料这就是网络上流行的小黄鸡对话机器人的训练语料，包括了 xiaohuangji50w_fenciA.conv.zip （已分词） 和 xiaohuangji50w_nofenci.conv.zip （未分词） 两个部分，分词以 “/” 区隔开来，并没有语义上的划分。语料中含有较多表情颜文字，总体对话字数较少，杂讯较多。 白鹭时代中文问答语料由白鹭时代官方论坛问答版块的问题及回复组成，回复选取了标注 “最佳答案” 的记录为目标。人工审核资料，给每一个问题一个可以接受的答案。数量不多，多为问答模式。 Cornell_Movie-Dialogs_Corpus康奈尔大学影视对话资料集，语料包含对话人名称信息，语料为英文，以多轮对话为主。 个人爬取语聊（初步整理） 中文新闻语料利用爬虫从各大新闻网站上爬取的新闻头条和简讯。 PTT八卦版推文利用爬虫从社交软体PTT上对于八卦分类板块的内容进行爬取，原始资料为 PTT八卦板推文.txt 其中包括一些符号和空格杂讯，过滤杂讯（利用统计方式按比例替换成固定符号，降低资料复杂度）之后，通过 单字 或 词组（jieba段词） 等不同方式建立问答语料和字典。 License:公开语料的版权归原作者所有，未经允许不得一个人名义投入盈利性活动。","categories":[],"tags":[{"name":"Chatbot","slug":"Chatbot","permalink":"http://yoursite.com/tags/Chatbot/"},{"name":"Corpus","slug":"Corpus","permalink":"http://yoursite.com/tags/Corpus/"},{"name":"Dialogue","slug":"Dialogue","permalink":"http://yoursite.com/tags/Dialogue/"}]},{"title":"Python简单学","slug":"Python","date":"2017-07-25T06:10:56.000Z","updated":"2017-08-04T06:55:33.518Z","comments":true,"path":"2017/07/25/Python/","link":"","permalink":"http://yoursite.com/2017/07/25/Python/","excerpt":"","text":"Foundation Summary Print Calculation Function Variable While loop For loop If/Elif/Else Condition Function Definition[Def] with/without parameters Global or Local Variable Read or Write files readlines() and readline() Class __init__ constructor input Tuple &amp; List Both are iterative List append insert remove Multi-dimention List Dictionary del(also can used for list) Import Continue &amp; Break Error processing[Try/Except] Zip Output is an object1234567a = [1, 2, 3]b = [4, 5]# Convert to listlist(zip(a, b))# Also we can use for loop to iterate each elements in objectfor i, j in zip(a,b)# Output of list(zip(a, b)) is: [(1, 4), (2, 5)] LambdaExample: 1234def fun1(x, y): return(x + y)fun2 = lambda x, y : x + y# fun1 is the same as fun2 Map Output is an objectExample:12345def fun1(x, y): return(x + y)list(map(fun1, [1, 2, 3], [4, 5]))# Output is: [5, 7]# Note: The output of fun1([1], [2]) is: [1, 2] Copy &amp; Deepcopy python object share address(point)123456789101112131415161718192021222324# ********Copy********:a = [1, 2, 3]b = ab[0] = 11a = b = [11, 2, 3]# id(a) == id(b) is Trueimport copyc = copy.copy(a)# id(a) == id(b) is False# Note:a = [1, 2, [3, 4]]d = copy.copy(a)# id(a) == id(d) is False# id(a[2]) == id(d[2]) is True# Because d[2] == a[2] are both object# Note2:a = 2b = aa = 3# b = 2 auto copy# ********Deepcopy ********:e = copy.deepcopy(a)# id(a[2]) == id(e[2]) is False Multi-ThreadLead to Improve Efficiency123456789101112131415161718192021222324252627import threadingimport time# check the number of threadsprint(threading.active_count())# check all the details of threads print(threading.enumerate())# check which threads are workingprint(threading.current_thread())# ********Extend********:def thread_job(): print(&quot;MSG : This is a new Thread, number = %s\\n&quot; % threading.current_thread()) for i in range(10): time.sleep(0.1) print(&quot;MSG : T1 Finished.\\n&quot;)new_thread = threading.Thread(target = thread_job, Name = &apos;T1&apos;)def thread_job2(): print(&quot;MSG : T2 Start.\\n&quot;) print(&quot;MSG : T2 Finished.\\n&quot;)new2_thread = threading.Thread(target = thread_job2, Name = &apos;T2&apos;)new_thread.start()new2_thread.start()# ********Join********:# print(&quot;MSG : Done.\\n&quot;)# when we run the code &quot;Done&quot; will show before &quot;T2 Finished&quot; new2_thread.join()print(&quot;MSG : Done.\\n&quot;)# T1 is slower than T2, so that &quot;Done&quot; will show before &quot;T1 Finished&quot; Example of queue using in thread:123456789101112131415161718192021222324252627282930# ********Queue********:import threadingimport timefrom queue import Queuedef job(l, q): for i in range(len(l)): l[i] = l[i] ** 2 time.sleep(1) # thread can not return value # return l q.put(l)def multithreading(): q = Queue() threads = [] data = [[1,2,3], [4,5,6], [7,8,9]] for i in range(3): t = threading.Thread(target = job, args = (data[i], q)) t.start() print(&quot;MSG : Number of thread is %s&quot; % threading.active_count()) threads.append(t) [t.join() for t in threads] results = [] for _ in range(3): results.append(q.get()) print(results) if __name__ == &apos;__main__&apos;: multithreading() Global Interpreter lock(GIL):12345678910111213141516171819202122232425262728293031323334353637# ********GIL********:# GIL shows that only one calculation unit can be run at a time# Therefore, for example, the efficiency of 4-threading is not equal to normal&apos;s * 4import threadingfrom queue import Queueimport copyimport timedef job(l, q): result = sum(l) q.put(result)def multi(l): q = Queue() threads = [] for i in range(4): t = threading.Thread(target = job, args = (copy.copy(l), q), name = &apos;T%i&apos; % i) t.start() threads.append(t) [t.join() for t in threads] total = 0 for _ in range(4): total += q.get() print(total) def normal(l): total = sum(l) print(total) if __name__ == &apos;__main__&apos;: l = list(range(1000000)) current_time = time.time() normal(l*4) print(&apos;MSG : normal time: &apos;, time.time() - current_time) current_time = time.time() multi(l) print(&apos;MSG : multithreading time: &apos;, time.time() - current_time) Lock example(Squential operation multi-thread)12345678910111213141516171819202122232425262728# ********Lock********:imort threadingdef job1(): global A, lock lock.acquire() for i in range(10): A += 1 print(&apos;MSG : job1 &apos;, A) lock.release() def job2(): global A, lock lock.acquire() for i in range(10): A += 10 print(&apos;MSG : job2 &apos;, A) lock.release() if __name__ == &apos;__main__&apos;: lock = threading.Lock() A = 0 t1 = threading.Thread(target = job1) t2 = threading.Thread(target = job2) t1.start() t2.start() t1.join() t2.join() MultiprocessingCreate a process123456789101112# ********Extend********:import multiprocessing as mpimport threading as tddef job(a, b): print(a + b)# processing must run in __main__if __name__ == &apos;__main__&apos;: new_process = mp.Process(target = job, args = (1, 2)) new_process.start() new_process.join() Example of queue using in processing:12345678910111213141516171819202122# ********Queue********:import multiprocessing as mpdef job(q): result = 0 for i in range(1000): result += i + i ** 2 + i ** 3 # return (result) q.put(result) if __name__ == &apos;__main__&apos;: q = mp.Queue() # Don&apos;t forget the &apos;,&apos; after args while the number of parameter is one p1 = mp.Process(target = job, args = (q, )) p2 = mp.Process(target = job, args = (q, )) p1.start() p2.start() p1.join() p2.join() result1 = q.get() result2 = q.get() print(result1 + result2) Efficiency Comparison(normal, multithreading, multiprocessing)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# ********Efficiency Comparison********:import multiprocessing as mpimport threading as tdfrom queue import Queueimport timedef job(q): result = 0 for i in range(100000): result += i + i ** 2 + i ** 3 # return (result) q.put(result) def normal(): result = 0 for _ in range(2): for i in range(100000): result += i + i ** 2 + i ** 3 print(&apos;MSG : normal &apos;, result) def multiprocess(): q = mp.Queue() p1 = mp.Process(target = job, args = (q, )) p2 = mp.Process(target = job, args = (q, )) p1.start() p1.join() p2.start() p2.join() result1 = q.get() result2 = q.get() print(&quot;MSG : Processing &quot;, result1 + result2) def multithread(): q = Queue() t1 = td.Thread(target = job, args = (q, )) t2 = td.Thread(target = job, args = (q, )) t1.start() t2.start() t1.join() t2.join() result1 = q.get() result2 = q.get() print(&quot;MSG : Threading &quot;, result1 + result2) if __name__ == &apos;__main__&apos;: current_time = time.time() normal() print(&quot;MSG : normal time: &quot;, time.time() - current_time) current_time = time.time() multithread() print(&quot;MSG : multithread time: &quot;, time.time() - current_time) current_time = time.time() multiprocess() print(&quot;MSG : multiprocess time: &quot;, time.time() - current_time ) Processing Pool123456789101112131415161718192021# ********Pool********:import multiprocessing as mpdef job(x): return x * xdef multiprocess(): pool = mp.Pool(processes = 3) # type = &apos;list&apos; result = pool.map(job, range(10)) print(result) # type = &apos;int&apos; result = pool.apply_async(job, (2, )) print(result.get()) # Note: pool.apply_async can only input one number for iterating # type = &apos;object&apos; multi_result = [pool.apply_async(job,(i, )) for i in range(10)] print([result.get() for result in multi_result]) if __name__ == &apos;__main__&apos;: multiprocess() Shared memory1234567# ********Shared memory********:import multiprocessing as mpvalue = mp.Value(&apos;d&apos;, 1)# can be only one dimensionarray = mp.Array(&apos;i&apos;, [1,2,3])# Value and Array can be share among multiple cores Lock example(avoid different cores processing out of order with shared variable)123456789101112131415161718192021222324# ********Lock********:import multiprocessing as mpimport timedef job(v, num, l): l.acquire() for _ in range(10): time.sleep(0.1) v.value += num print(v.value) l.release()def multiprocess(): l = mp.Lock() v = mp.Value(&apos;i&apos;, 0) p1 = mp.Process(target = job, args = (v, 1, l)) p2 = mp.Process(target = job, args = (v, 3, l)) p1.start() p2.start() p1.join() p2.join() if __name__ == &apos;__main__&apos;: multiprocess() Data ProcessingNumpyNumpy Foundation123456789# ********Numpy Foundation********:import numpy as nparray = np.array([[1,2,3],[2,3,4]])print(array)print(&quot;MSG : number of dims= &quot;, array.ndim)# If only have one dimension, shape will be (num, ) which represent it can be iteratedprint(&quot;MSG : shape= &quot;, array.shape)print(&quot;MSG : size= &quot;, array.size) Numpy Array1234567891011121314151617181920212223# ********Numpy Array********:import numpy as npa = np.array([[2,3,4], [5,6,7]], dtype = np.int)print(a.dtype)b = np.zeros((3, 4), dtype = np.int32)print(b)c = np.ones((3, 4), dtype = np.int32)print(c)# The output is a list of numbers that are approximate to zero d = np.empty((3, 4), dtype = np.int32)print(d)e = np.arange(10, 20, 2)f = np.arange(12).reshape((3,4))print(e)print(f)g = np.linspace(1, 10, 20)print(g) Some Useful Numpy Calculation Formula1234567891011121314151617181920212223242526272829303132333435# ********Numpy Calculation********:import numpy as npa = np.array([10, 20, 30, 40])b = np.arange(4)c = a - b# Output list composed of int numbersprint(c)# Output list composed of boolean elementsprint(b &lt; 3)np.dot(a, b)rd = np.arange(2, 6)# Output has 2 dimensions(0 -&gt; col; 1 -&gt; row)np.sum(rd, axis = 1)np.min(rd, axis = 0)np.max(rd)np.argmin(rd)np.mean(rd)np.average(rd)np.median(rd)# Output is [2, 5, 9, 14]np.cumsum(rd)# Output is [1, 1, 1]np.diff(rd)# Output composed of multi-dimensional array representing the row and col number of all nonzero elements in rd array respectivelynp.nonzero(rd)# sort among each dimensions independentnp.sort(rd)np.sort(rd.reshape((2, 2)))# transpose also we can use rd.T to transpose directlynp.transpose(rd)# matrix multiplication(rd.T).dot(rd)np.clip(rd, 2, 4)# Note: we can use axis to choose 0 -&gt; col or 1 -&gt; row as the target for calculation Search From Numpy Array1234567891011121314151617181920# ********Numpy Index Search********:import numpy as npA = np.arange(3, 15).reshape((3, 4))A[2] # Output is [11, 12, 13, 14]A[2][1] # the same asA[1, 2]A[:, 1]A[1, 1:2]for row in A: print(row)# Trickfor colume in A.T: print(colume)# flat function parse elements from A like a generator# Note: A.flat is different from A.flatten()# pre-one is an object and the next output a listfor item in A.flat: print(item) Merge Numpy Array1234567891011121314151617# ********Merge Numpy Array********:import numpy as npA = np.array([1, 1, 1])B = np.array([2, 2, 2])# vertical stack with output [[1, 1, 1], [2, 2, 2]]C = np.vstack((A, B))print(A.shape, C.shape)# Horizontal stack with with output [1, 1, 1, 2, 2, 2]D = np.hstack((A, B))# Note: transpose function can not convert shape(3,) into shape(,3)A_ = A[:, np.newaxis]) # newaxis is an extend dimension# If we want to get output by merge col-values like [[1, 2], [1, 2], [1, 2]] we can use:E = np.hstack((A[:, np.newaxis], B[:, np.newaxis]))# the same as:F = np.concatenate((A_, A_), axis = 1)# Note: np.concatenate((A, B), axis = 1) will shuffle an error because concatenate will reduce dimension when mergement operation happened, and A or B only have one dimension Split Numpy Array12345678910111213# ********Split Numpy Array********:import numpy as npA = np.arange(12).reshape((3, 4))# every pieces should have the same lengthnp.split(A, 2, axis = 1)# If you want to split into pieces that in different size# Binary split from left to rightnp.array_split(A, 3, axis = 1)# Vertical splitnp.vsplit(A, 3)# Horizontal splitnp.hsplit(A, 2) Numpy Array Copy12345678910111213141516# ********Numpy Array Copy********:import numpy as npa = np.arange(4, dtype = np.float32)b = ac = ad = ba[0] = 0.3# now a = b = c = d = [0.30000001, 1., 2., 3.]b is a # result is True# Note: copy object connected with pointb = a.copy() # deep copy# orimport copyb = copy.copy(a)a is b # result is False PandasPandas Foundation1234567891011121314151617181920# ********Pandas Data Representation********:import pandas as dpimport numpy as nps = pd.Series([1, 3, 6, np.nan, 44, 1])dates = pd.date_range(&apos;20170101&apos;, periods = 6)df = pd.DataFrame(np.random.randn(6, 4), index = dates, columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])df1 = pd.DataFrame(np.arange(12).reshape((3, 4)))df2 = pd.DataFrame(&#123;&apos;A&apos;: 1., &apos;B&apos;: pd.Timestamp(&apos;20130102&apos;), &apos;C&apos;: pd.Series(1, index = list(range(4)), dtype = &apos;float32&apos;), &apos;D&apos;: np.array([3] * 4, dtype = &apos;int32&apos;), &apos;E&apos;: pd.Categorical([&apos;test&apos;, &apos;train&apos;, &apos;test&apos;, &apos;train&apos;]), &apos;F&apos;: &apos;foo&apos;&#125;)print(df2.dtypes)print(df2.index)print(df2.columns)print(df2.values)# Only fit to number elementsprint(df2.describe()) # result index includes count, mean, std, min, 25%, 50%, 75%, max...print(df2.T)# Sort for columnsprint(df2.sort_index(axis = 1, ascending = False))# Sort for column valuesprint(df2.sort_values(by = &apos;E&apos;)) Pandas Data Sampling1234567891011121314151617181920# ********Data Sampling********:import pandas as dpdf = pd.DataFrame(np.arange(24).reshape((6, 4)), index = pd.date_range(&apos;20130101&apos;, periods = 6), columns = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])print(df[&apos;A&apos;]) # the same as :print(df.A)print(df[0: 3], &apos;\\n&apos;, df[&apos;20130101&apos;: &apos;20130103&apos;])# select by label:print(df.loc[&apos;20130102&apos;])print(df.loc[&apos;20130102&apos;, [&apos;A&apos;, &apos;B&apos;]])# select by position:print(df.iloc[3, 1])print(df.iloc[[1, 3, 5], 1: 3])# mixed selection:print(df.ix[:3, [&apos;A&apos;, &apos;C&apos;]])# Boolean indexing selection:print(df[df.A &gt; 8])# multi-conditions(Can not use &apos;and&apos;):print(df[df[2] &gt; 3][df[1] &lt; 2]) Pandas Value Config12345678910# ********Pandas change value********:import pandas as dpdf = pd.DataFrame(np.arange(24).reshape((6, 4)), index = pd.date_range(&apos;20130101&apos;, periods = 6), columns = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])df.iloc[2, 2] = 1111df.loc[&apos;20130101&apos;, &apos;B&apos;] = 2222df[df[&apos;A&apos;] &gt; 0] = 0# add a new columndf[&apos;F&apos;] = np.nandf[&apos;E&apos;] = pd.Series(np.arange(6, dtype = np.int32)+1, index = pd.date_range(&apos;20130101&apos;, periods = 6)) Pandas Handling Nan12345678910111213# ********Pandas NaN********:import pandas as dpdf = pd.DataFrame(np.arange(24).reshape((6, 4)), index = pd.date_range(&apos;20130101&apos;, periods = 6), columns = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])df.iloc[0, 1] = np.nandf.iloc[1, 2] = np.nan# &apos;any&apos; means we drop the row as long as nan exist, &apos;all&apos; means we drop the row if all the elements are nanprint(df.dropna(axis = 0, how = &apos;any&apos;)) # how = &#123;&apos;any&apos;, &apos;all&apos;&#125;print(df.drop(&apos;A&apos;, axis = 1))# replace nanprint(df.fillna(value = 0))print(df.isnull()) # result is a dictionary with &apos;True&apos; and &apos;False&apos;print(np.any(df.isnull()) == True) Pandas Read and Write1234567891011121314# ********Pandas Read and Write********:import pandas as dp# Some useful function like: read_csv, read_excel, read_sql, read_json ...df = pd.read_csv(&apos;Sample.csv&apos;, &apos;r&apos;)# Sample.csv# A,B,C,D# 0,1,2,3# 4,5,6,7# 8,9,10,11# Save as pickle filedf.to_pickle(&apos;Sample.pickle&apos;) Pandas Concatenating123456789101112131415161718192021222324252627# ********Pandas Concatenating********:import pandas as dpimport numpy as npdf1 = pd.DataFrame(np.zeros((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])df2 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])df3 = pd.DataFrame(np.ones((3, 4))*2, columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])# ignore_index will reset the index from top to bottomresult1 = pd.concat([df1, df2, df3], axis = 0, ignore_index = True)# concat-join, [&apos;inner&apos;, &apos;outer&apos;]df4 = pd.DataFrame(np.zeros((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], index = [1, 2, 3])df5 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;], index = [2, 3, 4])# use NaN as the default valueresult2 = pd.concat([df4, df5], ignore_index = True, join = &apos;inner&apos;) # &apos;inner&apos; only remain the same parts# concat-join_axesresult3 = pd.concat([df4, df5], axis = 1, join_axes = [df4.index]) # result&apos;s index is only the index of df4# appenddf6 = pd.DataFrame(np.zeros((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])df7 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])df8 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;], index = [2, 3, 4])result4 = df6.append(df7, ignore_index = True)result5 = df6.append([df7, df8])s1 = pd.Series([1, 2, 3, 4], index = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])result6 = df6.append(s1, ignore_index = True) Pandas Merge(concat without the same parts)1234567891011121314151617181920212223242526272829303132# ********Pandas Merge********:import pandas as dpimport numpy as np# merge by index named &apos;key&apos;(may be used in database)df1 = pd.DataFrame(&#123;&apos;key&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;, &apos;K3&apos;], &apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;], &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;]&#125;)df2 = pd.DataFrame(&#123;&apos;key&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;, &apos;K3&apos;], &apos;C&apos;: [&apos;C0&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;], &apos;D&apos;: [&apos;D0&apos;, &apos;D1&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;)result = pd.merge(df1, df2, on = &apos;key&apos;) # we have to make sure these two frames contain the same index named &apos;key&apos;# consider two keysdf1 = pd.DataFrame(&#123;&apos;key1&apos;: [&apos;K0&apos;, &apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;], &apos;key2&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K0&apos;, &apos;K1&apos;], &apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;], &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;]&#125;)df2 = pd.DataFrame(&#123;&apos;key1&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K1&apos;, &apos;K2&apos;], &apos;key2&apos;: [&apos;K0&apos;, &apos;K0&apos;, &apos;K0&apos;, &apos;K0&apos;], &apos;C&apos;: [&apos;C0&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;], &apos;D&apos;: [&apos;D0&apos;, &apos;D1&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;)# default join = &apos;inner&apos;result = pd.merge(df1, df2, on = [&apos;key1&apos;, &apos;key2&apos;])result2 = pd.merge(df1, df2, on = [&apos;key1&apos;, &apos;key2&apos;], how = &apos;outer&apos;) # how = &#123;&apos;left&apos;, &apos;right&apos;, &apos;outer&apos;, &apos;inner&apos;&#125;# consider indicator(detail of merge)df1 = pd.DataFrame(&#123;&apos;col1&apos;: [0, 1], &apos;col_left&apos;: [&apos;a&apos;, &apos;b&apos;]&#125;)df2 = pd.DataFrame(&#123;&apos;col1&apos;: [1, 2, 2], &apos;col_right&apos;: [2, 2, 2]&#125;)result = pd.merge(df1, df2, on = &apos;col1&apos;, how = &apos;outer&apos;, indicator = True)result1 = pd.merge(df1, df2, on = &apos;col1&apos;, how = &apos;outer&apos;, indicator = &apos;indicator_column&apos;) # rename &apos;indicator&apos;# merged by indexdf1 = pd.DataFrame(&#123;&apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;], &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;]&#125;, index = [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;])df2 = pd.DataFrame(&#123;&apos;C&apos;: [&apos;C0&apos;, &apos;C2&apos;, &apos;C3&apos;], &apos;D&apos;: [&apos;D0&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;, index = [&apos;K0&apos;, &apos;K2&apos;, &apos;K3&apos;])result = pd.merge(df1, df2, left_index = True, right_index = True, how = &apos;outer&apos;)result1 = pd.merge(df1, df2, left_index = True, right_index = True, how = &apos;outer&apos;)# handle overlappingdf1 = pd.DataFrame(&#123;&apos;k&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;], &apos;age&apos;: [1, 2, 3]&#125;)df2 = pd.DataFrame(&#123;&apos;k&apos;: [&apos;K0&apos;, &apos;K0&apos;, &apos;K3&apos;], &apos;age&apos;: [4, 5, 6]&#125;)result = pd.merge(df1, df2, on = &apos;k&apos;, suffixes = [&apos;_boy&apos;, &apos;_girl&apos;], how = &apos;inner&apos;) Pandas Plot(View)1234567891011121314151617181920212223# ********Pandas Plot********:import pandas as dpimport numpy as npimport matplotlib.pyplot as plt# Seriesdata = pd.Series(np.random.randn(1000), index = np.arange(1000))data = data.cumsum()# plt.plot(x = horizontal_value1, y = vertical_value)data.plot()plt.show()# DataFramedata = pd.DataFrame(np.random.randn(1000).reshape((250, 4)), index = np.arange(250), columns = list((&quot;ABCD&quot;)))data = data.cumsum()data.plot()plt.show()# scatter -&gt; plt.scatter(x = .., y = ..)# plot methods = &#123;&apos;bar&apos;, &apos;hist&apos;, &apos;box&apos;, &apos;kde&apos;, &apos;area&apos;, &apos;scatter&apos;, &apos;hexbin&apos;, &apos;pie&apos;&#125;a = data.plot.scatter(x = &apos;A&apos;, y = &apos;B&apos;, color = &apos;DarkBlue&apos;, label = &apos;Class 1&apos;) # only can hold 2 elementsdata.plot.scatter(x = &apos;A&apos;, y = &apos;C&apos;, color = &apos;DarkGreen&apos;, label = &apos;Class 2&apos;, ax = a)plt.show() MatplotlibMatplotlib Foundation12345678# ********Matplotlib Foundation********:import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-1, 1, 50)y = x * 2 + 1plt.plot(x, y)plt.show() Matplotlib Figure12345678910111213# ********Matplotlib Figure********:import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 50)y1 = 2 * x + 1y2 = x ** 2plt.figure()plt.plot(x, y1)plt.figure(num = 3, figsize = (8, 5))plt.plot(x, y1)plt.plot(x, y2, color = &apos;red&apos;, linewidth = 1.0, linestyle = &apos;--&apos;)plt.show() Matplotlib Setting12345678910111213141516171819202122232425262728293031323334353637383940414243# ********Matplotlib Setting********:import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 50)y1 = 2 * x + 1y2 = x ** 2plt.figure()plt.plot(x, y2)plt.plot(x, y1, color = &apos;red&apos;, linewidth = 1.0, linestyle = &apos;--&apos;)plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xlabel(&apos;I am X&apos;)plt.ylabel(&apos;I am Y&apos;)new_ticks = np.linspace(-1, 2, 5) # stepsplt.xticks(new_ticks)plt.yticks([-2, -1.8, 0, 1.22, 3], [r&apos;$really\\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\\ good$&apos;]) # alpha need write as &apos;\\alpha&apos;# gca = &apos;get current axis&apos;ax = plt.gca()ax.spines[&apos;right&apos;].set_color(&apos;none&apos;) # right side of boundarysax.spines[&apos;top&apos;].set_color(&apos;none&apos;)ax.xaxis.set_ticks_position(&apos;bottom&apos;)ax.yaxis.set_ticks_position(&apos;left&apos;)ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0)) # &apos;data&apos; can set to &apos;outward&apos; , &apos;axes&apos;... ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, 0))# Legendx = np.linspace(-3, 3, 50)y1 = 2 * x + 1y2 = x ** 2plt.figure()plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xlabel(&apos;I am X&apos;)plt.ylabel(&apos;I am Y&apos;)new_ticks = np.linspace(-1, 2, 5) # stepsplt.xticks(new_ticks)plt.yticks([-2, -1.8, 0, 1.22, 3], [r&apos;$really\\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\\ good$&apos;]) # alpha need write as &apos;\\alpha&apos;l1, = plt.plot(x, y2, label = &apos;up&apos;) # Don&apos;t forget &apos;,&apos;l2, = plt.plot(x, y1, color = &apos;red&apos;, linewidth = 1.0, linestyle = &apos;--&apos;, label = &apos;down&apos;)plt.legend(handles = [l1, l2], labels = [&apos;line 1&apos;, &apos;line 2&apos;], loc = &apos;best&apos;) # loc = &#123;&apos;best&apos;, &apos;upper&apos;, &apos;lower right&apos;, &apos;center&apos;...&#125;plt.show() Matplotlib Annotation123456789101112131415161718192021222324252627# ********Matplotlib Annotation********:import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 50)y = 2 * x + 1plt.figure(num = 1, figsize = (8, 5))plt.plot(x, y)ax = plt.gca()ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)ax.xaxis.set_ticks_position(&apos;bottom&apos;)ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0))ax.yaxis.set_ticks_position(&apos;left&apos;)ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, 0))X0 = 1Y0 = 2 * X0 + 1# Pointplt.scatter(X0, Y0, s = 50, color = &apos;b&apos;)# Lineplt.plot([X0, X0], [Y0, 0], &apos;k--&apos;, lw = 2.5)# Choice oneplt.annotate(r&apos;$2x+1=%s$&apos; % Y0, xy = (X0, Y0), xycoords = &apos;data&apos;, xytext = (+30, -30), textcoords = &apos;offset points&apos;, fontsize = 16, arrowprops = dict(arrowstyle = &apos;-&gt;&apos;, connectionstyle = &apos;arc3, rad = .2&apos;))# Choice twoplt.text(-3.7, 3, r&apos;$This\\ is\\ some\\ text.\\ \\mu\\ \\sigma_i\\ \\alpha_t$&apos;, fontdict = &#123;&apos;size&apos;: 16, &apos;color&apos;: &apos;r&apos;&#125;)plt.show()","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"http://yoursite.com/tags/Numpy/"},{"name":"Pandas","slug":"Pandas","permalink":"http://yoursite.com/tags/Pandas/"},{"name":"Matplotlib","slug":"Matplotlib","permalink":"http://yoursite.com/tags/Matplotlib/"}]},{"title":"利用LSTM模型进行手写识别","slug":"RNN","date":"2017-07-25T04:03:41.000Z","updated":"2017-08-04T06:55:59.054Z","comments":true,"path":"2017/07/25/RNN/","link":"","permalink":"http://yoursite.com/2017/07/25/RNN/","excerpt":"","text":"Recurrent Neural Netword(RNN) Using TensorflowPre-processingDatasetsMNIST database of handwritten digits. Click hereInput data: Image shape(28*28)Output label: 0~9 Parameters Data_Size Input_dimension: Dimension of each image Output_dimension: Dimension of predicted label Classes: The number of different outputs Model_Parameter Training_iter: The number of iterations for training Batch_size: The length of inputeach epoch Requirement Python 2.7 Tensorflow 0.12.1 Model(RNN + LSTM)We use a Recurrent Neural Network with LSTM Cell to implement this model. LSTM (Long Short Term Memory): LSTM_MODEL LSTM LSTM Composed of three gates which called INPUT_GATE, FORGET_GATE and OUTPUT_GATE. More information about how to implement LSTM Model is here. Initialize Step First we should initialize the placeholder and weights of our neural network.placeholder: just like the x of the function: weights: the weight for converting input data to output label. 123456789x = tf.placeholder(&quot;float&quot;, [None, n_steps, n_input])y = tf.placeholder(&quot;float&quot;, [None, n_classes])weights = &#123; &apos;out&apos;: tf.Variable(tf.random_normal([n_hidden, n_classes]))&#125;biases = &#123; &apos;out&apos;: tf.Variable(tf.random_normal([n_classes]))&#125; Training Step First we define a RNN_Model function.Using linear relationship to combine the output parameters. 1234def RNN_Model(x, weights, biases): lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(n_hidden, forget_bias = 1.0) output, states = tf.nn.rnn(lstm_cell, x, dtype = tf.float32) return tf.matmul(output[-1], weights[&apos;out&apos;]) + biases[&apos;out&apos;] Second we have to define the loss function and optmizer of our model.loss fuction: softmax_cross_entropyoptimizer: 1234prediction = RNN_Model(x, weights, biases)result = tf.nn.softmax(prediction)loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = prediction, labels = y))optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss) Third in order to evaluate the efficiency of this model, we define the function to calculate accuracy. 12correct_prediction = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) Finally we can start training after all the initialization. We can use session to run our tensorflow function. 1234567891011init = tf.global_variables_initializer()with tf.Session() as sess: sess.run(init) while &quot;./epoch&quot; &lt; training_iters batch_x, batch_y = mnist.train.next_batch(batch_size) batch_x = batch_x.reshape((batch_size, n_steps, n_input)) sess.run(optimizer, feed_dict = &#123;x: batch_x, y: batch_y&#125; if &quot;./batch_size&quot;: acc = sess.run(accuracy, feed_dict = &#123;x: batch_x, y: batch_y&#125;) los = sess.run(loss, feed_dict = &#123;x: batch_x, y: batch_y&#125;) Tips: “./“ represent the parameters defined by user own. Testing Step After training we get a weights in the tensorflow session which can be used to predict our test data. First generate the testing dataset from mnist generator. 123test_data = mnist.test.images[:&quot;./test_length&quot;].reshape(-1, n_steps, n_input)res = sess.run(result, feed_dict = &#123;x: test_data&#125;)predict_label = sess.run(tf.argmax(res, 1)) Finally because tensorflow mnist test dataset have its own ground-truth. So we can estimate if our “predict_label” is correct. 12test_label = mnist.test.labels[:&quot;./test_lenght&quot;]sess.run(accuracy, feed_dict = &#123;x: predict_label, y: test_label&#125;) Usage Install tensorflow. If we will run our model on GPU we have to install cuda and cuDNN.1pip install tensorflow(-gpu)==0.12.1 Import tensorflow package. Import tensorflow mnist dataset and read the dataset as a generator. Run our model1python &quot;./model_name&quot;.py Reference Googel Tensorflow Example ChallengesIn this experiment we use a simple RNN(LSTM) model to predict the handwritten digits which also catch a good consequence in CNN.RNN model is good for using in NLP processing. But how to explore the most useful determines whether our model can get an excellent result or not.","categories":[],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"},{"name":"LSTM","slug":"LSTM","permalink":"http://yoursite.com/tags/LSTM/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"http://yoursite.com/tags/Tensorflow/"}]},{"title":"Ubuntu16.04遠端桌面（remote desktop）設置","slug":"Remote","date":"2017-07-25T04:00:24.000Z","updated":"2017-11-03T08:47:50.634Z","comments":true,"path":"2017/07/25/Remote/","link":"","permalink":"http://yoursite.com/2017/07/25/Remote/","excerpt":"","text":"IntroductionUbuntu上的遠端鏈接比起windows系統自帶的Remote Desktop需要配置的條件更多。網上也有許多不同的版本，本人嘗試之後發現了一些常見的問題，特在此總結可行的一般流程與常見問題的解決方式。 System ConfigUbuntu16.04 Windows 10 Steps1、如果需要從Ubuntu連接到Windows系統，則可以安裝Desktop sudo apt-get install ubuntu-desktop 2、若只是從Windows鏈接到Ubuntu則跳過第一步，確保Ubuntu系統安裝了vnc服務，大部分系統會自行安裝，可以通過重複安裝確認。 sudo apt-get install vnc4server（大部分只支持tightvncserver，建议选择后者）或 sudo apt-get install tightvncserver 3、安裝遠端桌面軟體xrdp sudo apt-get install xrdp 此時若打開xrdp的配置文件，可以看到默認的xrdp協定，遠 端桌面則是根據這個來請求遠端服務的。 sudo vim /etc/xrdp/xrdp.ini 其中port = -1表示默認port(5910)作為登錄的接口，之後的連接可通過這個port連入相同的session（因為遠端連接的port一般可以兼容port5900到5910）如果需要更改連接的port可以在xrdp.ini文檔中修改port為port = ask59XX來請求連接。 修改完畢後記得重啟xrdp： sudo service xrdp restart 4、此時可以查看service port看是否處於LISTEN的狀態。 netstat -utl Important : 必須確保三個port處於監聽狀態 port 3389 port 3350 port 59XX 5、由於xrdp會開放3389的port作為遠端圖形化界面的窗口，因此還需要有相應的圖形化桌面套件。Ubuntu常用的桌面套件有三種，選擇一種安裝即可 安裝與設定Xfce sudo apt install xfce4 echo “xfce4-session” &gt; ~/.xsession 安裝與設定Lxde sudo apt install lxde echo “lxsession -s LXDE -e LXDE” &gt; ~/.xession 安裝與設定Mate sudo apt-add-repository ppa:ubuntu-mate-dev/ppa sudo apt-add-repository ppa:ubuntu-mate-dev/trusty-mate sudo apt update sudo apt install –no-install-recommends ubuntu-mate-core ubuntu-mate-desktop echo “mate-session” &gt; ~/.xsession 6、之後就可以使用遠端桌面連接Windows和Ubuntu了。 结果如下（Mate）： Common Problem 遠端連接出現error-problem connecting： 通常是因為vnc服務沒有架好，查看port的監聽狀態（詳見步驟3），如果只有3389和3350沒有5910的情況，則需要手動開啟相應的port進行連接。 解決方法： vncserver : 1~9 (引號兩邊都需要空格) 在xrdp設定檔中將prot從-1改為ask剛才開啟的port（vncserver設1則開啟5901以此類推） 遠端桌面連接進入出現灰色網格，無圖像，滑鼠變成X： 出現這種狀況通常是沒有安裝遠端桌面套件，導致圖形化界面無法呈現。 解決方法： 安裝三種遠端桌面套件的一種（詳見步驟5） Attention一定要先安装tightvncserver等vnc服务才能安装xrdp，不要重复安装server。如果需要卸载xrdp和vnc server，可以使用： sudo apt-get purge xrdp sudo apt-get purge tightvncserver","categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://yoursite.com/tags/Ubuntu/"},{"name":"Remote Desktop","slug":"Remote-Desktop","permalink":"http://yoursite.com/tags/Remote-Desktop/"},{"name":"xrdp","slug":"xrdp","permalink":"http://yoursite.com/tags/xrdp/"}]},{"title":"Python字符編碼問題","slug":"Unicode","date":"2017-07-25T03:52:58.000Z","updated":"2017-08-04T07:04:41.769Z","comments":true,"path":"2017/07/25/Unicode/","link":"","permalink":"http://yoursite.com/2017/07/25/Unicode/","excerpt":"","text":"什么是编码字符串也是一種數據形態，但是比較特殊的是字符串本身也存在一個編碼的問題，就是如何讓計算機來表示相應的字符並存儲。在編程語言中，我們經常會處理文本編碼之間的轉化問題，因為文本可能存在不同的編碼格式，例如 ASCII、GBK、UTF-8等等。最近在做NN的過程中面臨Corpus的unicode編碼問題，因此需要弄清楚python不同版本對編碼問題的處理策略。 字符的抽象概念看了一些網絡上的介紹，發現我們所謂的字符表示文本中單一的一個符號。然而一個字符不是一個字節，例如 “中” 這個字在文本中是一個基礎字符，但是在計算機中卻不是一個字節。一個字符有許多表示方法，不同的表示方法會使用不同的字節數，這就是所謂的編碼。字符就是文本中的最小單元。 編碼的方式Unicode是一種編碼規範，用來統一表示世界上的各種語言。其作為Python語言中的一種中間轉換碼，如果要對不同編碼格式的文本進行轉換，就必須對字符串解碼（decode）成Unicode，再從Unicode編碼（encode）成另一種編碼格式： decode : 作用是將編碼的字符串轉換成Unicode。encode : 作用是將Unicode傳換成其他編碼格式。 Python2 vs Python3Python3的編碼形式默認為Unicode 那麼Python3的文本可以通過encode傳換成bytes嗎？bytes和str一樣嗎？ 首先bytes不是字符串，那么b ‘a’ 和 ‘a’ 的区别是什么呢？在Python3运行输入出bytes的时候，它采取的原则是这样的：没读一个字节就和ascii码比对一下，如果符合ascii码的字符（特殊字符，字母和数字等除外），那这个字节就按照ascii码来表示，否则就按照十六进制‘\\x’的形式来表示。 结果就如同图中所示 ： 因此bytes对象不能由超过0到127的ascii码范围的unicode字符串表示。 bytes的表示方式为b + (字符串)，如果不用bytes表示，则直接用 ‘\\x’ + 两位十六进制数表示一个字节。 那么在Python2表示unicode的时候我们使用u + (字符串)的形式表示unicode编码，而Python3中则无需这么做。 注意在Python3中u‘字符串’和‘\\u四位十六进制数’是等价的，而且都为str对象。而‘\\u四位十六进制数’和‘\\u四位十六进制数’却不相同。 结果就如同图中所示 ：","categories":[],"tags":[{"name":"Unicode","slug":"Unicode","permalink":"http://yoursite.com/tags/Unicode/"}]},{"title":"Ubuntu16.04如何安裝搜狗（Sogou）輸入法","slug":"Ubuntu-sogo","date":"2017-07-25T03:48:07.000Z","updated":"2018-04-09T07:20:37.401Z","comments":true,"path":"2017/07/25/Ubuntu-sogo/","link":"","permalink":"http://yoursite.com/2017/07/25/Ubuntu-sogo/","excerpt":"","text":"介绍目前Ubuntu常用的中文输入法有： 搜狗拼音： 搜狗出品的面向Linux的输入法。 Fcitx： 这个是Ubuntu系统自带的Linux开源的输入法框架，提供了包括Google PinYin、ShuangPin、SunPinYin、Hong Kong和TaiWan繁体等一系列输入法。 下面主要讲下如何在Ubuntu 16.04上安装搜狗输入法。 安裝過程下載安裝檔之前首先需要確認本機的Ubuntu系統是什麼樣的編碼位元。利用“uname -a”指令查詢系統資訊。 下載安裝包，sogou提供了32位和64位版本:http://pinyin.sogou.com/linux/?r=pinyin Sogou 下載完成后可以直接雙擊下載的deb包裝或執行指令：12$ sudo dpkg -i sogoupinyin*.deb$ sudo apt -f install 第一行指令會提示sogou的一些鏈接錯誤，需用第二條指令解決。 安裝完成之後重啟系統。 再次開啟系統后就能夠在輸入法設置菜單看到Sogou的選項了。如果尚未显示，請打開keyboard config将sogou輸入法加入默認設置中。 Tips：有些版本會出現搜狗與Fcitx的衝突問題，但是本人沒有遇到這個問題，但是仍然提供一個評價最佳的解決策略：(移除其中一種輸入法架構)12$ sudo apt remove fcitx*$ sudo apt autoremove","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"Ubuntu 16.04","slug":"Ubuntu-16-04","permalink":"http://yoursite.com/tags/Ubuntu-16-04/"},{"name":"sogou输入法","slug":"sogou输入法","permalink":"http://yoursite.com/tags/sogou输入法/"}]},{"title":"從零開始的机器学习（Machine Learning）","slug":"Machine-Learning-Tutorial","date":"2017-07-24T05:48:31.000Z","updated":"2018-05-01T06:29:36.572Z","comments":true,"path":"2017/07/24/Machine-Learning-Tutorial/","link":"","permalink":"http://yoursite.com/2017/07/24/Machine-Learning-Tutorial/","excerpt":"","text":"什么是机器学习机器学习（Machine Learning）是由一帮计算机科学家们希望让计算机像人类一样思考而延伸出来的一门计算机理论。机器学习最早来自心理和生物科学，科学家们认为人和计算机其实没有什么差别，都是一大批相互连接的信息传递和存储元素所组成的系统。机器学习是一门典型的跨领域科学，其中包含了概率学、统计学等等方面。随着计算机性能的提升和计算机运算速度的升级，机器学习的应用才真正开始融入我们日常的生活当中。而不久的将来，机器学习必将成为人类探索机器世界的关键钥匙。总的来说，机器学习就是一个寻找方法的过程（Looking for a function）。我们所要做的就是构建一个function set（也就是model），其中的function结合起来能够真正将输入和输出拟合起来的function。 以下的内容出自自己的理解，如有疑问欢迎留言探讨。 应用图像识别， AI对话式智慧型家居, 聊天机器人， 股市风险预测… 分类机器学习可以按照目的不同划分成几个不同功能的种类： Regression: Output a scalar Classification: Output a class(one_hot vevtor) Structured Learning/Prediction: Output a sequence, a matrix, a graph, a tree…(Output is composed of components with dependency) 在Structured Learning领域中，而这种机器学习方式的可靠指出在于它能够适应更加复杂的环境。对于One-shot、Zero-shot Learning的问题上，传统的机器学习分类模式讲究的是利用监督式学习的方法用大量例子来拟合网络结构。而Structured Learning除了能够拟合那些带有Label的数据外，还能够在输出范围较大的时候主动去尝试拟合那些模型从未处理过的数据类别。从而创造出全新的类别成员，因此该学习方式也要求模型的结构更加智能。 Structured Learning还有一个重要的问题需要克服，那就是要让模型自己学会如何安排数据流的模型（Learn how to planning）。机器学习模型能够自我生成一些新的数据样本，但是这些数据通常是依靠已知的记忆进行组合而成的。这就需要我们的模型能够考虑全局再做决定，避免因为 “盲人摸象” 的认知而做出错误的决定： 图中就是一些模型因为只认知到局部而产生的错误理解所导致的结果。 算法机器学习的实现方式多种多样，在程式语言中我们称之为算法。Machine Learning的学习方式主要包括： 监督式学习（Supervised Learning） Input: Values and Labels Principle: 通过让计算机学习这些label来标记相应的value，从中找出它认为重要的部分作为判断依据。（既定规律） Example: Logistic Regression、Back Propogation Neural Network 非监督式学习（Un-Supervised Learning） Input: Values Principle: 只提供value的情况下，计算机事先无法得知value所代表的含义以及需要学习的正确结果，这时候就需要让计算机自己学会分类不同的value，从而总结出不同value背后所隐藏的重要规律作为判断依据。（生成规律） Example: Apriori、K-Means 半监督式学习（Semi-Supervised Learning） Input: Values and A few Labels Principle: 这种学习方式主要让计算机考虑如何利用少量的label总结出最适合value的判断规则，从而引申到更大范围的value中。 Example: Laplacisn SVM、Graph Inference 强化学习（Reinforcement Learning） Input: Environment and Set of Operations Principle: 通过将计算机设定在一个复杂的环境中，让机器去随机尝试各种可能的操作，并通过环境的回馈（正确加分，不正确扣分）的方式让机器的行为向加分的方面靠近，最终适应环境。 Example: Alpha GO、Robot Control Machine Leaning的算法主要分为这几类： 回归算法（Regression） 该算法主要是试图通过对误差的衡量来探索变量之间的关系问题。常见的回归算法包括：最小二乘法（Ordinary Least Square）、逻辑回归（Logistic Regression）、逐步回归（Stepwise Regression）、多元自适应回归样条（Multivariate Adaptive Regression Splines） 和 本地散点平滑估计（Locally Estimated Scatterplot Smoothing） 等。 常用的情形有：信用评估、度量成功率、预测收入水平、预测地震发生几率等等。 基于实例的算法（Instance-Based Algorithm） 该算法常常用来对决策性问题建模，通常会选取一批样本数据，然后根据某些特性和新数据样本的比较，通过匹配度来找到最佳的匹配相性。因此可以理解为 “赢家通吃” 的贪婪（Greedy）学习方式。 常见的算法包括：K-Nearest Neighbor（KNN）、学习矢量量化（Learning Vector Quantization，LVQ） 以及 自组织映射算法（Self-Organizing Map，SOM）。 正则化方式（Regular Expression） 该算法是基于回归算法的延伸，根据算法的复杂度对其进行的调整。正则化方法会对简单模型基于奖励而对复杂模型算法基于惩罚（一个类似强化学习的概念）。 常见的算法包括：Ridge Regression、Least Absolute Shrinkage and Selection Operator（LASSO） 和 弹性网络（Elastic Net）。 决策树（Decision Tree） 该算法根据数据的属性采用树状的结构建立决策模型，常常被用来解决分类和回归问题。 常见的算法包括：分类及回归树（Classification And Regression Tree，CART）、Iterative Dichotomiser 3（ID3）、随机森林（Random Forest） 以及 梯度推进（Gradient Boosting Machine，GBM）。 贝叶斯（Bayesian） 该算法是基于贝叶斯定理的一类演算法，主要也是来解决分类和回归的问题。 常见的算法包括: 朴素贝叶斯（Naive Bayesian）、平均单依赖评估（Averaged One-Dependence Estimators，AODE） 以及 Bayesian Belief Network（BBN）。 常用范例：垃圾邮件分类、文章分类、情绪分类、人脸识别等。 基于核的算法（Kernel-Based Algorithm） 该算法最著名的应该是支持向量机（SVM）了，其将输入数据映射到一个高阶的向量空间中，在这些高阶空间里，有些分类或者回归问题就能得到解决。 常见的算法包括：支持向量机（Support Vector Machine，SVM）、径向基函数（Radial Basis Function，RBF） 和 线性判别分析（Linear Discriminate Analysis）。 聚类算法（Clustering） 该算法和回归类似，就是在处理分类问题的时候，通常以中心点或者分层的方式输入数据进行归并。所以聚类算法目的是找到数据的内部结构，以便按照最大的共同特征进行归类。 常见的聚类算法包括：K-Means算法 以及 期望最大化算法（Expectation Maximization，EM）。 聚类的关注特征也分为好多种，包括：质心、连通性、密度、概率、维度以及神经网络结构等。 关联法则（Association Rule） 该算法通过寻找最能解释数据变量之间关系的规则，从而找出大量多元数据集中的有用关联法则。 常见的算法包括：Apriori算法 和 Eclat算法。 遗传算法（Genetic Algorithm） 源自进化理论，淘汰弱者，适者生存。通过不断更新和淘汰的机制去选择最优的设计模型。后诞生的模型会继承先带模型的参数，并能够根据环境自我优化或消失。 人工神经网络（Neural Network） 该算法主要是模拟生物神经网络，属于模型匹配算法的一种。通常用于解决分类 和 回归的问题。人工神经网络是机器学习的一个庞大分支，有几百种不同的算法结构（包括深度学习）。 重要的神经网络算法包括：感知神经网络（Perceptron Neural Network）、反向传递（Back Propagation）、自组织映射（Self-Organizing Map，SOM）等。 深度学习（Deep Learning） 深度学习算法是基于人工神经网络的延伸，通过建立更复杂的神经网络结构来提升神经网络的效果。很多深度学习的算法是半监督式学习算法，用来处理少量未label的数据集。 常见的深度学习算法包括：受限波尔兹曼机（Restricted Boltzmann Machine，RBN）、Deep Belief Networks（DBN）、卷积网络（Convolutional Network） 和 堆栈式自动编码器（Stacked Auto-encoders）。 降低维度算法（Reduce Dimension） 与聚类相似，降低纬度算法也是试图分析数据内部的结构，不过该算法属于非监督学习的方式，在缺乏信息的情况下归纳或解释数据。这类算法利用高维度的数据作为监督的label使用，从而完成迁移的降维动作。 常见的算法包括：主成分分析（Principle Component Analysis，PCA）、偏最小二乘回归（Partial Least Square Regression，PLS） 和 投影追踪（Projection Pursuit）等。 十大常见机器学习算法常用的机器学习算法，几乎可以用在所有的数据问题上： 线性回归（Linear Regression）线性回归通常用于根据连续变量估计实际数值等问题上。通过拟合最佳的直线来建立自变量（X，features） 和 因变量（Y，labels） 的关系。这条直线也叫做回归线，并用Y = a* X + b来表示。 在这个等式中： Y : 因变量（也就是Labels） a : 斜率（也就是Weights） X : 自变量（也就是Features） b : 截距（也就是Bias） 系数 a 和 b 可以通过最小二乘法（即让所有pairs带入线性表达式等号两边的方差和最小）获得。 最小二乘法（Least Squares）最小二乘法最重要的应用是在曲线拟合上。最小平方所包含的最佳拟合，即残差（观测值与模型提供的拟合值之间的差距）平方总和的最小化。当问题在自变量（x变量）有重大不确定性时，那么使用简易回归和最小二乘法会发生问题；在这种情况下，须另外考虑变量-误差-拟合模型所需的方法，而不是最小二乘法。 Example:某次实验得到了四个数据点: 我们希望找出一条和这四个点最匹配的直线: 即找出在某种 “最佳情况” 下能够大致符合如下超定线性方程组的参数： 最小二乘法的思路是让等号的两边方差最小。也就是说此时能够算出下面这个函数的最小值： 求解的过程可以通过对S分别对两个参数做偏导数，然后让他们等于0: 此时可以求解出： 也就是说直线方程： 为最佳解。 逻辑回归（Logistic Regression）逻辑回归虽然名字中带有回归字样，但其实是一个分类算法而不是回归算法。该算法根据已知的一系列因变量估计离散的数值（0或1，代表假和真）。该算法通过将数据拟合进一个逻辑函数来预估一个事件发生的概率。由于其估计的对象是概率，所以输出的值大都在0和1之间。 逻辑回归通常用于解决二分类的问题，例如判断人是男是女等。逻辑回归就是通过人的一些基本性状特征来判断属于男女的概率。 从数学角度看，几率的对数使用的是预测变量的线性组合模型。1234# Probability of event occurence / not occurenceodds = p / (1 - p)ln(odds) = ln(p / (1 - p))logit(p) = ln(p / (1 - p)) = b0 + b1X1 + b2X2 + ... + bnXn 式子中 p 指的是特征出现的概率，它选用使观察样本可能性最大的值（极大似然估计）作为参数，而不是通过最小二乘法得到。 那么为什么要取对数log呢？ 简而言之就是对数这种方式是复制阶梯函数最好的方法之一。 关于改进模型的方法： 加入交互项（X1 * X2等） 对输入输出进行正规化 使用非线性模型 二分类Logistic Regression使用的非线性函数是sigmoid（多分类则用softmax）： 输出的值对应出现概率（0和1分别对应 y 和 1-y），利用极大似然估计可以得到模型的目标函数（此时不考虑正规化项）： 对所有的变量而言： 为了方便计算梯度，我们会用log函数对公式进行转换： Tips：利用log函数能够将y和1-y的指数计算转换成乘积形式的系数计算，同时我们通常加上负号来将最大化相似度的问题转换成最小化误差的问题。 传统GD容易陷入局部最优，得到cost需要遍历全部样本。而SGD在计算cost的时候只用当前得到的error进行反向传递，随机选取遍历对象后求和得到。 优缺点Logistic Regression优点：容易实现、分类计算量相对较小、速度快、存储资源低。Logistic Regression缺点：容易欠拟合、准确度不高、不用softmax情况下只能简单二分类，要求结果必须二维线性可分。 决策树（Decision Tree）该算法属于监督式学习的一部分，主要用来处理分类的问题，它能够适用于分类连续因变量。我们将主体分成两个或者更多的类群，根据重要的属性或者自变量来尽可能多地区分开来。 根据不同的决策属性，我们可以依次将输入进行分类，最终会得到一个标签（Label）。为了把总体分成不同组别，需要用到许多技术，比如Gini、Information Gain 和 Entropy 等。 基尼系数（Gini） 图中的实际分配曲线（红线）和绝对平衡线（绿线）之间的面积为A，和绝对不平衡线（蓝线）之间的面积为B，则横纵坐标之间的比例的Gini系数为： A为零时，Gini系数为0，表示完全平衡。B为零时，Gini系数为1，表示完全不平衡。 在选择样本的时候，如果Gini系数越小，说明数据的纯度越高，例如：给出西瓜的数据，这些数据的西瓜都是优质的西瓜，那么pk=1，从而得到Gini = 0。在决策树分裂过程中，我们会尽量选择Gini系数小的特征属性进行分裂，但同时也需要考量树的复杂程度。 信息增益和熵（Information Gain &amp; Entropy）在我们建立决策树的时候，常常会有许多属性，那么用哪一个属性作为数的根节点呢？这个时候就需要用到 信息增益（Information Gain） 来衡量一个属性区分以上数据样本的能力强弱。信息增益越大的属性作为数的根节点，就能使得这棵树更加简洁。 以图中数据为例，要想知道信息增益，就必须先算出分类系的熵值（Entropy）。最终结果的label是yes或者no，所以统计数量之后共有9个yes和5个no。这时候P（“yes”） = 9 / 14，P（“no”） = 5 / 14。这里的熵值计算公式为： 之后就可以计算每一个属性特征的信息增益（Gain）了。以wind属性为例，Wind为Weak的共有8条，其中yes的有6条，no的有2条；为Strong的共有6条，其中yes的有3条，no的也有3条。因此相应的熵值为： 现在就可以计算Wind属性的信息增益了： 决策树分类 ID3： 采用信息增益选择最佳分裂子节点 C4.5： 采用信息增益率（正规化）选择最佳分裂子节点 以上两种决策树的形态在决策过程中准确率相对较高，但是需要反复对比扫描排序，运算效率低。 CART： 利用Gini系数来选择分类问题的最佳节点，利用Square Error来选择最佳的回归分裂节点。 CART的决策树形态在处理数据时可以根据数据的趋势自行处理缺失值。但是单棵树的能力有限，很难拟合较大的数据集，因此通常伴随着随机森林的形态呈现。 缺失数据的处理方法大数据处理的问题中往往不会得到完整的数据集合，而是存在一定质量问题的数据。包括：数据不完整、数据冗余、数据不一致、噪声数据等等。这些问题会降低数据挖掘算法的性能，因此不得不花费大量的经理和时间来处理这些数据。 数据缺失的类型： 完全随机缺失 随机缺失 非随机（不可忽略）缺失 数据缺失的处理方法： 直接删除元组 特殊值填充 平均值填充 使用最有可能的直来填充 保留缺失数据不予处理 支持向量机（Support vector machine,SVM）SVM是一种常用的机器学习分类方式。在这个算法过程中，我们将每一笔数据在N维度的空间中用点表示（N为特征总数，Features），每个特征的值是一个坐标的值。 如果以二维空间为例，此时有两个特征变量，我们会在空间中画出这两个变量的分布情况，每个点都有两个坐标（分别为tuples所具有的特征值组合）。 现在我们找一条直线将两组不同的数据在维度空间中分开。分割的曲线满足让两个分组中的距离最近的两个点到直线的距离动态最优化（都尽可能最近）。 那么看到这里一定很多人和我一样有一个疑问，那就是这种线性分类的SVM和之前提到的逻辑回归（Logistic Regression）有什么区别呢？ 其实他们在二维空间的线性分类中都扮演了重要的角色，其主要区别大致可分为两类： 寻找最优超平面的方式不同。 形象来说就是Logistic模型找的超平面（二维中就是线）是尽可能让所有点都远离它。而SVM寻找的超平面，是只让最靠近的那些点远离，这些点也因此被称为支持向量样本，因此模型才叫支持向量机。 SVM可以处理非线性的情况。 比Logistic更强大的是，SVM还可以处理非线性的情况（经过优化之后的Logistic也可以，但是却更为复杂）。 本质区别为不同的目标函数。 SVM采用的loss function为Hinge loss,而Logistic Regression采用的是Cross entropy loss。两者均为discriminative model。前者为了找到一个超平面区分支持向量，所以为Maximum margin classifier。后者为了表示一个数据的分布，所以为Log loss classifier。 举个例子：如果有一万个数据分布在点（1， 1）；而只有10个数据分布在点（-1， -1），那么SVM得到的分类超平面会是原点，而Logistic Regression得到的超平面会是接近点（-1， -1）的范围上。 数学模型要点： 注意区分软硬间隔函数 支持向量边界间隔是2倍的w宽度 原型和对偶型的区别（后者引用了拉格朗日算子和kkt，使得结果更容易求解） 对偶性的决策面计算用到了内积，可以方便地迁移到核函数的使用和高纬度非线性分割 优缺点SVM 优点：使用核函数可以提高维度，解决分线性分类问题、分类思路明确、分类效果较好。SVM 缺点：对大规模数据训练困难、难以很好地支持多分类。 朴素贝叶斯（Naive Bayesian）在假设变量间相互独立的前提下，根据贝叶斯定理（Bayesian Theorem）可以推得朴素贝叶斯这个分类方法。通俗来说，一个朴素贝叶斯分类器假设分类的特性和其他特性不相关。朴素贝叶斯模型容易创建，而且在非监督式学习的大型数据样本集中非常有用，虽然简单，却能超越复杂的分类方法。其基本思想就是：对于给出的待分类项，求解在此项出现的条件下各个目标类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。 贝叶斯定理提供了从P（c）、P（x）和P（x | c）计算后验概率P（c | x）的方法: 式子中的变量表示如下： P（c | x）是已知预测变量（属性特征）的前提下，目标发生的后验概率。 P（c）是目标发生的先验概率。 P（x | c）是已知目标发生的前提下，预测变量发生的概率。 P（x）是预测变量的先验概率。 举一个例子： 这是一个训练资料集，提供一些身体特征，用来预测人的性别。此时假设特征之间独立且满足高斯分布，则得到下表： 通过计算方差、均值等参数，同时确认Label出现的频率来判断训练集的样本分布概率，P（male） = P（female） = 0.5。 此时给出测试资料，我们希望通过计算得到性别的后验概率从而判断样本的类型： 男子的后验概率: 女子的后验概率: 证据因子（evidence）通常为常数，是用来对结果进行归一化的参数。 因此我们可以计算出相应结果（这里为概率密度）： 其中 μ 和 σ 分别指的是模型训练后的特征正态分布参数中间值和标准差。 最后假设初始条件为平衡条件： 就可以得出后验概率: 可以看出女性的概率较大，我们估计结果为女性。 优缺点Naive Bayes优点： 对小规模表现好，可适用于多分类，增量式训练。Naive Bayes缺点： 对传入数据敏感（边缘不平滑）。 K近邻（K Nearest Neighbors）该算法可以用于分类和回归问题，然而我们更常将其被用于解决分类问题上。KNN能够存储所有的案例，通过对比周围K个样本中的大概率情况，从而决定新的对象应该分配在哪一个类别。新的样本会被分配到它的K个最近最普遍的类别中去，因此KNN算法也是一个基于距离函数的算法。 这些距离函数可以是欧氏距离、曼哈顿距离、明氏距离或是汉明距离。前三个距离函数用于连续函数，最后一个用于分类变量。如果K = 1，新的样本就会被直接分到距离最近的那个样本所属的类别中。因此选择K是一个关系到模型精确度的问题。 如图所示，如果我们取K = 3，即为中间的圆圈内，我们可以直观地看出此时绿点应该被归为红三角的一类。而如果K = 5，此时延伸到虚线表示的圆，则此时绿点应该被归为蓝色的类。 在选择KNN之前，我们需要考虑的事情有： KNN在K数量大的时候的计算成本很高。 变量（Features）应该先标准化（normalized），不然会被更高数量单位级别的范围带偏。 越是干净的资料效果越好，如果存在偏离度较高的杂讯噪声，那么在类别判断时就会收到干扰。 欧式距离空间中点X = （X1，X2，X3，…，Xn）与点Y = （Y1，Y2，Y3，…，Yn）的欧氏距离为： 曼哈顿距离在平面上，坐标（X1，X2，…，Xn）的点和坐标（Y1，Y2，…，Yn）的点之间的曼哈顿距离为: 明氏距离两点 P = (X1，X2，…，Xn) 和 Q = （Y1，Y2，…，Yn）之间的明氏距离为: 其中p取1时为曼哈顿距离，p取2时为欧氏距离。 汉明距离对于固定长度n，汉明距离是该长度字符串向量空间上的度量，即表示长度n中不同字符串的个数。 例子： “toned” 和 “roses” 之间的汉明距离就是3。因为其中 t - &gt; r，n -&gt; s，d -&gt; s 三个字符不相同。 优缺点KNN 优点：思想简单、可分类也可回归、可用于非线性分类问题、训练时间复杂度小、对outliner不敏感。KNN 缺点：对于k值和距离计算的选取很难把持。 K均值（K-means）K-means方法是一种非监督式学习的算法，能够解决聚类问题。使用K-means算法将一个数据样本归入一定数量的集群中（假设有K个）中，每一个集群的数据点都是均匀齐次的，并且异于其它集群。 K-means算法如何形成集群？ 给一个集群选择K个点，这些点称为质心。 给每一个数据点与距离最接近的质心形成一个集群，也就是K个集群。 根据现有的类别成员，找出每个类别的质心。 当有新的样本输入后，找到距离每个数据点最近的质心，并与质心对应的集群归为一类，计算新的质心位置，重复这个过程直到数据收敛，即质心位置不再改变。 如果新的数据点到多个质心的距离相同，则将这个数据点作为新的质心。 如何决定K值？ K-means算法涉及到集群问题，每个集群都有自己的质心。一个集群的内的质心和个数据点之间的距离的平方和形成了这个集群的平方值之和。我们能够直观地想象出当集群的内部的数据点增加时，K值会跟着下降（数据点越多，分散开来每个质心能够包揽的范围就变大了，这时候其他的集群就会被吞并或者分解）。集群元素数量的最优值也就是在集群的平方值之和最小的时候取得（每个点到质心的距离和最小，分类最精确）。 随机森林（Random Forest）Random Forest是表示决策树总体的一个专有名词。在算法中我们有一系列的决策树（因此为森林）。为了根据一个新的对象特征将其分类，每一个决策树都有一个分类结果，称之为这个决策树投票给某一个分类群。这个森林选择获得其中（所有决策树）投票数最多的分类。在回归问题中往往是取所有节点样本输出的平均值，以上两个过程（分类、回归）均属于Bagging的问题。其结果评估采用泛化误差评估（out-of-bag）。 Random Forest中的Decision Tree是如何形成的？ 如果训练集的样本数量为N，则从N个样本中用重置抽样的方式随机抽取样本。这个样本将作为决策树的训练资料。 假如有N个输入特征变量，则定义一个数字m &lt;&lt; M。m表示从M中随机选中的变量，这m个变量中最好的切分特征会被用来当成节点的决策特征（利用Information Gain等方式）。在构建其他决策树的时候，m的值保持不变。 尽可能大地建立每一个数的节点分支。 泛化误差评估（OOB）泛化误差评估方式是采用训练集之外的未抽取样本作为测试集，对结果model进行测试，而最终的OOB值为 error number / total number。 随机森林的类别随机森林根据建构森林的树种类不同也分为三类： ID3 Forest： 适合处理离散的数据集 C4.5 Forest： 适合处理连续的数据集 CART Forest： 适合处理离散或者连续的数据集 随机森林的优缺点随机森林的优点有： 对于很多种资料，它可以产生高准确度的分类器。 它可以处理大量的输入特征，并且不用做特征选择。 它可以在决定类别时，评估变数的重要性。 在建造森林时，它可以在内部对于一般化后的误差产生不偏差的估计。 它包含一个好方法可以估计遗失的资料，并且，如果有很大一部分的资料遗失，仍可以维持准确度。 它提供一个实验方法，可以去侦测variable interactions。 对于不平衡的分类资料集来说，它可以平衡误差。 它计算各例中的亲近度，对于数据挖掘、侦测离群点（outlier）和将资料视觉化非常有用。 使用上述。它可被延伸应用在未标记的资料上，这类资料通常是使用非监督式聚类。也可侦测偏离者和观看资料。 学习过程是很快速的。 抽样独立，容易实现并行化。 随机森林的缺点有： 树的维护代价（Maintain cost）太大。 梯度提升决策树（GBDT）梯度提升决策树（Gradient Boosting Decision Tree）又叫做MART（Multiple Additive Regression Tree）, GBRT， Tree Net等，是一种迭代的决策树算法，同样由多棵树组成，所有树的结果累加起来就是最终结果。它和SVM一样都是泛化能力比较强的算法。GBDT属于Boosting的算法。 GBDT中的树是回归树不是分类树，但是经过调试后也能够用于分类。GBDT具有天然优势能够发现多种具有区分性的特征以及特征组合。 GBDT通过迭代多棵回归树来共同决策。当采用平方误差损失函数（Squared Loss function）时，每一棵回归树学习的是之前所有树的结论和残差，拟合得到一个当前的残差回归树（残差 = 真实值 - 预测值），训练过程遵循Shrinkage原则，即每次走一小步去逼近结果比每次迈一大步去逼近结果更容易避免过拟合。 Example:利用GBDT模型预测年龄：训练集4人，年龄分别为14， 16， 24， 26。样本中有购物金额，经常到百度知道提问解答等特性。GBDT建立过程如下： 预测结果由所有树累加得到： A : 14岁购物少，经常在百度知道上提问，预测年龄A = 15 - 1 = 14 B : 16岁购物少，经常在百度知道上回答，预测年龄B = 15 + 1 = 16 C : 24岁购物多，经常在百度知道上提问，预测年龄C = 25 - 1 = 24 D : 26岁购物多，经常在百度知道上回答，预测年龄D = 25 + 1 = 26 Random Forest &amp; GBDT差别随机森林(random forest)和GBDT都是属于集成学习（ensemble learning)的范畴。集成学习下有两个重要的策略Bagging和Boosting。Boosting主要关注降低偏差（bias），因此Boosting能基于泛化性能相当弱的学习器构建出很强的集成；Bagging主要关注降低方差（Variance），因此它在不剪枝的决策树、神经网络等学习器上效用更为明显。 如下图所示，当模型越复杂时，拟合的程度就越高，模型的训练偏差就越小。但此时如果换一组数据可能模型的变化就会很大，即模型的方差很大。所以模型过于复杂的时候会导致过拟合。 对于Bagging算法来说，由于我们会并行地训练很多不同的分类器的目的就是降低这个方差(variance) ,因为采用了相互独立的基分类器多了以后，h的值自然就会靠近。所以对于每个基分类器来说，目标就是如何降低这个偏差（bias)，所以我们会采用深度很深甚至不剪枝的决策树。 对于Boosting来说，每一步我们都会在上一轮的基础上更加拟合原数据，所以可以保证偏差（bias）,所以对于每个基分类器来说，问题就在于如何选择variance更小的分类器，即更简单的分类器，所以我们选择了深度很浅的决策树。 GBDT的优缺点 GBDT的优点： 精确度高，能处理非线性问题，能够处理多特征混合数据，适用于低纬度稠密数据。 GBDT的缺点： 并行麻烦（只能用在特征提取上），多分类模型复杂度高。 降维（Dimensionality reduction）当今的社会中信息的捕捉量都是呈上升的趋势。各种研究信息数据都在尽可能地捕捉完善，生怕遗漏一些关键的特征值。对于这些数据中包含许多特征变量的数据而言，看似为我们的模型建立提供了充足的训练材料。但是这里却存在一个问题，那就是如何从上百甚至是上千种特征中区分出样本的类别呢？样本特征的重要程度又该如何评估呢？ 其实随着输入数据特征变量的增多，模型很难拟合众多样本变量（高维度）的数据分类规则。这样训练出来的模型不但效果差，而且消耗大量的时间。 这个时候，降维算法和别的一些算法（比如Decision Tree、Random Forest、主成分分析（PCA） 和 因子分析）就能帮助我们实现根据相关矩阵，压缩维度空间之后总结特征规律，最终再逐步还原到高维度空间的训练模式。 主成分分析（PCA）在多元统计分析中，PCA是一种分析、简化数据集的技术，经常用于减少数据集的维数，同时保留数据集中的对方差贡献最大的那些特征变量。 该算法会根据不同维度的压缩（在这个维度上的投影）来测试各个维度对方差的影响，从而对每一个维度进行重新排序（影响最大的放在第一维度）。之后只需要取有限个数的维度进行训练，就能够保证模型拟合最佳的数据特征了。 因子分析该算法主要是从关联矩阵内部的依赖关系出发，把一些重要信息重叠，将错综复杂的变量归结为少数几个不相关的综合因子的多元统计方法。基本思想是：根据相关性大小把变量分租，使得同组内的变量之间相关性高，但不同组的变量不相关或者相关性低。每组变量代表一个基本结构，即公共因子。 Gradient Boost &amp; Adaboost &amp; Xgboost当我们想要处理很多数据来做一个具有高度预测能力的预测模型时，我们会用到Gradient Boost和AdaBoost这两种Boosting算法。Boosting算法是一种集成学习算法，它结合了建立在多个基础估计值上的预测结果，来增强单个估计值的准确度。 Adaboost Bossting能够对一份数据建立多个模型（如分类模型），通常这些模型都比较简单，称为弱分类器（Weak Learner）。每次分类都将上一次分错的数据权重值调大（放大的圆圈），然后再次进行分类，最终得到更好的结果。最终所有学习器（在这里值分类器）共同组成完整的模型。 Gradient Boost与Adaboost不同的是，Gradient Boost在迭代的时候选择梯度下降的方向来保证最后的结果最好。损失函数（Loss function）用来描述模型的误差程度，如果模型没有Over fitting，那么loss的值越大则误差越高。如果我们的模型能够让损失函数值下降，说明它在不断改进，而最好的方式就是让函数在梯度的方向上改变。（类似神经网络的Gradient Descend） XgboostXgboost是boosting算法的一种延伸，能够有效处理多特征混杂的批量数据集，因此被称为大数据比赛的神器。 Xgboost有以下几个特点： 支持Linear Classification，其过程相当于LR + L1/L2 normalization。 xgboost与gbdt相比使用了残差的二阶泰勒展开式，能够获得更多资讯并加速学习。 xgboost加入了norm项，包括叶节点个数，每个叶节点输出的Score和L2 norm等信息传递给下一层，降低了Variance，防止过拟合。 利用了Shrinkage算法，利用小学习率大迭代数的方式学习。 xgboost可以自动学习出分裂方向，预测缺失值。 xgboost在特征选择时可以利用存储在block中的实现排序的信息增益数组来并行处理，减少计算量。 什么是神经网络（Neural Network）基于生物学的神经结构，将神经细胞的电信号传播机制应用到计算机结构中来，通过对信号传导和演变来组成网络架构。人工神经网络中的每一个“神经元”就是一个Neuron，用来以一定的算法改变输入的信号，从而改变传输的信息，达到对环境做出反应的目的。另一方面，通过神经网络产生的反应收到环境的反馈（做的好或不好），这些反馈和目标行为的误差会通过神经网络的反向传递从原先的路径传送回去，沿途中这些反馈信号会反过来刺激Neuron调整相应的参数从而使得下一次正向传递的结果能够更加贴近目标。如此往复便是整个神经网络训练的过程。 人类通过学习，能够掌握和判别事物的特征从而对事物的本质做出判断，而机器同样是利用这种机制建立起相应的“识别”模型，这些模型对不同的事物具有不同的反应强度，利用强度的不同来区别事物的本质。 神经网络的基本结构一个简单的神经网络由3个部分组成： Input Layer 输入层，用来将资料喂给神经网络 Hidden Layer 隐藏层，用来尝试改变和调整神经网络的模型和数据的转化 Output Layer 输出层，用来将神经网络处理后的信号输出成最终的结果 神经元（Neuron）的激活函数（Activation Function）在神经网络学习的过程中，需要对输入的信号做出某种调整，才能真正得到最终的结果。传统的激活函数包括：Sigmoid、TanHyperbolic(tanh)、ReLu、 softplus以及softmax函数 例如当我们输入一只猫，输入层神经网络会把信号传递给隐藏层的神经元。每一个接收到信息的神经元会通过自己现有的经验对信号做出判断，利用激活函数（activation function）来判断此时的神经元是否需要被激活。激活后的神经元就会对输入信号进行处理并传递给下一层的神经网络层，如此往复当信号传递到输出层时则会经由最终的刺激函数（一般为softmax）产生相应的结果确定输出的信号是属于哪一个标签（label）。 如果此时计算机得到了错误的结果，我们就会通过反向的传递将误差传导回去，改变所有的神经元参数，继而那些原本活跃的神经元就会被弱化，在下一次的神经传导过程中就会逐渐被激活函数淘汰。 经过更新的神经网络能够在下一次迭代过程（epoch）中就会改变思路，转而尝试其他的判断方法。 直到得到正确的结果，误差就会小到可以忽略，如此神经网络得以生成。 卷及神经网络（CNN）卷积神经网络（Convolution Neural Network）在图片识别方面能够给出不错的结果。而卷积的作用实际上是对Fully connected的控制： 利用卷积的方式来选取进入下一个hidden layer中每一个neuron的链接数量，这样可以有效控制每个neuron处理信息的针对性。（Different neurons have different, but overlapping, receptive fields） 利用图片作为例子，任何输入的信号都会被转化成计算机能够识别的数字信号集合，例如矩阵（matrix）。文字也是一样的，我们把文字抽象成一个固定维度的向量，在这个维度空间中，每个字都是独立区别开来的，文字的多样性就有这些数字的排列组合来定义。这些信号集会通过输入层读取信息并进入神经网络中。卷积神经网络就是其中的一种网络模式，我们可以把它分成卷积和神经网络两个部分来理解。 卷积：可以理解为对一个区域信号强弱的总体分析。通过卷积运算可以在一定的区域内总结有用信号的强弱分布，从而对一定区域内信号的变化情况能够有一个较好的认知。卷积能够增强信号的连续性，用区域单位代替点电位。 神经网络：卷积神经网络利用批量过滤的方式，在大范围的信号中不断收集信息，每一次得到的区域信息都是区域中的一小块，之后从这些信息中总结出一些所谓的边缘信号（edges，例如：竖线，横线，斜线，圆圈等基本边缘，其可能分别代表人脸眼睛的左上角，中间，右上角等等部位的区域信息）。同样，用相同的方式从边缘信息组合的图像中总结出更大范围的边缘信息（例如：利用竖线，横线，圆圈等结构组合出整个眼睛）。最后将得到的结果传入全连接层的分类神经网络中就能得到相应的label了。 Example： 如果以灰阶图像为例，其高度为1，fsize = 5。此时ksize = 3, strides = 1。那么结果为一个reshape_size = 3的图像。 卷积的过程就是将物件的特征值（图像多为基本颜色）拆分成小块区域，然后计算其中各个特征值的和。最后输出为一个压缩后的图像。如上图，以0为黑色，1为白色，那么求得的最后图像中每一个方格的值就是kernel中所有格子数的加权和。 图片的维度信息有长、宽和高，长和宽用来表示图片的信号集，高度则是表示颜色的信号分布。被白颜色只有1个高度单位，而彩色的图片则有R、G、B三种基本颜色的信息单位。 利用批量过滤从图片中收集一定区域中的像素块，而输出的值就是一个高度更高，长和宽都更小的图片。这些图片存储的就是边缘（edges）信息。 反复进行同样的过滤步骤，就可以对图片的信息有更好的理解。之后再对结果进行分类就行了。 在卷积的过程中，神经元可能无意中会丢失一些信息。池化（pooling）就是为了解决这样的问题而被设计出来的。既然我们的信息是在卷积过程中压缩的时候丢失的，那么我们就舍弃这个步骤，直接保留原本的长宽，最后在由池化层统一进行压缩长宽的动作。 跟踪细节如下： CNN常用结构 比较流行的CNN结构先是输入信号，经过卷积层进行卷积运算，然后经过池化压缩长宽的维度。常用的是Max Pooling的结构： 在区域中区最大值作为代表这个区域的信号。之后再次对结果进行相同的卷积和池化，进一步压缩信号。之后通过两个全连接层将信号传导给分类器进行分类预测。 CNN常用结构 比较流行的CNN结构先是输入信号，经过卷积层进行卷积运算，然后经过池化压缩长宽的维度。常用的是Max Pooling的结构： 在区域中区最大值作为代表这个区域的信号。之后再次对结果进行相同的卷积和池化，进一步压缩信号。之后通过两个全连接层将信号传导给分类器进行分类预测。 递归神经网络（RNN）递归神经网络（Recurrent Neural Network）在自然语言处理和序列化信息分析方面能够给出不错的结果。如果说CNN是图像识别的代表性神经网络，那么RNN就是文字处理领域的“CNN”。 语言文字就是一个典型的序列化信号集，我们说出的每一句话之间，甚至每一个词之间都有先后关系的依赖，如果抛开字的先后顺序，我们的语言将会失去原本的含义。 假设现在有许多不同的数据信号，如果神经网络只是基于当前的输入信号进行结果的预测，那么就相当于无视了所谓的连续规则，其中必然会丢失重要的时序信息。就好比做菜，酱料A要比酱料B先放，否则就会导致串味的现象。因此一般的NN结构无法让机器了解数据之间的关联。 那么要如何做到让计算机也具有处理连续信号的能力呢？ 从人的角度出发，不难想到的方式就是记住先前处理过的信号，并将这些信号一同作为输入传递到当前的神经网络中。 我们将先前处理的结果存入记忆中，在分析当前信号时会产生新的记忆。由于记忆之间不会相互关联，因此我们可以直接将先前的记忆调用过来一起进行处理： 如此一来往复多次，神经网络就能携带长期的序列信号进行处理了。总结之前的流程： 在RNN运作过程中，每次的结果都会被存储为一个State状态信号，并通过不断迭代传递到下一个乃至更远的神经网络中去。 在RNN下一个时刻到来时，State状态同样会被存储成T+1时刻的State，但这是的 Y（t） 不再只是由 S（t+1） 来决定的，而是通过 S（t） 和 S（t+1） 共同处理 X(t+1) 得到的结果。因此这个State结构也可以用递回的方式来表示。 RNN常用结构RNN的形式多种多样，一般需要根据处理的情况不同选择相应适合环境的模型进行建模。 通常可以看到以下几种： 如果是用于分类的话，例如在判断一句话的情感取向，判断是positive或者negative的情况下，倾向于使用根据最终结点的结果来输出判断的RNN： 如果是用于描述的话，例如通过一些集成度高的特征信号（图片等）来产生一个描述性的句子或者序列的情况下，倾向于使用根据单一输入来逐步读取时序信息的RNN： 如果是用于翻译的话，例如通过一段连续的输入信号来预测下一段连续输出信号的情况下，倾向于使用多对多输出的序列化RNN（Sequence-to-Sequence）： LSTM(Long Short-Term Memory)RNN的网络在训练的时候会通过递归的方式传回之前网络学习到的记忆，从而使神经网络能够保留先前的信息。而传统的RNN在处理记忆单元的时候时常还是很容易 “遗忘” 重要信息的，因此我们需要一个更加强大的网络结构来帮我们锁住重要的过去式信息流，而最流行的结构也就是所谓的 LSTM 了。 那么传统的RNN模型究竟是为何会经不起长时间记忆的考验呢？这里用一个例子来说明： 假如我们所要分析的句子如上图所示，要想让机器知道我们吃的是 “红烧排骨” 而不是 “辣子鸡”，这时候神经网络就会将误差反向传递回去。 在反向传递的过程中，由于我们所要改变的句子成分在时序信息的最开始部分，因此需要经过很长的误差传递才能到达（也就是我们说的长记忆或久远记忆）。这个时候我们的误差在反向传递的过程中都会经由梯度在每一个神经网络层进行一个 Weight 权重的改变。而加入这个权重值是一个大于0小于1的数值，则反向传递的误差在经过每一次的传递过程就会损失一部分的信息，如此往复到了久远的网络层之后，这个误差就会因为信息太弱而 消失 了，这样我们的神经网络就无法回忆起重要的信息了，也就是所谓的梯度消失（Gradient Vanishing）。 而另一方面，如果这个权重值是一个大于1的数，在不断迭代的过程中就会让误差不断放大，最终达到无法修复的地步，也就是所谓的梯度爆炸（Gradient Exploding）。 而LSTM网络就是利用了在RNN结构基础上加入了三个Gate来作为控制器，从而控制误差的传递和信息的更新的。这三个 Gate 分别为 Input Gate 、 Forget Gate 和 Output Gate。 我们可以将LSTM的输入分成两部分，一部分是从一开始就持续进行的信息累加（也就是所有时刻的信息加总，我们成可以想象成主线剧情）。另一部分就是每一个神经网络层单独拥有的信息部分（可以想象成支线剧情）。主线剧情随着神经层的传递不断累加信息，而直线剧情则是每一层的神经元将重要的信息通过不同的权重值传递给主线剧情，而不重要的部分则经由遗忘控制器（Forget Gate）来替换掉。输出控制则是用来规划每一个神经层传递到下一级的时候需要如何分配输出的权重问题。这些控制器都会接受反向传递的误差来动态调整权重值，从而使网络能够正常地运作。 如何选择合适的模型不同的神经网络结构能够将输入和输出转换成不同的形态，针对不同的Domain，我们就能够对模型进行选择。 如图所示： 如果输入和输出信号是Vector，多用在分类和特征提取的时候，我们会选择使用Fully Connected Feedforward Network。 如果输入和输出信号是Matrix（例如图片或者多维度特征集合），我们多选用Convolutional Neural Network。 如果输入和输出信号是Sequence Vector（例如声音和文字），我们多选用Recurrent Neural Network。 神经网络非监督式学习实现Autoencoder在神经网络训练过程中，往往会需要输入大量的信息，而这些信息对于计算机的学习来说具有十分巨大的负担。想想人类的学习过程，如果一次性塞给我们大量的信息，不但达不到很好的学习效果，还会浪费大量的时间。 因此我们需要一个特殊的神经网络来将原本的信息进行压缩，提取其中最具有代表性的信息，这个网络就是所谓的编码器（encoder）。之后再通过放大压缩后的信息，重现原始资料的全部信息，也就是 解码（decoder） 的过程。而我们所需要做的就是取得编码器压缩之后的简要信息，送入神经网络进行学习，从而达到我们的目的。 压缩和解压的过程共同构成自编码（Autoencoder）的行为，通过训练编码器和解码器的神经网络结构，依据每次压缩前和解压后数据的对比情况来判断压缩的好坏程度，并利用反向传递来修正误差，从而最大程度上的压缩和还原原始信号。由于从头到尾我们所需要的输入信息为原始信号的信息，整个过程不需要对应的标签信息（label），因此autoencoder属于非监督学习的方式。 通常会使用到的部分是自编码的结果，也就是压缩过后的概括性讯息。我们建构的其他神经网络只需要对这些精髓的信息进行学习就行了。这样的方式不仅减少了神经网络的负担，还能达到很好的学习效果。 自编码的思路和传统的主成分分析算法的精髓类似，都是试图从数据中抓住决定性的关键内容，来概括和分类数据的特征。相比于传统的降维算法中的PCA主成分分析方法，Autoencoder甚至能够取得更好的效果，因此也常被用来对原始数据进行降维。 生成对抗网络（GAN）生成对抗网络（Generative Adversarial Net）不同于传统的FNN、CNN和RNN是将输入的数据和输出的结果通过某种关系联系起来的神经网络模型，GAN则是一种凭空生成结果的模型。 当然所谓的 凭空 并不是真正意义上的无，而是通过一些随机的尝试（随机数组合）创造出一些东西。比如一张图片（像素集合）。 我们可以把这个随机尝试生成图片的网络比喻成一名新手画家，他们根据自己的灵感用现有的技术生成一些画作。一开始可能有了灵感但是由于作画技术的限制，往往无法生成理想中的图片。 于是这名画家就找到了自己的好朋友新手鉴赏家，可是因为新手鉴赏家本身不具备良好的分辨能力，因此往往给出错误的回答。 这个时候就会有外部的干涉参与其中，通过一些标记好的资料来训练这名新手鉴赏家，让他一步步能够辨别画作的好坏。 最重要的是在训练新手鉴赏家的过程中，随着鉴赏技术不断成熟，鉴赏家开始对新手画家的一些作品做出正确的判断和反馈。这时新手画家就会从这个新手鉴赏家手中得到真正的有用的标签（label），进而利用这些标签改变自己的网络，让自己能够画得更好。 总结之前的流程，就是新手鉴赏家这个神经网络利用从外部监督得到的反馈提升自己，然后再利用自己去训练另外一个神经网络，随着新手画家神经网络的不断提升，鉴赏家网络得知自己的能力已经无法鉴赏该画作时，就再次求助外部反馈。就在这一次一次地对抗中，两个神经网络就会越来越强大。 在GAN网络中，新手画家就是我们的生成器（Generator），新手鉴赏家就是所谓的Discriminator（辨别器），画家的每一幅画都是通过不同的数字排列组合成的像素矩阵，也就是我们说的图片。 GAN的应用GAN因为能够通过随机组合产生新的数据，因而常被用在数据的合成和生成新数据的方面。 其中一个重要的例子就是数据序列的加减法： 图中的二次元人物是通过GAN神经网络的学习，然后利用描述性的选项组合，来生成不同特征的人物图像的一个神经网络网络应用。 理解神经网络的“ 黑盒子 ”神经网络的成功之处在于它能够从输入和输出的数据中总结出一个抽象的算法函式，基于这个函式的关系我们就能够对未知的数据进行预测。 例如： 这个就相当于一个已经训练好的神经网络模型，对于输入信号X通过网络的处理之后得到输出结果Y。 而神经网络建立的模型就像是把算法公式中所有参数进行一个封装，然后开放一个相应的接口(Interface)用于呼叫和取值。因此神经网络也被亲切地称之为 “ 黑匣子 ” 。 神经网络一般分为三个部分，输入和输出都是人类能够理解的信息，而中间的部分就是所谓的盲区。 如果我们将神经网络的中间层注意拆解后会发现输出的事物往往会是我们看不懂的东西，这就是为什么神经网络 “黑” 的原因了。对于人而言，我们在记忆复杂的环境和事物时往往会用一些自己熟知的记号来标记事物，使得我们能够更加清楚地记得事物的特征。计算机也是一样的： 我们知道神经网络处理的信息大都是数字集，通过神经层的分离可以看到这些数字集发生了改变，这些改变在人类看来无法理解，但事实上却是计算机利用自己的方式将这些事物通过它们捕捉到的特征信息转换成它们眼中的记号。也就是说计算机正在试图用自己能够理解的方式标记这些特征。 在神经网络中，我们称人们能够识别的特征记作Features，而机器转换后的特征标记记作Feature Representation。 利用手写数字的特征来理解的话，神经网络的Feature Representation就是空间中不同区域的分布状况。不同的位置聚集了不同的数字集合，落在不同的区域内就说明该输入属于哪一个输出。也就是说计算机把我们熟知的数字（也就是Features） 用 空间坐标区域（也就是Feature Representation） 来表示。 理解神经网络的内部结构和Feature Representation的含义可以很好地利用 迁移学习（Transform Learning） 的方式来组合我们的神经网络，从而达到更好的效果。 例如我们已经训练好了从图片中解析物体的神经网络，它能够从图像的序列信息中提取关键的特征事物，此时只需要将输出层替换掉，再加入新的神经网络结构进行连接，就可以生成全新的模型。 新的神经网络重新训练之后就能够具有全新的功能，利用原先的网络优势来拓展生成新的特征标记，一定程度上减少了神经网络训练的复杂度。基于先前的图像提取，能够从图中得到事物的特征信息（Feature Representation），再利用新的网络将这些信息进一步转换成表示事物价格的特征信息，如此一来神经网络的功能就得以演化了。 如何优化神经网络（Optimization）优化（Optimization）一直是人类领先于其他生物而在环境中不断成长的重要因素，机器也不例外，通过优化的方式自我更新才能不被复杂的环境所淘汰。 神经网络梯度下降算法（Gradient Descent）神经网络能够自我学习自我更新不仅仅归功于它能够学习并记忆输入和输出的规律，最重要的是它能够根据学习的规律进行自我调整以让自身适应这个变化的环境。那么机器学习模块又是如何进行优化的呢？答案就是所谓的梯度下降了。 先前说过神经网络的自我调整是基于结果的反馈，也就是所谓的误差来修正自己： Cost函式表达的结果近似可以看成一条平滑的二次曲线，而在更高纬度的层面上就是一个弯曲的面，越是接近曲面的底部，误差的Cost就会越小。而梯度下降（Gradient Descent）就是在这个曲面中通过微分的方式找到一个能够向最低点移动的方向，并以此作为动力开始优化自己。当达到最低点时，求导的结果和二次曲线相切，这个时候梯度就消失了，也就是所谓的最佳化状态。 然而按照理论而言，这样的方式也太容易得到想要的结果了，那么神经网络的优化（Optimization）也太神了吧，其实这一切是很难实现的。 不同于之前所看到的梯度下降曲面，我们生活中的信号往往需要有许多的维度来表示，尤其是复杂的信号（例如图片或者文字）。这些信号在低纬度的时候几乎无法将他们区别分类，因此我们只能将他们丢到更高的维度上面进行非线性分割。这时候就会存在一个问题了，随着维度的提高，我们所熟知的曲面渐渐变得不再平滑了： 这样的曲面反映出一个关键问题就是优化的不确定性。 在多维的复杂曲面中，我们能够找到不止一个梯度消失的点，而这些至低点并不都是我们所谓的最优解。当我们初始化的位置不同，我们的结果就会随着梯度下降（Gradient Descent）的优化模式寻找距离自己最近的一些至低点。如此一来不同的初始值就会很大程度上影响我们优化的结果。针对这个问题，目前比较好的解决方式就是给信号加上一个 动量（Momentum） 以至于在运动至最低点的时候，动量会趋势信号的Cost继续改变（此时梯度又恢复了）。如果我们设定的动量足以让信号摆脱当前的梯度曲面（说明曲面不够深，也就是所谓的局部最优解），信号就会继续去寻找一个更加难以摆脱的梯度曲面（更深），如此一来就能够尽量靠近全局最优解。 迁移学习(Transfer Learning)学习的过程往往是通过累计的知识一步一步总结经验,然后优化升级从而解决更加复杂的任务。而这个升级的过程就是不断地将已有的知识整理加工，运用到其他乃至更为复杂的领域。这样的思路在神经网络训练过程中就被称为迁移学习（transfer learning）。 神经网络复杂的结构造就了庞大的计算量，如果需要在短时间内同时维护许多个功能类似的模型往往代价巨大。这个时候迁移学习就能派上用场了，利用模型的迁移能力，将具有相同特性的模型转移到新的任务上来，从而免去了重复训练模型的时间和计算量。 然而不是所有的模型都需要利用迁移学习。在一些结构相对简单的网络中，我们通常选择重新训练一个新的网络而不会选择使用迁移学习。原因是小的网络参数相对较少，而且需要拟合的资料特征有限，这些特征之间往往会有一些独特的特性不适合用在迁移后的网络中，这样就会造成网络自身的误差相对较高，影响模型的效率。 如何评估神经网络的优越性机器学习的过程中，神经网络往往会存在一些问题，例如学习效率低，学习误差（loss）变化幅度摇摆不定，或是因为杂讯和信号太多没有办法找到有效的规律和结论。而这些问题可能来自数据、参数以及模型结构本身等各方面的因素。 数据集评估在评估数据和模型的吻合度上，我们需要对数据进行一个初步的认知，也就是确定数据集和结果之间的特征关系，也就是所谓的Features。这些Features能够很大程度地影响神经网络的学习效率。 传统的机器学习算法通常会通过采用 Cross-Validation 的方式来对数据进行评估。也就是现将数据集依照6:2:2（不固定）的比例进行拆分，分别表示为训练集（Training Data）、验证集（Validating Data） 和 测试集（Testing Data） 三个部分。 评估模型最终结果的好坏往往是测试集决定的，这里面会有训练的时候不曾出现过的输入信号，这也是对神经网络效能的一个考验。而要在学习的过程中让学习训练集的模型意识到不单单是要学好那些见过的部分，没见过的部分也需要充分地准备，这时候就会用到验证数据集的检验了。在训练完毕之后，我们重新划分3个资料集的比例和分布，就可以重新定义出新的训练资料了。在不断变换数据集的同时，我们可以对模型的参数进行更加科学的优化和分析。 评价机器学习的方式（Evaluation Function）包括了误差（Error或Loss） 以及 精确度（Accuracy），误差就是预测结果和实际结果的差值，而精确度就是在预测过程中的正确率了。 有的时候在训练的时候往往结果让人满意，可是到了测试的时候结果却不尽人意，这又是为什么呢？ 原来在训练过程中，神经网络太过优秀了，以至于它将自身优化成为了完全符合这个输入数据的一个模型。而一旦我们测试的输入和训练样本差别很大，就会让模型无从下手，这种现象就是所谓的过拟合（Overfitting）。 比较常用来解决Overfitting的方式为Dropout，也就是在训练的过程中随机舍弃掉一些数据，从而让自己的模型留有一些变通的空间，来适应突发的情况。 为什么要对特征进行标准化（Normalization）现实中的数据可能来自不同的地方，不同来源的数据有各自的取值范围。而在学习的过程中，这些取值范围往往差距悬殊，这样就会对训练产生障碍。想象一下，如果我们两个权重矩阵M1和M2,我们给M1一个三位数量级的输入参数，给M2一个一位数量级的输入参数，会发生什么事情呢？答案很明显，当我们改变M1的参数时，对于总体的影响是十分巨大的，而相比之下想要达到这样的差距，就必须对M2进行很大幅度的调整。 如何标准化延续之前的例子，如果这时候的误差值是： 那么对这个误差我们应该确保对所有的权重矩阵（Weight Matrix）具有类似的跨度。 通常用于标准化（Normalization）的方法有两种： 一种是最小-最大标准化（Minmax Normalization）。它会将所有的数据按照一个缩放比例转换到0和1的区间中。对单独的特征而言，这个权重是唯一的（全局适用）。 另一种方法是标准正规化（Standard Normalization）。它会将所有数据转换成平均值为0，标准差（Std）为1的数据。 这样的标准化问题不但能够平衡数据间的波动和差异，还能提高学习的效率，让机器学习能够正常地平衡每一个特征变数的优化和调节。 什么是批标准化（Batch Normalization）Batch Normalization和传统的正规化方式类似，都是为了将分散的数据统一成为一定的样式，也是优化机器学习的一种方法。之前讨论过为什么要对数据进行标准化，为的就是让训练的参数不特别偏袒某一个数据。从而让机器更好地学习多元的规律。 回忆之前的内容，我们为什么需要在输入的时候对我们的数据进行标准化呢？ 那是因为在训练过程中神经网络对偏差较大的数据很难平衡他们的权重。试想一下如果一个输入为1而一个输入为20： 在经过一层神经网络运算之后，由于激励函数的关系两者的值会被投射到特殊的函数空间中，这个时候数据的差异就凸显了出来。以tanh为例，1的输入经过tanh计算后取值处于tanh函数的敏感部分（梯度最大）。而大数值20经过tanh计算后反而位于不敏感的部分（几乎水平）。这个时候的值对于神经网络而言已经不再重要了，因为无论怎么变化其数值也不会相差太多。就像是轻轻拍一下自己和重重打一下是一个感觉，这样的结果对于神经网络是致命的。 那么既然我们对输入层的网络进行了正规化（Normalization），那么又为何需要batch normalization呢？ 原来在hidden layer的部分也会存在这个问题，因为神经网络的隐藏层也同样使用了激励函数。 这个时候我们就是用Batch Normalization的方式将数据分成几个大小相同的Batch进行训练，在每次经过神经网络的全连接之后进行一次正规化，然后才送入激励函数中进行计算。 对于激励函数（Activation Function）而言，最佳的数据传递范围是下图红色的区域，也就是所谓的敏感区。而位于这些区间的数据更容易被传递到下一层网络中。而正规化的目的就是让更多的数据集中在这个敏感区中，这样可以防止数据呈现两极分化的状态，让神经网络的训练更有价值。 与神经网络的反向传递类此，在进行了正向传递的正规化之后，我们会将结果利用一个线性的方式反向传递回来，这种方式为的是让机器自己学习正规化的有效程度，从而自我修正和改变。就相当于在神经网络中嵌套了另一个神经网络用以训练前一个神经网络的更新能力。 通过对比没是否有Batch Normalization的结果我们发现，Batch Normalization能够让训练过程中的数据更加具有连续性，同时也让数据在每层神经网络之间能够更好地传递下去。 如何判断特征的的好坏机器学习的过程中，特征是我们的模型训练和测试的重要参照指标，好的特征往往能使得模型快速拟合资料的分布，也就能取得更好的预测结果。那么什么样的特征是真正有用的特征（Features）呢？ 在分类问题中，没用的特征会为我们的分类带来不必要的计算和误导，以 Iris Corpus 为例。 以花萼宽度的特征来看，两种花的分布大概能够满足如下的分布状况： 可以看出在该特征的情况下，两种花的特征分布呈现一种趋于平衡的关系，如此就可以判断光凭这种特征是很难将花的品种区分开来的。因此我们称这样的特征为无意义的特征（不好的特征）。 此外，如果我们改变特征的选取，转而采用 花瓣长度 来作为评判的特征，那么会如何分类呢？ 我们利用Python的可视化library Matplotlib 来观察特征的变化情况吧。 1234567891011import matplotlib.pyplot as pltimport numpy as npsetosa, versicolor = 500, 500setosa_length = 1.5 + 0.4 * np.random.randn(setosa)versicolor_length = 4.5 + 1.2 * np.random.randn(versicolor)plt.hist([setosa_length, versicolor_length], stacked = True, color = [&apos;r&apos;, &apos;b&apos;])plt.xlabel(&apos;Petal Length&apos;)plt.ylabel(&apos;Numbers&apos;)plt.show() 从图中可以看出，当花瓣长度大于等于3之后，我们基本可以断定这种花就是versicolor，相反当花瓣长度小于3的时候，我们就可以很大程度上断定花的种类就是setosa。这样能够明显区分不同事物的特征就是所谓的好的特征。 另外，当一种特征在特定的取值上难以区分类别的时候，我们就需要其他新的特征来辅助我们判断事物的种类，这也就是神经网络的特征集合的作用所在了。 特征压缩的方式有很多，常用的包括之前提及的 Auto-encoder 等。总而言之，想要得到好的特征信息，我们就需要遵循以下几点： 避免无意义的信息。 避免重复性的信息。 避免复杂的信息。 什么是激励/刺激函数（Activation Function）Activation Function是人工神经网络中的一个重要环节，想要探讨它的重要性，那么首先就需要知道为什么我们的神经网络离不开这个结构呢？其实在神经网络的训练过程中，许多问题我们往往无法用单纯的线性方式解决。这时候我们就需要借助Activation Function的帮助了。 那么什么样的模型表示才是线性的呢？ 所谓的线性方程（Linear Function）就是能够用一条直线反应出模型的变化趋势。 比方说随着商品人气的升高，销量也持续不断地上涨。然而并不是所有喜欢这个商品的人都会购买它，因此在销售达到饱和的时候，即使人气还在不断上升，但是销量的增长却开始变慢，这个时候我们就无法用线性的方式表示这个趋势了。因此我们便会选择非线性的方式（NonLinear Function）表示我们的模型变化： 我们可以用一个式子来统一描述神经网络的流程： 而这个时候的模型就是线性的，我们需要借助Activation Function的力量来 “掰弯” 这个线性的模型。 新的模型表示式中的 AF 就是我们的Activation Function。其实 AF 的作用并没有想象的那么奇幻，它就是一些非线性方程的集合： 通过非线性方程的转换，就可以把连续的输入信号在不同时刻进行不同程度的改变，使它们之间不再遵从线性关系的约束。 当然我们可以使用的Activation Function远不止上面的那些，我们甚至可以自己创造适合我们模型的激励函数。但是重要的一点是，这些函数必须是 可微分 的，也就是可以通过求导得到相应的梯度。原因是我们之后的Optimization的过程中会使用反向传递的方式更新模型的参数，而反向的核心步骤就是对原方程微分，这样才能完整地把误差传递回模型。 如何选择合适的神经网络是训练一个好的模型的重要先决条件。那么应该怎么选择适度的Activation Function呢？ 在小的模型中，激励函数的影响往往没有那么明显，因此我们不需要做太多的考虑。相比之下在大型模型中，由于曾与曾之间的传递复杂度高，因此草率地选择Activation Function会导致梯度消失、梯度爆炸等问题。 一些常见的神经网络结构推荐使用的激励函数也不同，这些关系到模型的特性和实际的应用场景。在CNN中我们推荐使用Relu作为层级之间的激励函数；而在RNN中我们则推荐使用Relu或者Tanh作为激励函数。 什么是模型过拟合（Overfitting）在训练神经网路的过程中，我们有时会遇到这样的情况：在训练过程中我们对训练资料和预测结果的比对发现，模型的拟合效果非常优秀（也就是Accuracy很高）。而在我们使用测试资料再次试探我们的模型时，发现结果却不尽人意。这时候很可能的情况就是出现了过拟合（Overfitting）。 以一个例子而言，通过机器学习训练后，我们可以用一条回归直线表示空间中分布的输入信号，这时候的误差范围取决于离直线最远的点。但是如果我们的机器仍不满足这个误差，想要继续降低它的时候，就会出现这个情况： 这时机器改变了原来的拟合线，转而开始依次调整每个点的距离，让回归线不再只是一条直线，而是一条设法穿过每一个点的曲线。这个时候的拟合度固然很高，但是却让模型变得越发不灵活。如果用在测试数据上，那么曲线比起原先的直线就更难拟合新的数据，这就是Overfitting的根本原因了。 在分类问题上的过拟合主要体现在曲线完美区分所有的数据点（下图圆点），这个时候加入新的数据（下图十字）后发现曲线很难将他们完全区隔开来，这种模型不是我们想要获得的。 那么既然过拟合会对模型的预测带来影响，要避免它的发生我们又应该怎么做呢？ 缓解Overfitting的方式有这么几种： 首先就是增加数据量 随着数据量的增加原先过拟合的曲线也会慢慢变得平滑起来，能够覆盖的范围就变大了。 其次就是利用正规化（Regularization） 主要用于解决机器学习过拟合的正规化方法包括了 L1 和 L2 正规化。 针对机器学习，我们之前将这个过程简化成： 而其中的 W 就是我们模型所要学习的参数，过拟合的出现就是模型对于 W 的值进行了太大幅度的调整。为了避免这个问题，我们会对这个变化进行一个惩罚，也就是约束的机制。原始的误差cost为： 如果 W 变化太大，我们就让cost也跟着变大，也就是 L1 正规化： L2 正规化和L1类似，只是在惩罚项的不同： 用这些方法我们就可以保证得到的模型曲线不会因为数据的关系而变得那么扭曲。 最后是一种经常用在神经网络训练过程中的方式，叫做Dropout Regularization。 在训练过程中，我们选择每次都忽略掉一些神经网络的神经元（Neuron）来使得我们的结果不会每次都过分依赖所有的数据信息，这样训练出来的模型就不容易出现Overfitting的情况。 L1 / L2正规化之前提到了过拟合的问题会对模型的预测造成影响，模型往往会通过使用更精密的参数（指数更高的项）来拟合数据。而这些参数的数据虽然能够让模型更好地贴近测试数据，但是却无法灵活地反应测试数据以外的其他数据。 图中比起红色的曲线，我们更希望通过蓝线来概括回归的特性。为了能够让模型不会学的那么“完美”，我们就会选择使用L1、L2正规化来约束神经网络参数的更新。 训练的过程中我们利用反向传递的误差来调整参数，而误差的值反应为： L1、L2正规化就是在这个误差的情况下多加上了一个误差，也称作对真实结果的惩罚: 或 通俗的来说现在我们的误差不再是我们理解中的结果和真实值得差距了，还包括了新的误差项，也就是那些用来拟合的参数所拥有的权重大小。如果是对平方项的惩罚就是L2正规化，如果是绝对值则是L1正规化。 那么这些惩罚又能对结果产生怎么样的影响呢？以L2正规化为例： 在训练过程中，通过减小误差来优化我们的神经网络，而其中非线性越强（指数越大）的参数往往会修改的越多。因为曲折的线条往往才是分离局部误差的关键，这个时候非线性强的项次就会凸现出来。而误差方程中的惩罚项此时就会对这个情况作出反击。在它看来，所有的指数项共同组成了一个团队，如果光是依靠那些能力强的参数改变效能是十分危险的，如果它们做错了，那么结果可能会非常糟糕。因此惩罚就是一个限制两极分化的最好途径。 在抑制过拟合的情况下，L1、L2正规化的优劣也各有不同： 图中是我们模型的试图，假设此时只有横纵坐标两个输入特征，而蓝线表示我们学习的梯度曲线（等高线）。越靠近中心越是拟合原来的结果，误差就越小。而正规化的惩罚项就是图中粉色线条表示的区域，平方表示圆，而绝对值表示直线。这个时候模型为了保证两边的误差最小，那么就是求解两个曲面的交点位置。这样一来模型就不会一直向着蓝线梯度的中心点直奔而去了。 不难看出，使用L1正规化的时候，我们很可能得到的结果是坐落在某一个坐标轴上，此时其他坐标的特征就消失了。因此我们可以利用这一点来选择对结果贡献度最大的特征。 但是L1的结果相对L2正规化而言较不稳定。如上图所示，我们训练的过程中梯度的变化时常发生，这个时候L1正规化可能会存在不止一个相对距离最短（也就是误差最小）的点。这也侧面说明了L1正规化的优化不稳定的问题。 为了控制正规化的强度会加入一些限制参数来平衡这个惩罚机制的强弱。 我们会利用Cross Validation的方式来训练和选取最佳的参数，从而得到更好的正规化结果。 如何加速神经网络不难想象，越是复杂的神经网络结构和越大的数据量，就会让神经网络的训练过程花费更多的时间。原因是计算量和复杂度太高了，可是在解决一些复杂问题时，我们所需要的结构恰恰又是以这样的形式出现，因此我们就需要一些特殊的方法来让神经网络的训练得到 优化和提升。 最基础的方法叫做SGD（Stochastic Gradient Descent） 未经SGD优化过神经网络训练通常是把整个资料集重复不断地全部喂给网络训练，这样在每次训练中消耗的资源会很大。通过SGD的优化后我们选择将整个资料集分成几个部分，一次将资料的一部分放入神经网络进行训练。虽然这样无法反应整体的资料特性，但是却能加速训练过程，同时保有相当高的准确率。 除了SGD以外，还有一些神经网络的优化方式能够通过优化神经网络的参数，从而达到加速训练的效果。 传统的参数更新方法是利用误差的反向传递，让参数的误差值乘上一个学习效率来进行更新的： 而这种方法会让收敛的过程曲折无比，就像是一个喝醉的人摇摇晃晃地行走一般，在到达目的地的过程中往往需要走许多弯路。 为了防止这种不必要的更新误差，我们会选择使用 动量（Momentum） 的形式来优化误差更新方法。 动量的使用就仿佛给这个误差一个 向下冲的初始速度，让他在前进的时候有一个惯性的作用。打个比方也就是原先喝醉酒的人走到了一个下坡，他就会改变摇晃的行走方式，转而变成拥有向下冲的一个趋势。 与动量（Momentum）类似的优化方式还包括 AdaGrad，这种优化的方式是通过给予参数优化一个限制，让他在学习的过程中因为走弯路而受到一定的惩罚，从而减少这种行为的发生。 AdaGrad的形式就仿佛给喝醉酒的人一双鞋子，在他摇晃前行的过程中由于鞋子的摩擦而脚疼，从而让他避开这种行走方式，转而走直线。 那么不妨试想一下如果将动量和AdaGrad两者结合起来，效果是不是会更好呢？的确，结合了两者的方法被称为 RMSProp。 RMSProp结合了两者的优势，从而共同优化神经网络的参数计算： 而在RMSProp保留两者的有点过程中，神经网络由于动量的加速和AdaGrad的惩罚限制，变得能够走出较为理想的直线了。但是可能不难发现，在结合两个优化形式的过程中，RMSProp似乎并没有完全地将二者进行合并，从公式中可以看出，它似乎抛弃了重复的学习更新作用项 dx。 而 Adam 的优化方式则完全融合了动量（Momentum）和AdaGrad的数学形式，将他们完全融入神经网络的训练优化参数的过程中来。 Adam的参数学习率公式如下： 就这样，在计算m时将动量优化考虑进去，在计算v时将AdaGrad优化考虑进去，而在最后计算参数的时候将m和v一起考虑进去，这样就能将两者完全结合近神经网络的优化过程中了。 事实证明在大多数神经网络的训练过程中，Adam Optimizer 都能让网络迅速收敛，达到目标。 如何处理不均衡数据如果在分类问题中，我们可能会遇到这样的情况：绝大多数的数据Label都偏向于其中的一种类别，而另外一种或是多种类别的成员数量则远远小于它。这样的数据就是我们说的不均衡的数据了。 用不均衡数据训练出来的模型思考模式很简单，永远都是猜多的那一方正确几率比较高，久而久之机器就学乖了，总是预测多数派的情况，这样的训练结果往往不是我们希望看到的。 那么面对这样的数据要如何训练呢？ 第一种方式是对数据进行分层统计：一般情况下神经网络的训练集分布多为均匀分布，但是也可能存在一些特例，像是一开始比例不均匀，一边很大而另一边则很小的情况。这时候一开始的训练结果往往就会是我们说的不均衡情况，但是如果我们能够找到后阶段的数据集刚好相反的分布，那么就会让我们模型慢慢回归正常的预测模式。也就是所谓的以长远的目光看待数据。 第二种方式是改变评估的方式：通常我们会用到的评估数据模型的参数有 准确率（Accuracy） 和 误差（Cost），但是这些评判标准换到了一个不均衡的数据中来看就显得不那么重要（因为大多数情况都是正确的，而且误差几乎为0）。因此我们选择更换我们的评估模式，改成使用Confusion Matrix来计算 精确率（Precision） 和 召回率（Recall） ，然后再利用这两者计算出 F1 Score（F-score）。 以一个例子来说，假定我们的正类有10个，负类只有4个，此时我们的预测结果为10个正类被判断为10个正类，4个负类被判断为2个正类和2个负类。那么通过Confusion Matrix我们可以计算出TP（正类别猜正类别）、FP（负类别却猜是正类别）、TN、FN四个值。TP = 10，FP = 2，TN = 2，FN = 0;这时候的： 因此F1 score可以表示成： 第三种方式就是重新组合数据，让数据保持均衡分布。例如砍掉一些数量较多的资料，让二者的数量保持在一个稳定的比例上，或者利用复制和组合的方式增加少数类别的资料数量，使他们比例重新稳定。 第四种方式是使用其他的机器学习方法： 在面对不均衡的数据时，神经网络通常是束手无策的，而相比而言一些传统的机器学习算法则能够不受资料集的影响，从而做出正确的判断，比如决策树（Decision Tree）。由于在决策的过程中依赖的是输入数据的特性而非分布情况，因此决策树能够准确地对资料做出分类判断。 最后的方式是改变传统的算法： 传统的激活函数算法有一个比较平衡的门槛值作为分类的区隔条件。例如sigmoid函数会以x = 0作为分界线，左边的分布为Label1，而右边的分布则为Label2。但是由于此时资料分布不均衡的情况下，导致坐落在右边的几率大大升高。那么我们就会对这个门槛值进行一个调整： 如图所示，增大门槛值的x坐标，让他只有在极端条件（Y十分接近1）的时候才会判定为右边的分类结果（也就是概率较大的Label）。这样我们就能够比较完美地对预测进行一个权衡。 强化学习（Reinforcement Learning）什么是强化学习强化学习是一种让计算机自我学习的算法总结，是让计算机通过自己对环境的不断尝试和探索自我修正并适应的一个过程。有些时候（尤其是在复杂环境中）这样的学习方式比起人为的干预来得更为有效。 那么强化学习又是如何进行的呢？ 原来在计算机学习的过程中也需要以为好的导师。然而这位导师不会手把手告诉计算机应该如何行动，他的存在只是为计算机尝试的每一个行为进行打分（评价好坏）。因此计算机只需要记住那些能够得到较高分数的行为序列就能够在环境中更好地生存下去。 换句话说，强化学习就好比是机器自己在环境中手无寸铁地摸索，然后收集信息进行总结，最后得出结论并自我更新的过程。而这些在尝试中得到的信息就会成为我们所谓的监督式学习的数据了（Data &amp; Labels）。 强化学习的应用 Alpha Go Video Game Image Recognition Chatbot Robot Controller 强化学习常见算法 通过价值（Reward）选择行为： Q Learning Sarsa Deep Q Network 直接选择行为： Policy Gradients 自我假象环境并从中学习行为： Model based RL Q Learning我们在现实中的行为都会有一个标准的规范，例如：父母常说的不写完作业就不能看电视。 Q Learning的方式和决策树（Decision Tree）类似，都是在一个特定的情形下对不同的决策进行概率的计算，然后继续延伸到下一个分支。每一个时刻的模型都可以用time state machine来表示。 以上面的例子来说，假设现在处于写作业的状态，这个时候我们的环境告诉我们可以选择的行为是：1、继续写作业 2、去看电视。这个时候因为模型从未尝试过任何一个选择，它可能会选择看电视，然后继续看电视。就这样让状态一直走下去，直到被父母责骂后，环境就会反馈一个负面的分数（也就是被惩罚）。这个时候模型深刻理解了这一系列的动作产生的后果是让自己被环境淘汰，因而它会极力去改变这样的结果。 Q Learning通过一个数据表（Table）来保存每一个state下获得的价值分数，而这些分数会随着每一次环境反馈的R（Reward）而做出改变。此时我处在写作业的state，而经过刚才的经验我得知了写作业比看电视带来的潜在收益更大一些，而此时Q表中记录的就是两个选择所带来的价值分数了，显然（S1，a1）小于（S2，a2），因此我决定选择写作业。一次迭代循环也就构成了Q Learning的学习过程。 了解了正向的决策过程，那么Q Learning的Table又是如何更新的呢？ 学习过程最开始的时候，我们会对Q表进行一个初始化，对每一个状态下的所有行为进行一个估计的价值分数。而此时状态为S1的时候，我们通过初始化的价值分数进行第一步行为的决策，然后到达S2状态。此时我们需要通过S2的状态好坏来给予S1的行为一个反馈，此时我们会假象自己选择了S2的不同行为，并得到了相应的奖励R。这个时候我们就能够通过： 来得到S1在环境反馈后真实的价值分数，这个时候就能够通过计算误差： 然后利用类似于Back-Propagation的方式将误差传递回去，进而利用学习效率更新原有的价值分数。 Tips：如果此时的S2并不是最终的结果，而且使用的Q Learning由限定为回合更新的话，那么此时的R并不会在这个时刻体现出来。因此S1更新所需要的Real（S1，a2）会来自之后所有state的结果总和，也就是一个迭代的过程。 以上是Q Learning的算法，可以看出Q Learning的神奇之处在于它将当前获得的奖励和下一步行为（也可以理解为衰减）的最大估计作为当前的现实。 公式中的参数： ε-greedy是一个调变参数，例如当ε = 0.9时，我们就会有90%的概率根据Q表的最佳解法进行行为选择；而10%的概率会随机选择行为。这样能让模型在拟合的同时还不忘探索更好的方法。 α是一个学习效率，介于0和1之间，能够调控当下对于误差的学习率。 γ则是对未来奖励的一个衰减值。假设我们的Q表分成很多个States，那么从第一个State开始就会累积今后的Reward值： 就如下图所示: 因为γ是一个介于0和1的值，那么不妨想象一下这个时候的γ = 1，此时所有的r都被保留了下来，因此我们的模型就会考虑到当下行为对所有未来的状态所获得的奖励。另外如果γ = 0时，此时只有r2还存在，我们的模型就只考虑到下一步行为对此刻造成的奖励而已。以此类推，γ &lt; 1可以得知越往后的奖励对当下的行为决定得越浅，因此γ也被称为奖励的衰减值。 Sarsa强化学习中的Sarsa和Q Learning十分相近。Sarsa也是通过Q Table中的值来对下一步的行为做出估计的，数值越大行为的可能性就越大，Sarsa也是通过这种方式来从环境中获得Rewards的。与Q Learning不同之处在于它们对模型的更新方式。 与Q Learning不同的是，Sarsa在Q现实的计算过程中，不是通过潜在收益最大的奖励方式而选择行为的，而是基于当下最优条件来选择行为（去除max运算）。 从算法中可以看出除了去除了max的估计运算外，Sarsa和Q Learning几乎没有差别。而就是因为Sarsa这种 “说到做到” 的特点，它也被称为On-Policy（在线学习）；而Q Learning则被称为Off-Policy（离线学习）。 有了MaxQ的运算辅助，Q Learning会根据最终奖励回传的潜在Rewards来估计当前的结果好坏，所以即使当前行为的分数是最高的，但是考虑到了潜在奖励的关系，模型可能还是会放弃选择该行为。而Sarsa相反则永远都是选择当前分数最高的行为来作为下一次的选择，进而一步步逼近结果。这样看来Q Learning在学习的过程中仍会尝试一些相对危险但是它认为可行的方法，因为它想要得到的永远是最佳解，而Sarsa则是尽可能地回避一切风险稳步求胜。 Sarsa(λ)按照对模型的更新方式可以分为 单步更新 和 回合更新。而传统的Sarsa属于单步更新的模式，也就是只有得到奖励的那一次更新能够得到来自当前奖励的Reward，然后更新最后一个步骤，以此类推慢慢往前移动。显然这样的更新是很没有效率的。 如果选择回合更新的方式，那么在获得奖励之后，先前所有的决策都会得到更新。乍一看这样的模型似乎更符合我们的需要，但是事实真是如此吗？ 有些时候我们的学习并不是完全朝着最终的目标笔直前行的，图中难免会走一些弯路，而这些不必要的行为如果也能够得到奖励，那么就不是我们所期望的结果了。 这个时候就需要使用Sarsa(λ)来帮助模型克服这样的问题了。Sarsa(λ)中的λ参数可以看做是一个反馈的衰减系数，和Sarsa公式中的γ差不多，能够根据更新的回合动态调整奖励的分配。 当λ = 0时模型为单步更新，也就是所有的奖励都反馈在了最后一次的行为上。 当λ = 1时模型为回合更新，也就是奖励反馈在了途中的所有行为上，并且具有相同的权重分配。 而当λ介于0和1之间时，也就是我们的Sarsa(λ)的实现了。它能够以λ系数作为一个衰减，将靠近结果的行为定义成对结果越重要的部分，而越远离的行为则作用较小。按照这样的思路从奖励倒推回起点的更新方式显得更为的科学。 Deep Q Network（DQN）DQN的结构从名字来看就能够推测出个大概，它就是在原有的Neural Network的基础上加上了Q Learning的部分。之所以会有DQN的出现，是因为传统的Q Learning维护表格的方式存在一些瓶颈。即当我们决策的行为次数多到一定的程度，就很难使用Table来记录，就比如围棋（GO）。 复杂的决策行为虽然无法使用Table来记录所有的可能性，却并不是不能解决的。在Deep Learning中的神经网络结构就能够很好地解决这个问题。 如果能够通过状态来即时预测每一个对应行为的价值分数，那么我们就不需要维护所谓的Q Table了。而DQN正是利用了这样的方法，通过将当前状态和对应的行为输入神经网络，让网络结构分析后得到相应的行为（类似分类）。这样的话我们只需要维护一个网络结构就能够解决所有的决策问题，最后再用强化学习的方法来选择动作。 那么我们又是如何来训练我们的神经网络结构从而拟合强化学习的模型呢？ 通过网络预测的结果和Q Learning通过Reward得出的最终结果的误差值可以用来反向传递给Neural Network模型。 当然即使是这样，我们也只是在大量数据中重现了Q Leanring的性能，那么DQN究竟有哪些过人之处呢？ Experience Replay根据强化学习的更新模式分为On-Policy和Off-Policy两种方式。而Q Learing就属于Off-Policy的一种，除了敢于尝试最佳化意外，它还能够学习自己实践的经历，也可以学习别人记录下来的经历，甚至是过去的经验。而这也是DQN的运用之一： DQN有个记忆库用来记录之前的经历，也可以加入其它网络尝试的经历。在训练的过程中，我们可以随机抽取一些记忆库中的经历来重新学习（复习） ，通过这样抽样的离散型打乱了经历的相关性，也让网络的更新更有效率。 Fixed Q-targetFixed Q-target也是一种打乱经历相关性的方法。每次训练过程中在得到Reward计算Q现实的 Q&#39; 和 预测行为的 Q 估计都是使用同一个神经网络预测得到的，这样一来网络的训练数据间就拥有了一定程度的相关性。 Fixed Q-target的做法是用一个结构相同，但是参数是几个训练流程前的数据的神经网络来进行Q现实的预测。这么做的好处是利用一个较慢的网络来进行现实的预测，从而打破数据间的依赖，让更新更有效率。同时放慢的现实估计能够根据几轮的观察来评估预测的结果，提高了可调性范围，也让Q估计的模型看得更远（更有远见）。 Policy Gradient如果按照对行为的选择方式，强化学习可以分为基于价值和基于概率两种方式。之前的Q Learning、Sarsa和DQN都是基于计算行为的价值来预测下一步的动作，但是如果动作是一个大范围的连续区域，那么通过价值的计算来选择动作就变得十分复杂而且难以实现（需要维护大量的价值和行为的匹配关系）。因此Policy Gradient的方式解决了这个问题，它不再是通过计算价值来选择行为，而是通过预测行为的概率来直接输出对应的动作，而这点与神经网络的行为十分类似。 我们都知道神经网络的训练是通过反向传递误差来修正隐藏层的权重值得。那么如果没有了价值的计算，我们的误差又是什么呢？ 答案是没有误差。在训练Policy Gradient的神经网络时，我们是直接通过概率选择行为的，因此我们没有一个明确的值表示行为的对于错。 如果以一个例子来看：输出的结果是所有行为的one-hot vector——[0.1, 0.2, 0.1, 0.4, 0.2]，那么很显然下一次选择的行为很可能就会是第4个动作（不是绝对的）。这样一来通过动作获得的奖励（Reward），我们就能够判断行为发生的可靠性，也就是好坏。有了这个标准，我们就会在下一次预测的时候 改变这个行为出现的概率 。如果是好的行为，那么下一次输出就可能变成 [0.1, 0.1, 0.1, 0.5, 0.2] ；反之增加的幅度就会被衰减。 Actor-CriticActor-Critic的强化学习方式可以根据名称分为两个部分，分别时Actor和Critic。两部分分别结合了Policy Gradient和Value Based RL的优势之处。 Acotr部分是采用了Policy Gradient对于动作的选择优势，因为是一个基于概率的模型，因此能够输出一个连续范围内的行为。 Critic部分是采用了Q Learning以及其他传统的Value-Based RL的更新方式，通过单步更新的方式让模型的学习更有效率。 Actor-Critic的方式和GAN神经网络十分相似，它是通过Actor部分的Policy Gradient神经网络来生成动作（相当与Generator），而利用Critic来判断行为的好坏，进而做出反馈（相当于Discriminator）。 Critic通过自己的神经网络学习环境、行为和Reward之间的关系（通过价值），然后对Actor每一步产生的行为做出即时的判断，进而通过模型学习到的行为潜在价值来单步更新Actor网络。 当然事物总有它的利与弊，Actor-Critic虽然能够解决Policy Gradient的单步更新问题，却无法很好的改善行为的连续性判断。Actor-Critic的两个神经网络都是基于一个连续动作的每一步进行更新（单步），这样的话就无法掌控行为之间的潜在关系，模型看待问题就显得相对片面，甚至学不到东西。 为此，Google Deepmind团队通过将Actor-Critic和DQN的精髓结合起来，开发了全新的 Deep Deterministic Policy Gradient（DDPG） 成功解决了这个问题。 Deep Deterministic Policy Gradient(DDPG)从Actor-Critic延伸而来的DDPG强化学习算法，能够让强化学习在连续的行为上得到更好的学习效果。 我们可以将Deep Deterministic Policy Gradient结构分成三个部分：Deep + Deterministic + Policy Gradient。 Deep：DDPG利用了DQN中Experience Replay和Fixed Q-target的概念，通过随机筛选的方式新型重复学习以及利用两个神经网络分别估计Q现实和Q估计。将传统的Value Based RL提升到了DQN的效率范围。 Deterministic：传统的Policy Gradient结构输出的结果为一个连续的动作区间（例如 [0.1, 0.1, 0.6…]），然后随机选择一个作为动作的输出。而Deterministic则是鄙弃了这种繁琐的输出方式，转而只输出决策完的单一动作，这样对于模型的更新更有效率。 DDPG：在结合了前两者的功能之后，Policy Gradient在连续行为的处理上就能更加得心应手了： 图中的Actor负责通过一个动作估计网络来预测当前的行为，并通过Deterministic输出一个特定的行为。同理根据DQN的思想另一个预测动作现实的网络也会根据较早期的输出一个真实的行为。 另一方面，对于Critic而言也是使用两个神经网络作为现实和估计的预测结构。但是不同的是，此时的输入除了从环境中得到的观测值意外，还包括了从Actor得到的上一个时间点输出的行为。咦？这种思想好像很眼熟？没错，这就和我们熟悉的RNN（Recurrent Neural Network）思想类似。都是通过将上一个状态值保留给下一个时刻进行学习的方法。有了这个结构的辅助，在训练连续行为的时候就能够很好地把握行为的相关性了。 Asynchronous Advantage Actor-Critic(A3C)A3C是一种用来提升强化学习效率的一种算法，它的精髓是能够让强化学习的模型通过分裂从而在同一个时刻学习不同的经验，然后总结之后得到完整的学习结果，这也是其中Asynchronous的含义。 假设现在为了获得Reward我们有16中不同的行为方式能够选择，那么不妨想想我们能够将这16中行为分成44的状态*分散放置在一个同样的环境中。让它们自我学习，最后将结果也就是学习的经验汇总到一个统一的网络中进行更新，这样就能大大地提升学习效率了。 如果计算机拥有多核心处理特性，那么A3C绝对是提升训练效率的一个方式。类似于多线程的概念，能够在同一时刻平行地处理多种可能性，而A3C的强化学习模组使用的是Actor-Critic，能够在异步有效更新Actor的行为状态，然后汇总到统一的模型中，模型会总结完所有异步状态的结果，整合之后再将这个秘籍（加总的结果）传递给每一个子模型（一个类似Map-Reduce的概念）。 Why AlphaGo Zero so powerful2017年10月19日Google Deep Mind发布了新一轮的围棋人工智能——AplhaGo Zero。那么这个技术在机器学习方面又是利用了什么样的方式从而在策略上战胜人类呢？答案很简单，就是多元计划。 要知道围棋的走法如果全部罗列出来可谓是比天上的星星还要多，计算机不可能在每一步做不同的尝试。因此它利用了 蒙特卡洛检索（Monte Carlo Tree Search） 的方式，对未来的决策进行探索。而这种方式最早来自于IBM开发的国际象棋AI Deep Blue的决策方式。 但是在围棋方面的决策复杂度比起象棋要大得多，因此Alpha Go放弃了在检索方面的广度，转而进行深度检索。 Alpha Go在传统的Monte Carlo检索树的基础上结合了强化学习网络对每一步的决策进行价值评估，从而让深度的尝试更加精确和有效率。 旧版本的Alpha Go利用了两个深度神经网络结构来辅助决策的过程。其中一个属于决策分类，每次输出一个概率值，用于评估当下最可能的Action。而另一个网络则是用于评估这个决策对于总体环境的一个价值。 传统的Alpha Go和人类的思维模式类似，利用学习大量的前人经验（棋谱）来提升自己的能力，因此很难跳脱人类下棋的一些套路和定式。而Alpha Go Zero在这一点上则完全不同，它仅仅通过自我学习来理解和强化自己对于围棋的认知，从而跳脱人的思维，真正意义上以机器的角度进行学习。打破了定式的枷锁，模型就能自我总结出人们难以发现并且有效的技巧，这也是战胜人类的关键（在认知上超越人类）。 此外，Alpha Go Zero仅采用了一个神经网络结构，这样能够充分有效地利用资源，在决策的同时对当下的决策进行价值评估，并通过reward结果反馈给模型进行更新。 Alpha Go Zero的出现和它产生的影响不仅仅是对于围棋AI的一个重要突破，更重要的是它开创了AI的一个新思路，利用无监督的方式让机器自己学习一个Domain的Knowledge是未来几乎所有AI领域的研究所要解决的问题。 如何根据问题选择强化学习方法我们可以通过分类的方式来区分不同的强化学习。 对环境的反馈通过对环境的反馈可以分为两大类： 理解环境（Model-Based RL） 不理解环境（Model-Free RL） 如果我们的模型从一开始就没有打算去理解环境的本质，而只是一味地依靠尝试从环境中获得反馈来得以生存。那么就属于不理解环境的类型；相反，如果模型从一开始就试图理解环境的本质，那么就能自行对环境进行建模。 试想一下，如果只是单纯地依靠环境给予的反馈来决定下一步的行为，那么所有的行为所造成的后果就会直接作用在模型本身。如果所采取的行为一直没有办法适应环境，那么模型就会一步步走向崩溃。 而如果是能够理解环境的强化学习模型（Model-Based），它能够实现根据了解到的环境数据对整个环境系统新型建模（虚拟环境）。然后在虚拟的环境中进行训练，最后模型不但能够在虚拟环境中适应，还能够迁移到真实的环境中去。 除了能够建立虚拟环境来模拟学习过程以外，Model-Based RL还有一个优点是Model-Free RL所羡慕的，那就是想象力。 Model-Free RL模型只能够一步一步按照环境给予的参数来思考下一步的动作，无法跳脱反馈信息的控制。因而只能按部就班循序渐进。而Model-Based RL由于已经理解了环境的本质，因此除了能够接受来自环境的反馈以外，还能够通过想象来同时预测多种行为的可能后果，最后选择一个模型觉得最佳的结果。这样就不必受到反馈信息的牵制了。 想象一下如果我们想要让一只猫到达一个特定的目标，那么我们可能需要在路线上摆好食物来引诱它。而Model-Free RL的方式就是相当于在每一步朝着正确目标的方向上摆上和步数相同的事物，这样就能够一步步逼近最终目标。但是如果是Model-Based RL的做法，它可能不会完全按照事物摆设的路线去逼近最终目标，而是不断地尝试其他新的可能性，最终找到一个最佳（距离最短）的路径作为模型的训练目标。这也是为什么Alpha Go能够下出人们所无法理解的路数了，因为在它看来目标是获胜，而为了达到这个目标可能有更加简单的方式。 对行为的选择方式通过对行为的选择方式也可以分为两大类： 基于概率（Policy-Based RL） 基于价值（Value-Based RL） 基于概率的方法输出的值是所有动作的概率，然后根据概率做出行动，因此比较灵活。所有的行动都有可能被选到，只是概率大的动作被选中的情况比较多罢了。但是基于价值的方式则不痛，它的输出是所有动作对结果做出的贡献度（也就是价值）。这样的话只有价值最高的那个动作才会被选中。 我们现实环境中的决策往往不会是单一的一个动作，而是一连串连续的动作（Sequential Action），下一个动作的行为是基于上一个动作的结果而决定的。这样的情况下就不能使用基于价值的方式了，因为没有办法依靠单次的行为给出准确的价值分数。而基于概率的方式就变得尤为重要，因为我们可以使用条件概率分布来表示现在的动作被选中的几率大小。 那么基于概率和基于价值的方式又有哪些强化学习的算法呢？ 基于概率的方式有： Policy Gradients 基于价值的方式有： Q Learning Sarsa 还有结合两者优势而得到的方法： Actor-Critic Actor-Critic顾名思义分为两个部分，Actor的部分通过概率计算做出下一步动作，而Critic根据做出的动作对结果的贡献评估价值分数。如此一来就把Policy-based和Value-based的功能整合在了一起，加速了学习过程。 对模型的更新方式通过对模型的更新方式也可以分为两大类： 回合更新（Monte-Carlo update） 单步更新（Temporal-Difference update） 回合更新指的是当学习开始到达到目的的一整个过程结束后才开始更新我们模型的行为准则；而单步更新则是学习的过程中根据不同的决策动态即时地更新模型的参数。 回合更新的强化学习方法包括： 最原始的Policy Gradients Monte-Carlo Learning 单步更新的方法则有： Q Learning Sarsa 升级版的Policy Gradients 比起回合更新而言，单步更新更有效率，因此普遍的强化学习都是使用单步更新的方式。 学习的模式通过模型学习的不同模式也可以分为两大类： 在线学习（On-Policy） 离线学习（Off-Policy） 在线学习指的是必须由待训练的模型自行进入环境学习，所有的决策都是由模型自己决定的。而离线学习则是可以选择模型自己进入环境学习，亦或者是通过总结别人的经验来学习。同时离线学习也不需要强制使学习和更新同步，换句话说就是可以先在环境中尝试各种行为，记录下环境的反馈，到了适当的时机（不需要环境）在通过这些数据更新自己的模型。 比较典型的在线学习方式有： Sarsa Sarsa(λ) 而典型的离线学习方法有: Q Learning Deep Q Network 进化算法（Evolutionary Algorithms）物竞天择，适者生存是大自然永恒的规律，这些规律引导者人们为了适应环境而不断进化。同样在机器学习的领域中，我们是否也能够让计算机依照环境的不同而变异来适应环境呢？ 遗传算法（Genetic Algorithm）遗传算法是进化理论中的重要环节之一，其核心思想来源于生物学的进化论。模型算法的训练过程中，往往会尝试不同的参数选择来演化下一代的模型。而这个过程势必会产生新的物种，如果该新生代能够更好地适应环境，那么我们就有理由相信它能够更好地繁衍并被保留下来。 模型建构过程中，计算机通过0和1将特征信息编码成为机器能够表示和存取的代码格式。有了这种让计算机理解遗传DNA的方式，我们就能够通过迁移学习的方式将生物科学中传统的DNA遗传理论转换到计算机模型算法的实现过程中来了。 假设现在模型中有一组父母的特征序列，他们会根据环境训练出许许多多不同的儿子序列，而这些儿子序列中融合了父母两代的遗传信息。 而在训练的过程中，遗传信息往往会因为环境的不同而发生变化，而这些变化也会体现在编码上，只要修改了其中一部分特征序列，就会改变整个模型的行为。因此有了这样的机制，我们就能够在机器学习模型的训练中加入遗传理论的特性，尝试生成大量的模型样本，然后根据适者生存，不适者淘汰的自然法则来选择最终的模型。 进化策略（Evolution Strategy）进化策略和遗传算法的共同之处在于它们都是通过继承上一代的优势，然后通过局部变异来选择更加适应环境的新生代，不断进化。 遗传算法是通过二进制编码来表示遗传信息的结构，这样在现实生活中的许多问题上是难以直观应用和实现的。因此我们引入进化策略来辅助计算机理解并表示实数形态的遗传特征： 假设我们的父母特征信息是一组实数的集合，而这些实数往往可以用来表示例如算法公式的系数部分，从而通过遗传和变异的思维来改变这些实数，达到更新和优化算法的功能。 同样在繁衍新生代模型参数的过程中我们同样可以通过交叉配对的方式进行遗传，而新生代的模型同样是由一组实数组成的参数构成的。但是问题来了，面对实数我们应该如何变异呢？传统的二进制通过取not方式来进行的方式似乎不再奏效了。 针对这个问题，首先想到了应该是类似SGD的方式进行局部位移来改变实数了。进化策略中引用了变异强度这个变量来表示这个过程的变化率，如果我们将祖先的实数集当成是正态分布的平均值，我们只需要为这个平均值附加一个标准差来进行偏置就能够达到变异的效果了。 以8.8的参数为例：假设我们取1作为标准差的值，然后通过在8.8为平均值的正态分布中进行标准差为1的偏置，我们就能够得到一个变异后的新值了。之后只要对所有遗传后的信息做这个步骤，就能够达到变异的效果了。 同样父母样本自身具有的变异强度也能够通过遗传的方式继承给下一代，甚至也能够接受变异强度自身的变异，而这些行为也让进化策略在模型更新上更加灵活。 总而言之：进化策略在遗传的过程中总共包含了两部分的信息，其一是记录了实数具体指的均值信息，另一个则是记录了变异强度的标准差信息。有了这两个信息，我们的新生代模型就能够根据环境的不同而进行不同程度的变异了。 神经网络的进化（Neuron-Evolution）一般的神经网络实质就是一些计算机能够理解和使用的高度集成化的数学模型。数据利用类似电信号的方式正向传播，输出结果，最后根据与真实数据的误差进行反向传递修正误差。而真实的神经网络却没有所谓的反向传递机制，只是透过正向传播的刺激来产生新的神经回路，从而记忆这些行为。 之前提到的遗传算法和进化策略都是进化算法的实现方式，但是两者在神经网络的应用上有所不同： 遗传算法是利用从父母那里继承下来的神经网络结构经过组合变异得到的，我们将许许多多不同变异结构的神经网络丢到环境中。根据适者生存的法则就能够得到最好的神经网络结构了。 而进化策略则是倾向于先固定好神经网络的结构，然后将这些结构的链接权重和以及链接方式加以修改，得到许多新生代的神经网络结构。然后将这些结构同样至于环境中让它们适者生存。最后将环境中的神经网络根据适应程度给予不同的权重组成新的神经网络，这样一来优质的模型链接就会逐渐主宰这个结构。 我们知道传统的监督式学习神经网络是利用梯度下降的方式来更新网络参数的，而这比起遗传算法的更新策略更加有效率。原因是梯度下降算法是通过在梯度的方向上进行模型参数的更新，而梯度标记了当前的最优更新方向，只要以梯度躺平的方向前进，模型就能够越来越好。 而遗传算法的更新模式则是利用不同的新生代模型产生不同的参数，然后在众多参数中选择最优的参数进行替换。也就是说每一次更新神经网络都需要产生大量的新模型，这一点无疑会加大运算量。 尽管如此，遗传算法的更新还是有一些优势所在的，其中重要的一点就是能够防止局部最优的情况。我们知道，利用梯度下降的方式会让神经网络陷入局部最优的情况。而遗传算法由于是在全局情况下随机产生新的模型参数，因此模型的更新不受梯度的影响，能够到达曲线的任何位置。 除了监督式神经网络以外，进化算法也可以用在强化学习中。而且研究指出利用进化算法得到的强化学习比起传统的梯度下降的训练方式更加有效率，因为我们可以通过A3C等方式将许多不同种类的模型分配到许多的平行的环境中，从而做到分布式学习的目的。也许当以梯度下降为主的神经网络遇到瓶颈时，基于遗传进化算法的神经网络能够为我们打开另一扇窗。 LICENCE： 图片摘录自网络引擎，未经授权请勿用于盈利性活动更多详细内容 ： Link","categories":[],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://yoursite.com/tags/Deep-Learning/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"},{"name":"Reinforcement Learning","slug":"Reinforcement-Learning","permalink":"http://yoursite.com/tags/Reinforcement-Learning/"}]}]}