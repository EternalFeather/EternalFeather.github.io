<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>指尖の岁月</title>
  <subtitle>世间点滴，莫忘于心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-14T05:04:25.328Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Eternal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://yoursite.com/2018/01/13/design-pattern/"/>
    <id>http://yoursite.com/2018/01/13/design-pattern/</id>
    <published>2018-01-13T15:39:42.000Z</published>
    <updated>2018-01-14T05:04:25.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h1><h2 id="Design-Aspect"><a href="#Design-Aspect" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>An algorithm</strong></p>
<ul>
<li>Define a family of algorithms, encapsulate each one, and make them interchangeable.</li>
<li>Strategy lets the algorithm vary independently from clients that use it.</li>
</ul>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>Multiple classes will be modified if new behaviors are to be added.</li>
<li>All duplicate code will be modified if the behavior is to be changed.</li>
</ul>
<h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/BTffYtH.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Strategy.java</div><div class="line">public interface Strategy&#123;</div><div class="line">    public int doOperation(int num1, int num2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// OperationAdd.java</div><div class="line">public class OperationAdd implements Strategy&#123;</div><div class="line">    @Override</div><div class="line">    public int doOperation(int num1, int num2)&#123;</div><div class="line">        return num1 + num2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// OperationSubstrate.java</div><div class="line">public class OperationSubstrate implements Strategy&#123;</div><div class="line">    @Override</div><div class="line">    public int doOperation(int num1, int num2)&#123;</div><div class="line">        return num1 - num2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// OperationMultiply.java</div><div class="line">public class OperationMultiply implements Strategy&#123;</div><div class="line">    @Override</div><div class="line">    public int doOperation(int num1, int num2)&#123;</div><div class="line">        return num1 * num2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// Context.java</div><div class="line">public class Context&#123;</div><div class="line">    private Strategy strategy;</div><div class="line">    </div><div class="line">    public Context(Strategy strategy)&#123;</div><div class="line">        this.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public int executeStrategy(int num1, int num2)&#123;</div><div class="line">        return strategy.doOperation(num1, num2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// StrategyPatternDemo.java</div><div class="line">public class StrategyPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Context context = new Context(new OperationAdd());</div><div class="line">        System.out.println(&quot;10 + 5 = &quot; + context.executeStrategy(10, 5));</div><div class="line">    </div><div class="line">        context = new Context(new OperationSubstract());</div><div class="line">        System.out.println(&quot;10 - 5 = &quot; + context.executeStrategy(10, 5));</div><div class="line">    </div><div class="line">        context = new Context(new OperationMultiply());</div><div class="line">        System.out.println(&quot;10 * 5 = &quot; + context.executeStrategy(10, 5));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement"><a href="#Example-Statement" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>In a duck Game,<ul>
<li>There are four types of ducks in the game: MallardDuck, RedheadDuck, RubberDuck, and DecoyDuck.</li>
<li>All types of the ducks have the same swim behavior but are with different displays.</li>
<li>Some ducks can fly with wings, but some cannot fly.</li>
<li>A duck can quack, squeak, or be silent. </li>
</ul>
</li>
</ul>
<h1 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h1><h2 id="Design-Aspect-1"><a href="#Design-Aspect-1" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Number of objects that depend on another object; how the dependent objects stay up to date</strong></p>
<ul>
<li>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</li>
</ul>
<h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>The code will be modified if a new display/presentation is going to be added.</li>
</ul>
<h2 id="Graph-1"><a href="#Graph-1" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/jwft3uU.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-1"><a href="#Steps-1" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// Subject.java</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class Subject &#123;</div><div class="line">    private List&lt;Observer&gt; observers = new ArrayList&lt;Observer&gt;();</div><div class="line">    private int state;</div><div class="line"></div><div class="line">    public int getState()&#123;</div><div class="line">        return state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setState(int state)&#123;</div><div class="line">        this.state = state;</div><div class="line">        notifyAllObservers();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void attach(Observer observer)&#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void notifyAllObservers()&#123;</div><div class="line">        for (Observer observer : observers)&#123;</div><div class="line">            observer.update();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Observer.java</div><div class="line">public abstract class Observer &#123;</div><div class="line">    protected Subject subject;</div><div class="line">    public abstract void update();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// BinaryObserver.java</div><div class="line">public class BinaryObserver extends Observer &#123;</div><div class="line">    public BinaryObserver(Subject subject)&#123;</div><div class="line">        this.subject = subject;</div><div class="line">        this.subject.attach(this);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void update() &#123;</div><div class="line">        System.out.println(&quot;Binary String: &quot; + Integer.toBinaryString(subject.getState()));</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// OctalObserver.java</div><div class="line">public class BinaryObserver extends Observer &#123;</div><div class="line">    public BinaryObserver(Subject subject)&#123;</div><div class="line">        this.subject = subject;</div><div class="line">        this.subject.attach(this);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void update() &#123;</div><div class="line">        System.out.println(&quot;Octal String: &quot; + Integer.toOctalString(subject.getState()));</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// BinaryObserver.java</div><div class="line">public class HexaObserver extends Observer &#123;</div><div class="line">    public BinaryObserver(Subject subject)&#123;</div><div class="line">        this.subject = subject;</div><div class="line">        this.subject.attach(this);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void update() &#123;</div><div class="line">        System.out.println(&quot;Hex String: &quot; + Integer.toHexString(subject.getState()));</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// ObserverPatternDemo.java</div><div class="line">public class ObserverPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Subject subject = new Subject();</div><div class="line">    </div><div class="line">        new HexaObserver(subject);</div><div class="line">        new OctalObserver(subject);</div><div class="line">        new BinaryObserver(subject);</div><div class="line">        </div><div class="line">        System.out.println(&quot;First state change: 15&quot;);</div><div class="line">        subject.setState(15);</div><div class="line">        System.out.println(&quot;Second state change: 10&quot;);</div><div class="line">        subject.setState(10);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-1"><a href="#Example-Statement-1" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>In a spreadsheet application,<ul>
<li>A spreadsheet object, bar chart object, and pie chart object can depict information in the same application data object by using different presentations.</li>
<li>When the user changes the information in the spreadsheet, the bar chart reflects the changes immediately, and vice versa. </li>
<li>Both a spreadsheet object and bar chart object can depict information in the same application data object by using different presentations.</li>
</ul>
</li>
</ul>
<h1 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h1><h2 id="Design-Aspect-2"><a href="#Design-Aspect-2" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Responsibilities of an object without subclassing</strong></p>
<ul>
<li>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</li>
</ul>
<h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>A class will be modified if you want to attach additional responsibilities(decorators) to an object dynamically.</li>
<li>One way to add responsibilities is with inheritance.</li>
<li>A client is difficult to control how and when to decorate the component with a object.</li>
</ul>
<h2 id="Graph-2"><a href="#Graph-2" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/lc2G5HJ.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-2"><a href="#Steps-2" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Shape.java</div><div class="line">public interface Shape&#123;</div><div class="line">    void draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// Rectangle.java</div><div class="line">public class Rectangle implement Shape &#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Shape: Rectangle&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Circle.java</div><div class="line">public class Circle implement Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Shape: Circle&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// ShapeDecorator.java</div><div class="line">public abstract class ShapeDecorator implements Shape&#123;</div><div class="line">    protected Shape decoratedShape;</div><div class="line">    </div><div class="line">    public ShapeDecorator(Shape decoratedShape)&#123;</div><div class="line">        this decoratedShape = decoratedShape;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void draw()&#123;</div><div class="line">        decoratedShape.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// RedShapeDecorator.java</div><div class="line">public class RedShapeDecorator extends ShapeDecorator&#123;    </div><div class="line">    public RedShapeDecorator(Shape decoratedShape)&#123;</div><div class="line">        super(decoratedShape);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        decoratedShape.draw();</div><div class="line">        setRedBorder(decoratedShape);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void setRedBorder(Shape decoratedShape)&#123;</div><div class="line">        System.out.println(&quot;Border Color: Red&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 5.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// DecoratorPatternDemo.java</div><div class="line">public class DecoratorPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Shape circle = new Circle();</div><div class="line">        Shape redCircle = new RedShapeDecorator(new Circle());</div><div class="line">        Shape redRectangle = new RedShapeDecorator(new Rectangle());</div><div class="line">        System.out.println(&quot;\nCircle of red border&quot;);</div><div class="line">        redCircle.draw();</div><div class="line">        System.out.println(&quot;\nRectangle of red border&quot;);</div><div class="line">        redRectangle.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-2"><a href="#Example-Statement-2" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>In FileViewer,<ul>
<li>We have a TextView object that displays text in a window.</li>
<li>TextView has no scroll bars by default, because we might not always need them.</li>
<li>We can also add a thick black border around the TextView.</li>
<li>It is highly likely that we will support various file formats for display in the future.</li>
</ul>
</li>
<li>Starbuzz Coffee,<ul>
<li>Starbuzz Coffee shops are scrambling to update their ordering systems to match their beverage offerings (e.g. HouseBlend, DarkRoast, Decaf and Espresso) to summate how they cost.</li>
<li>In addition to your coffee, you can also ask for several condiments like steamed milk, soy, and mocha, and have these, so they really need to get them built into their order system</li>
</ul>
</li>
</ul>
<h1 id="Factory-Method-Pattern"><a href="#Factory-Method-Pattern" class="headerlink" title="Factory Method Pattern"></a>Factory Method Pattern</h1><h2 id="Design-Aspect-3"><a href="#Design-Aspect-3" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Subclass of object that is instantiated</strong></p>
<ul>
<li>Define an interface for creating an object, but let subclasses decide which class to instantiate. Facotry Method lets a class defer instantiation to subclasses.</li>
</ul>
<h2 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>As the objects being created changes over time, we need to modify the code of the creator object for the creations over and over again.</li>
</ul>
<h2 id="Graph-3"><a href="#Graph-3" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/2ZXbYqh.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-3"><a href="#Steps-3" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Shape.java</div><div class="line">public interface Shape&#123;</div><div class="line">    void draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Rectangle.java</div><div class="line">public class Rectangle implements Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Inside Rectangle::draw() method.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Circle.java</div><div class="line">public class Circle implements Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Inside Circle::draw() method.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Square.java</div><div class="line">public class Square implements Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Inside Square::draw() method.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// ShapeFactory.java</div><div class="line">public abstract class ShapeFactory&#123;</div><div class="line">    public abstract Shape getShape();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// CircleFactory.java</div><div class="line">public class CircleFactory extends ShapeFactory&#123;</div><div class="line">    public Shape getShape()&#123;</div><div class="line">        return new Circle();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// RectangleFactory.java</div><div class="line">public class RectangleFactory extends ShapeFactory&#123;</div><div class="line">    public Shape getShape()&#123;</div><div class="line">        return new Rectangle();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// SquareFactory.java</div><div class="line">public class SquareFactory extends ShapeFactory&#123;</div><div class="line">    public Shape getShape()&#123;</div><div class="line">        return new Square();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// FactoryPatternDemo.java</div><div class="line">public class FactoryPatternDemo &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        ShapeFactory circleFactory = new CircleFactory();</div><div class="line">        ShapeFactory rectangleFactory = new RectangleFactory();</div><div class="line">        ShapeFactory squareFactory = new SquareFactory();</div><div class="line">                                           </div><div class="line">        Shape circle = circleFactory.getShape();</div><div class="line">        Shape rectangle = rectangleFactory.getShape();</div><div class="line">        Shape square = squareFactory.getShape();</div><div class="line">    </div><div class="line">        circle.draw();</div><div class="line">        rectangle.draw();</div><div class="line">        square.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-3"><a href="#Example-Statement-3" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Powerful Document Viewer,<ul>
<li>A powerful application can present multiple documents at the same time.</li>
<li>These documents include DrawingDocument, TextDocument, and so on.</li>
<li>The application is responsible for managing documents and will create them as required.</li>
</ul>
</li>
<li>Pizza Store,<ul>
<li>The store makes more than one type of pizza: Cheese Pizza, Greek Pizza, and Pepperoni Pizza </li>
<li>Each pizza has different way to prepare, and has the same way to bake, to cut, and to box. </li>
<li>To make this store more competitive, you may add a new flavor of pizza or remove unpopular ones.</li>
</ul>
</li>
</ul>
<h1 id="Abstract-Factory-Pattern"><a href="#Abstract-Factory-Pattern" class="headerlink" title="Abstract Factory Pattern"></a>Abstract Factory Pattern</h1><h2 id="Design-Aspect-4"><a href="#Design-Aspect-4" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Families of product objects</strong></p>
<ul>
<li>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</li>
</ul>
<h2 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>As the families of related or dependent objects are added, we need to write new object classes for the new families.</li>
</ul>
<h2 id="Graph-4"><a href="#Graph-4" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/7vbZGES.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-4"><a href="#Steps-4" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// Window.java</div><div class="line">public interface Window&#123;</div><div class="line">    void build();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Scrollbar.java</div><div class="line">public interface Scrollbar&#123;</div><div class="line">    void build();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Button.java</div><div class="line">public interface Button&#123;</div><div class="line">    void build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">// MotifWindow.java</div><div class="line">public class MotifWindow implements Window&#123;</div><div class="line">    @Override</div><div class="line">    public void build()&#123;</div><div class="line">        System.out.println(&quot;Inside MotifWindow::build() method.&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// PMWindow.java</div><div class="line">public class PMWindow implements Window&#123;</div><div class="line">    @Override</div><div class="line">    public void build()&#123;</div><div class="line">        System.out.println(&quot;Inside PMWindow::build() method.&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// MotifScrollbar.java</div><div class="line">public class MotifScrollbar implements Scrollbar&#123;</div><div class="line">    @Override</div><div class="line">    public void build()&#123;</div><div class="line">        System.out.println(&quot;Inside MotifScrollbar::build() method.&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// PMScrollbar.java</div><div class="line">public class PMScrollbar implements Scrollbar&#123;</div><div class="line">    @Override</div><div class="line">    public void build()&#123;</div><div class="line">        System.out.println(&quot;Inside PMScrollbar::buildl() method.&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// MotifButton.java</div><div class="line">public class MotifButton implements Button&#123;</div><div class="line">    @Override</div><div class="line">    public void build()&#123;</div><div class="line">        System.out.println(&quot;Inside MotifButton::build() method.&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// PMButton.java</div><div class="line">public class PMButton implements Button&#123;</div><div class="line">    @Override</div><div class="line">    public void build()&#123;</div><div class="line">        System.out.println(&quot;Inside PMButton::build() method.&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// WidgetFactory.java</div><div class="line">public interface WidgetFactory&#123;</div><div class="line">    public Window createWindow();</div><div class="line">    public Scrollbar createScrollbar();</div><div class="line">    public Button createButton();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// MotifWidgetFactory.java</div><div class="line">public class MotifWidgetFactory implements WidgetFactory&#123;</div><div class="line">    public Window createWindow()&#123;</div><div class="line">        return new MotifWindow();</div><div class="line">    &#125;</div><div class="line">    public Scrollbar createScrollbar()&#123;</div><div class="line">        return new MotifScrollbar();</div><div class="line">    &#125;</div><div class="line">    public Button createButton()&#123;</div><div class="line">        return new MotifButton();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// PMWidgetFactory.java</div><div class="line">public class PMWidgetFactory implements WidgetFactory&#123;</div><div class="line">    public Window createWindow()&#123;</div><div class="line">        return new PMWindow();</div><div class="line">    &#125;</div><div class="line">    public Scrollbar createScrollbar()&#123;</div><div class="line">        return new PMScrollbar();</div><div class="line">    &#125;</div><div class="line">    public Button createButton()&#123;</div><div class="line">        return new PMButton();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 5.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// GUIApplication.java</div><div class="line">public class GUIApplication&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        WidgetFactory motifWidgetFactory = new MotifWidgetFactory();</div><div class="line">        WidgetFactory pmWidgetFactory = new PMWidgetFactory();</div><div class="line">        motifWidgetFactory.createWindow().build();</div><div class="line">        motifWidgetFactory.createScrollbar().build();</div><div class="line">        motifWidgetFactory.createButton().build();</div><div class="line">        pmWidgetFactory.createWindow().build();</div><div class="line">        pmWidgetFactory.createScrollbar().build();</div><div class="line">        pmWidgetFactory.createButton().build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-4"><a href="#Example-Statement-4" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>A GUI Application with Multiple Styles<ul>
<li>A GUI Application consists of some kinds of widgets like window, scroll bar, and button.</li>
<li>Each widget in the GUI application has two or more implementations according to different lookand-feel standards, such as Motif and Presentation Manager.</li>
<li>The GUI application can switch its look-and-feel style from one to another.</li>
</ul>
</li>
<li>Pizza Store<ul>
<li>In a pizza store system, two flavors of pizza are offered: Cheese Pizza and Pepperoni Pizza.</li>
<li>Each flavor of pizza can be categorized into two styles: New York Style and Chicago Style.</li>
<li>Different pizza style needs different dough and sauce: </li>
<li>NY Style: Thin Crust Dough, Marinara Sauce</li>
<li>Chicago Style: Thick Crust Dough, Plum Tomato Sauce</li>
</ul>
</li>
</ul>
<h1 id="Iterator-Pattern"><a href="#Iterator-Pattern" class="headerlink" title="Iterator Pattern"></a>Iterator Pattern</h1><h2 id="Design-Aspect-5"><a href="#Design-Aspect-5" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>How an aggregate’s elements are accessed, traversed</strong></p>
<ul>
<li>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</li>
</ul>
<h2 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>The method of accessing the elements of two aggregate objects with different representations will be modified if a new aggregate object with different representation is added.</li>
</ul>
<h2 id="Graph-5"><a href="#Graph-5" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/qG3lxSm.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-5"><a href="#Steps-5" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// Iterator.java</div><div class="line">public interface Iterator&#123;</div><div class="line">    public boolean hasNext();</div><div class="line">    public Object next();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Container.java</div><div class="line">public interface Container&#123;</div><div class="line">    public Iterator getIterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// NameRepository.java</div><div class="line">public class NameRepository implements Container&#123;</div><div class="line">    public String name[] = &#123;&quot;Robert&quot;, &quot;John&quot;, &quot;Julie&quot;, &quot;Lora&quot;&#125;;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Iterator getIterator()&#123;</div><div class="line">        return new NameIterator();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private class NameIterator implements Iterator&#123;</div><div class="line">        int index;</div><div class="line">        </div><div class="line">        @Override</div><div class="line">        public boolean hasNext()&#123;</div><div class="line">            if (index &lt; names.length)&#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        @Override</div><div class="line">        public Object next()&#123;</div><div class="line">            if (this.hasNext())&#123;</div><div class="line">                return names[index++];</div><div class="line">            &#125;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// IteratorPatternDemo.java</div><div class="line">public class IteratorPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        NameRepository nameRepository = new NameRepository();</div><div class="line">        for (Iterator iter = nameRepository.getIterator(); iter.hasNext();)&#123;</div><div class="line">            String name = (String)iter.next();</div><div class="line">            System.out.println(&quot;Name : &quot; + name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-5"><a href="#Example-Statement-5" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Print Out Items in Different Data Structures,<ul>
<li>A List data structure is implemented with a String array which can contain a series of String objects.</li>
<li>We can access List by calling the get() method with an index, and know how many Strings inside the List with a public attribute: length.</li>
<li>Furthermore, another data structure called SkipList which consists of a series of SkipNodes.</li>
<li>Each SkipNode can be accessed by invoking the getNode() method in SkipList with an index. And we have the idea about the size of SkipList with its size() method.</li>
<li>Now we have to traverse both List and SkipList to print out those object items in the two different data structures for some purpose. </li>
</ul>
</li>
<li>Merge Tow Menus<ul>
<li>A waitress of Pancake House keeps a breakfast menu which uses an ArrayList to hold its menu items.</li>
<li>And a waitress of Diner keeps a lunch menu which uses an Array to hold its menu items.</li>
<li>Now, these two restaurants are merged and tend to provide service in one place, so a waitress should keep both menus on hand.</li>
<li>How to the waitress print two different menu representations at a time?</li>
</ul>
</li>
</ul>
<h1 id="Composite-Pattern"><a href="#Composite-Pattern" class="headerlink" title="Composite Pattern"></a>Composite Pattern</h1><h2 id="Design-Aspect-6"><a href="#Design-Aspect-6" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Structure and composition of an object</strong></p>
<ul>
<li>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</li>
</ul>
<h2 id="Problem-6"><a href="#Problem-6" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>The user can group components to form larger components, which in turn can be grouped to form still larger components.</li>
</ul>
<h2 id="Graph-6"><a href="#Graph-6" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/GgSJ042.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-6"><a href="#Steps-6" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// Employee.java</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class Employee&#123;</div><div class="line">    private String name;</div><div class="line">    private String dept;</div><div class="line">    private int salary;</div><div class="line">    private List&lt;Employee&gt; subordinates;</div><div class="line"></div><div class="line">    public Employee(String name, String dept, int sal)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.dept = dept;</div><div class="line">        this.salary = sal;</div><div class="line">        subordinates = new ArrayList&lt;Employee&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void add(Employee e)&#123;</div><div class="line">        subordinates.add(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void remove(Employee e)&#123;</div><div class="line">        subordinates.remove(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Employee&gt; getSubordinates()&#123;</div><div class="line">        return subordinates;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String toString()&#123;</div><div class="line">        return (&quot;Employee : [Name : &quot; + name + &quot;, dept : &quot; + dept + &quot;, salary : &quot; + salary + &quot; ]&quot;);    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// CompositePatternDemo.java</div><div class="line">public class CompositePatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Employee CEO = new Employee(&quot;John&quot;, &quot;CEO&quot;, 30000);</div><div class="line">        Employee headSales = new Employee(&quot;Robert&quot;, &quot;Head Sales&quot;, 20000);</div><div class="line">        Employee headMarketing = new Employee(&quot;Micheal&quot;, &quot;Head Marketing&quot;, 20000);</div><div class="line">        Employee clerk1 = new Employee(&quot;Laura&quot;, &quot;Marketing&quot;, 10000);</div><div class="line">        Employee clerk2 = new Employee(&quot;Bob&quot;, &quot;Marketing&quot;, 10000);</div><div class="line">        Employee salesExcutive1 = new Employee(&quot;Richard&quot;, &quot;Sales&quot;, 10000);</div><div class="line">        Employee salesExcutive2 = new Employee(&quot;Rob&quot;, &quot;Sales&quot;, 10000);</div><div class="line">    </div><div class="line">        CEO.add(headSales);</div><div class="line">        CEO.add(headMarketing);</div><div class="line">        headSales.add(salesExcutive1);</div><div class="line">        headSales.add(salesExcutive2);</div><div class="line">        headMarketing.add(clerk1);</div><div class="line">        headMarketing.add(clerk2);</div><div class="line">    </div><div class="line">        System.out.println(CEO);</div><div class="line">        for (Employee headEmployee : CEO.getSubordinates())&#123;</div><div class="line">            System.out.println(headEmployee);</div><div class="line">            for (Employee employee : headEmployee.getSubordinates())&#123;</div><div class="line">                System.out.println(employee);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-6"><a href="#Example-Statement-6" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>In schematic capture application,<ul>
<li>There are some basic components can be drawn such as Text, Line, and Rectangle.</li>
<li>The user can group basic components to form larger components, which in turn can be grouped to form still larger components.</li>
</ul>
</li>
<li>Merge two menus extends,<ul>
<li>A dessert submenu is going to be added to the Diner menu.</li>
</ul>
</li>
</ul>
<h1 id="Facade-Pattern"><a href="#Facade-Pattern" class="headerlink" title="Facade Pattern"></a>Facade Pattern</h1><h2 id="Design-Aspect-7"><a href="#Design-Aspect-7" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Interface to a subsystem</strong></p>
<ul>
<li>Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</li>
</ul>
<h2 id="Problem-7"><a href="#Problem-7" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>A common design goal is to minimize the communication and dependencies between subsystems.</li>
</ul>
<h2 id="Graph-7"><a href="#Graph-7" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/rzkQza3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-7"><a href="#Steps-7" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Shape.java</div><div class="line">public interface Shape&#123;</div><div class="line">    void draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// Rectangle.java</div><div class="line">pulic class Rectangle implements Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Rectangle::draw()&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// Circle.java</div><div class="line">pulic class Circle implements Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Circle::draw()&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// Square.java</div><div class="line">pulic class Square implements Shape&#123;</div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Square::draw()&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// ShapeMaker.java</div><div class="line">public class ShapeMaker&#123;</div><div class="line">    private Shape circle;</div><div class="line">    private Shape rectangle;</div><div class="line">    private Shape square;</div><div class="line">    </div><div class="line">    public ShapeMaker()&#123;</div><div class="line">        circle = new Circle();</div><div class="line">        rectangle = new Rectangle();</div><div class="line">        square = new Square();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void drawCircle()&#123;</div><div class="line">        circle.draw();</div><div class="line">    &#125;</div><div class="line">    public void drawRectangle()&#123;</div><div class="line">        rectangle.draw();</div><div class="line">    &#125;</div><div class="line">    public void drawSquare()&#123;</div><div class="line">        square.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// FacadePatternDemo.java</div><div class="line">public class FacadePatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        ShapeMaker shapeMaker = new ShapeMaker();</div><div class="line">        shapeMaker.drawCircle();</div><div class="line">        shapeMaker.drawRectangle();</div><div class="line">        shapeMakder.drawSquare();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-7"><a href="#Example-Statement-7" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>A Programming Environment<ul>
<li>A compiler subsystem contains classes such as Scanner, Parser, ProgramNode, and BytecodeStream.</li>
<li>The client classes need to use Scanner, Parser, ProgramNode, and BytecodeStream to compile some code. </li>
</ul>
</li>
<li>Home Sweet Home Theater<ul>
<li>A Home Theater consists of an amplifier, a DVD player, a projector, a screen, a popcorn popper, and theater lights.</li>
<li>A user can watch a movie through the following process:</li>
<li>Turn on the popcorn popper</li>
<li>Start the popper popping</li>
<li>Dim the lights</li>
<li>Put the screen down</li>
<li>Turn the projector on</li>
<li>Turn the sound amplifier on</li>
<li>Turn the DVD player on</li>
<li>Start the DVD player playing</li>
</ul>
</li>
</ul>
<h1 id="Template-Method-Pattern"><a href="#Template-Method-Pattern" class="headerlink" title="Template Method Pattern"></a>Template Method Pattern</h1><h2 id="Design-Aspect-8"><a href="#Design-Aspect-8" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Steps of an algorithm</strong></p>
<ul>
<li>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.</li>
<li>Templete Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.</li>
</ul>
<h2 id="Problem-8"><a href="#Problem-8" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>Two classes with code duplications would be modified at the same time if the duplicate code is being changed.</li>
</ul>
<h2 id="Graph-8"><a href="#Graph-8" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ra4WMe7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-8"><a href="#Steps-8" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// Game.java</div><div class="line">public abstract class Game&#123;</div><div class="line">    abstract void initialize();</div><div class="line">    abstract void statePlay();</div><div class="line">    abstract void endPlay();</div><div class="line">    </div><div class="line">    public final void play()&#123;</div><div class="line">        initialize();</div><div class="line">        startPlay();</div><div class="line">        endPlay();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// Cricket.java</div><div class="line">public class Cricket extends Game&#123;</div><div class="line">    @Override</div><div class="line">    void endPlay()&#123;</div><div class="line">        System.out.println(&quot;Cricket Game Finished!&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    void initialize()&#123;</div><div class="line">        System.out.println(&quot;Cricket Game Inisialized!&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    void startPlay()&#123;</div><div class="line">        System.out.println(&quot;Cricket Game Start!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Football.java</div><div class="line">public class Football extends Game&#123;</div><div class="line">    @Override</div><div class="line">    void endPlay()&#123;</div><div class="line">        System.out.println(&quot;Football Game Finished!&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    void initialize()&#123;</div><div class="line">        System.out.println(&quot;Football Game Inisialized!&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    void startPlay()&#123;</div><div class="line">        System.out.println(&quot;Football Game Start!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// TemplatePatternDemo.java</div><div class="line">public class TemplatePatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Game game = new Cricket();</div><div class="line">        game.play();</div><div class="line">        System.out.println();</div><div class="line">        game = new Football();</div><div class="line">        game.play();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-8"><a href="#Example-Statement-8" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Opening Documents in Applications<ul>
<li>In order to open a text document, a text application</li>
<li>will:</li>
<li>Check if the text document can be opened</li>
<li>Create a text document object and hold a reference of the text document object.</li>
<li>Add the text document object to the Application.</li>
<li>Read text document.</li>
<li>Opening Documents in Applications</li>
<li>There is another new requirement.</li>
<li>Opening a spreadsheet document with a spreadsheet application carries the same steps in the algorithm(process) as the text document.</li>
<li>Check if the spreadsheet document can be opened.</li>
<li>Create a spreadsheet document object and hold a reference of the spreadsheet document object.</li>
<li>Add the spreadsheet document object to the Application.</li>
<li>Read spreadsheet document.</li>
<li>Prepare Caffeine Beverages</li>
<li>Please follow these recipes precisely when preparing Starbuzz beverages</li>
<li>Starbuzz Coffee Recipe</li>
<li>Boil some water </li>
<li>Brew coffee in boiling water</li>
<li>Pour Coffee in cup</li>
<li>Add sugar and milk</li>
<li>Starbuzz Tea Recipe</li>
<li>Boil some water</li>
<li>Steep tea in boiling water</li>
<li>Pour tea in cup</li>
<li>Add lemon</li>
</ul>
</li>
</ul>
<h1 id="Command-Pattern"><a href="#Command-Pattern" class="headerlink" title="Command Pattern"></a>Command Pattern</h1><h2 id="Design-Aspect-9"><a href="#Design-Aspect-9" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>When and how a request is fulfilled</strong></p>
<ul>
<li>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</li>
</ul>
<h2 id="Problem-9"><a href="#Problem-9" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>The invoker object is subject to be modified once the set of the actions on a receiver is changed.</li>
</ul>
<h2 id="Graph-9"><a href="#Graph-9" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/9Vyj5FB.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-9"><a href="#Steps-9" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Order.java</div><div class="line">public interface Order&#123;</div><div class="line">    void execute();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Stock.java</div><div class="line">public class Stock&#123;</div><div class="line">    private String name = &quot;ABC&quot;;</div><div class="line">    private int quantity = 10;</div><div class="line"></div><div class="line">    public void buy()&#123;</div><div class="line">        System.out.println(&quot;Stock [ Name: &quot; + name + &quot;, Quantity: &quot; + quantity + &quot; ] bought&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void sell()&#123;</div><div class="line">        System.out.println(&quot;Stock [ Name: &quot; + name + &quot;Quantity: &quot; + quantity + &quot; ] sold&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// BuyStock.java</div><div class="line">public class BuyStock implements Order&#123;</div><div class="line">    private Stock abcStock;</div><div class="line">    public BuyStock(Stock abcStock)&#123;</div><div class="line">        this.abcStock = abcStock;</div><div class="line">    &#125;</div><div class="line">    public void execute()&#123;</div><div class="line">        abcstock.buy();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// SellStock.java</div><div class="line">public class SellStock implements Order&#123;</div><div class="line">    private Stock abcStock;</div><div class="line">    public SellStock(Stock abcStock)&#123;</div><div class="line">        this.abcStock = abcStock;</div><div class="line">    &#125;</div><div class="line">    public void execute()&#123;</div><div class="line">        abcStock.sell();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// Broker.java</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class Broker&#123;</div><div class="line">    private List&lt;Order&gt; orderList = new ArrayList&lt;Order&gt;();</div><div class="line"></div><div class="line">    public void takeOrder(Order order)&#123;</div><div class="line">        orderList.add(order);</div><div class="line">    &#125;</div><div class="line">    public void placeOrders()&#123;</div><div class="line">        for (Order order : orderList)&#123;</div><div class="line">            order.execute();</div><div class="line">        &#125;</div><div class="line">        orderList.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 5.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// CommandPatternDemo.java</div><div class="line">public class CommandPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Stock abcStock = new Stock();</div><div class="line">    </div><div class="line">        BuyStock buyStockOrder = new BuyStockOrder(abcStock);</div><div class="line">        SellStock sellStockOrder = new SellStockOrder(abcStock);</div><div class="line">    </div><div class="line">        Broker broker = new Broker();</div><div class="line">        broker.takeOrder(buyStockOrder);</div><div class="line">        broker.takeOrder(sellStockOrder);</div><div class="line">    </div><div class="line">        broker.placeOrder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-9"><a href="#Example-Statement-9" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Remote Control,<ul>
<li>The remote control can control a stereo remotely.</li>
<li>While a stereo is switched on by the remote control, the CD and volume will be set at the same time.</li>
</ul>
</li>
<li>Cut, Copy, Paste on a Document,<ul>
<li>An editor application carries a document.</li>
<li>A menu in the editor application contains some menu items which performs three specific operations such as cut, copy, and paste on a document.</li>
</ul>
</li>
</ul>
<h1 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h1><h2 id="Design-Aspect-10"><a href="#Design-Aspect-10" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Interface to an object</strong></p>
<ul>
<li>Convert the interface of a class inter another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</li>
</ul>
<h2 id="Problem-10"><a href="#Problem-10" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>The request method of the requester object should be modified once it changes its receiver class with a new interface.</li>
</ul>
<h2 id="Graph-10"><a href="#Graph-10" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/xfy4ow5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-10"><a href="#Steps-10" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// MediaPlayer.java</div><div class="line">public interface MediaPlayer&#123;</div><div class="line">    public void play(String audioType, String fileName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// AdvancedMediaPlayer.java</div><div class="line">public interface AdvancedMediaPlayer&#123;</div><div class="line">    public void playVlc(String fileName);</div><div class="line">    public void playMp4(String fileName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// VlcPlayer.java</div><div class="line">public class VlcPlayer implements AdvancedMediaPlayer&#123;</div><div class="line">    @Override</div><div class="line">    public void playVlc(String fileName)&#123;</div><div class="line">        System.out.println(&quot;Playing vlc file. Name: &quot; + fileName);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void playMp4(String fileName)&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Mp4Player.java</div><div class="line">public class Mp4Player implements AdvancedMediaPlayer&#123;</div><div class="line">    @Override</div><div class="line">    public void playVlc(String fileName)&#123;&#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void playMp4(String fileName)&#123;</div><div class="line">        System.out.println(&quot;Playing mp4 file. Name: &quot; + fileName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// MediaAdapter.java</div><div class="line">public class MediaAdapter implements MediaPlayer&#123;</div><div class="line">    AdvancedMediaPlayer advancedMusicPlayer;</div><div class="line">    </div><div class="line">    public MediaAdapter(String audioType)&#123;</div><div class="line">        if (audioType.equalsIgnoreCase(&quot;vlc&quot;))&#123;</div><div class="line">            advancedMusicPlayer = new VlcPlayer();</div><div class="line">        &#125;</div><div class="line">        else if (audioType.equalsIgnoreCase(&quot;mp4&quot;))&#123;</div><div class="line">             advancedMusicPlayer = new Mp4Player();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">           </div><div class="line">    @Override</div><div class="line">    public void play(String audioType, String fileName)&#123;</div><div class="line">        if (audioType.equalsIgnoreCase(&quot;vlc&quot;))&#123;</div><div class="line">            advancedMusicPlayer.playVlc(fileName);</div><div class="line">        &#125;</div><div class="line">        else if (audioType.equalsIgnoreCase(&quot;mp4&quot;))&#123;</div><div class="line">             advancedMusicPlayer.playMp4(fileName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// AudioPlayer.java</div><div class="line">public class AudioPlayer implements MediaPlayer&#123;</div><div class="line">    MediaAdapter mediaAdapter;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void play(String audioType, String fileName)&#123;</div><div class="line">        if(audioType.equalsIgnoreCase(&quot;mp3&quot;))&#123;</div><div class="line">            System.out.println(&quot;Playing mp3 file. Name: &quot; + fileName);			</div><div class="line">        &#125;</div><div class="line">        else if(audioType.equalsIgnoreCase(&quot;vlc&quot;) || audioType.equalsIgnoreCase(&quot;mp4&quot;))&#123;</div><div class="line">            mediaAdapter = new MediaAdapter(audioType);</div><div class="line">            mediaAdapter.play(audioType, fileName);</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            System.out.println(&quot;Invalid media. &quot; + audioType + &quot; format not supported&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 5.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// AdapterPatternDemo.java</div><div class="line">public class AdapterPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        AudioPlayer audioPlayer = new AudioPlayer();</div><div class="line">    </div><div class="line">        audioPlayer.play(&quot;mp3&quot;, &quot;beyond the horizon.mp3&quot;);</div><div class="line">        audioPlayer.play(&quot;mp4&quot;, &quot;alone.mp4&quot;);</div><div class="line">        audioPlayer.play(&quot;vlc&quot;, &quot;far far away.vlc&quot;);</div><div class="line">        audioPlayer.play(&quot;avi&quot;, &quot;mind me.avi&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-10"><a href="#Example-Statement-10" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>New Vendor in Existing Software,<ul>
<li>You’ve got an existing client class that use a vendor class library.</li>
<li>After a while you found another vendor class library is better, but the new vendor designed their interfaces differently.</li>
</ul>
</li>
<li>A Text Shape,<ul>
<li>A drawing editor</li>
<li>Want to add a TextShape that using display method to display text and using boundingBox method to get bounding.</li>
<li>A drawing editor</li>
<li>Meanwhile, an external library already provide a TextView class using display method to display text and using getExtent method to get bounding.</li>
<li>We’d like to reuse TextView to display text of shape.</li>
</ul>
</li>
</ul>
<h1 id="Builder-Pattern"><a href="#Builder-Pattern" class="headerlink" title="Builder Pattern"></a>Builder Pattern</h1><h2 id="Design-Aspect-11"><a href="#Design-Aspect-11" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>how a composite object gets created</strong></p>
<ul>
<li>Separate the construction of a complex object from its representation so that the same construction process can create different representations.</li>
</ul>
<h2 id="Problem-11"><a href="#Problem-11" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>Construct complex objects step-by-step, and return the product as a final step.</li>
</ul>
<h2 id="Graph-11"><a href="#Graph-11" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/DIUJJh4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-11"><a href="#Steps-11" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// Item.java</div><div class="line">public interface Item&#123;</div><div class="line">    public String name();</div><div class="line">    public Packing packing();</div><div class="line">    public float price();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Packing.java</div><div class="line">public interface Packing&#123;</div><div class="line">    public String pack();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// Wrapper.java</div><div class="line">public class Wrapper implements Packing&#123;</div><div class="line">    @Override</div><div class="line">    public String pack()&#123;</div><div class="line">        return &quot;Wrapper&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// Bottle.java</div><div class="line">public class Bottle implements Packing&#123;</div><div class="line">    @Override</div><div class="line">    public String pack()&#123;</div><div class="line">        return &quot;Bottle&quot;;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// Burger.java</div><div class="line">public abstract class Burger implements Item&#123;</div><div class="line">    @Override</div><div class="line">    public Packing packing()&#123;</div><div class="line">        return new Wrapper();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public abstract float price();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ColdDrink.java</div><div class="line">public abstract class ColdDrink implements Item&#123;</div><div class="line">    @Override</div><div class="line">    public Packing packing()&#123;</div><div class="line">        return new Bottle();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public abstract float price();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">// VegBurger.java</div><div class="line">public class VegBurger extends Burger&#123;</div><div class="line">    @Override</div><div class="line">    public float price()&#123;</div><div class="line">        return 25.0f;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public String name()&#123;</div><div class="line">        return &quot;Veg Burger&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ChickenBurger.java</div><div class="line">public class ChickenBurger extends Burger&#123;</div><div class="line">    @Override</div><div class="line">    public float price()&#123;</div><div class="line">        return 50.5f;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public String name()&#123;</div><div class="line">        return &quot;Chicken Burger&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Coke.java</div><div class="line">public class Coke extends ColdDrink&#123;</div><div class="line">    @Override</div><div class="line">    public float price()&#123;</div><div class="line">        return 30.0f;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public String name()&#123;</div><div class="line">        return &quot;Coke&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Pepsi.java</div><div class="line">public class Pepsi extends ColdDrink&#123;</div><div class="line">    @Override</div><div class="line">    public float price()&#123;</div><div class="line">        return 35.0f;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public String name()&#123;</div><div class="line">        return &quot;Pepsi&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 5.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// Meal.java</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class Meal&#123;</div><div class="line">    private List&lt;Item&gt; items = new ArrayList&lt;Item&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line">    public void addItem(Item item)&#123;</div><div class="line">        items.add(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getCost()&#123;</div><div class="line">        flaot cost = 0.0f;</div><div class="line">        for (Item item : items)&#123;</div><div class="line">            cost += item.price();</div><div class="line">        &#125;</div><div class="line">        return cost;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void showItems()&#123;</div><div class="line">        for (Item item : items)&#123;</div><div class="line">            System.out.println(&quot;Item : &quot; + item.name());</div><div class="line">            System.out.println(&quot;, Packing : &quot; + item.packing().pack());</div><div class="line">            System.out.println(&quot;, Price : &quot; + item.price());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 6.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// MealBuilder.java</div><div class="line">public class MealBuilder&#123;</div><div class="line">    public Meal prepareVegMeal&#123;</div><div class="line">        Meal meal = new Meal();</div><div class="line">        meal.addItem(new VegBurger());</div><div class="line">        meal.addItem(new Coke());</div><div class="line">        return meal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Meal prepareNonVegMeal()&#123;</div><div class="line">        Meal meal = new Meal();</div><div class="line">        meal.addItem(new ChickenBurger());</div><div class="line">        meal.addItem(new Pepsi());</div><div class="line">        return meal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 7.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// BuilderPatternDemo.java</div><div class="line">public class BuilderPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        MealBuilder mealBuilder = new MealBuilder();</div><div class="line">    </div><div class="line">        Meal vegMeal = mealBuilder.prepareVegMeal();</div><div class="line">        System.out.println(&quot;Veg Meal&quot;);</div><div class="line">        vegMeal.showItems();</div><div class="line">        System.out.println(&quot;Total Cost: &quot; + vegMeal.getCost());</div><div class="line">    </div><div class="line">        Meal nonVegMeal = mealBuilder.prepareNonVegMeal();</div><div class="line">        System.out.println(&quot;\nNon-Veg Meal&quot;);</div><div class="line">        nonVegMeal.showItems();</div><div class="line">        System.out.println(&quot;Total Cost: &quot; + nonVegMeal.getCost());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-11"><a href="#Example-Statement-11" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>A RTF(Rich Text Fromat) Converter,<ul>
<li>A reader for the RTF (Rich Text Format) document exchange format should be able to convert RTF to many text formats.</li>
<li>The reader converts RTF documents into TeX text or into a text widget by recognizing different RTF tokens(Character, Font Change and Paragraph).</li>
</ul>
</li>
<li>A Vacation Planner,<ul>
<li>Patternsland wants to build a vacation planner.</li>
<li>A vacation planner can choose a hotel and various types of admission tickets, make restaurant reservations, even book special events and day. The difference types vacation (normal, backpacking) will have difference options.</li>
</ul>
</li>
</ul>
<h1 id="State-Pattern"><a href="#State-Pattern" class="headerlink" title="State Pattern"></a>State Pattern</h1><h2 id="Design-Aspect-12"><a href="#Design-Aspect-12" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>states of an object</strong></p>
<ul>
<li>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</li>
</ul>
<h2 id="Problem-12"><a href="#Problem-12" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>An object’s behavior depends on its state, and it must change its behavior at run-time depending on that state.</li>
</ul>
<h2 id="Graph-12"><a href="#Graph-12" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/HtFKjRo.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-12"><a href="#Steps-12" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// State.java</div><div class="line">public interface State&#123;</div><div class="line">    public void doAction(Context context);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// StartState.java</div><div class="line">public class StartState implements State&#123;</div><div class="line">    public void doAction(Context context)&#123;</div><div class="line">        System.out.println(&quot;Player is in start state&quot;);</div><div class="line">        context.setState(this);</div><div class="line">    &#125;</div><div class="line">                                         </div><div class="line">    public String toString()&#123;</div><div class="line">        return &quot;Start State&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// StopState.java</div><div class="line">public class StopState implements State&#123;</div><div class="line">    public void doAction(Context context)&#123;</div><div class="line">        System.out.println(&quot;Player is in stop state&quot;);</div><div class="line">        context.setState(this);</div><div class="line">    &#125;</div><div class="line">                                         </div><div class="line">    public String toString()&#123;</div><div class="line">        return &quot;Stop State&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// Context.java</div><div class="line">public class Context&#123;</div><div class="line">    private State state;</div><div class="line">    public Context()&#123;</div><div class="line">        state = null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setState(State state)&#123;</div><div class="line">        this.state = state;    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public State getState()&#123;</div><div class="line">        return state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// StatePatternDemo.java</div><div class="line">public class StatePatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Context context = new Context();</div><div class="line">    </div><div class="line">        StartState startState = new StartState();</div><div class="line">        startState.doAction(context);</div><div class="line">        System.out.println(context.getState().toString());</div><div class="line">        StopState stopState = new StopState();</div><div class="line">        stopState.doAction(context);</div><div class="line">        System.out.println(context.getState().toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-12"><a href="#Example-Statement-12" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>A TCP Connection,<ul>
<li>A class TCPConnection that represents a network connection.</li>
<li>When a TCPConnection object receives an Open request from other objects, it responds differently depending on its current state. A TCPConnection object can be in one of several different states: Established, Listening, and Closed.</li>
</ul>
</li>
<li>A Gumball Machine<ul>
<li>A GumballMachine has four actions: Insert Quarter, Eject Quarter, Turn Crank, and Dispense.</li>
<li>There are four states in the GumballMachine: No Quarter, Has Quarter, Out of Gumballs and Gumball Sold. As the following state diagram. </li>
</ul>
</li>
</ul>
<h1 id="Visitor-Pattern"><a href="#Visitor-Pattern" class="headerlink" title="Visitor Pattern"></a>Visitor Pattern</h1><h2 id="Design-Aspect-13"><a href="#Design-Aspect-13" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Operations that can be applied to objects<br>without changing their classes</strong></p>
<ul>
<li>Represent an operation to be performed on the elements of an object structure.</li>
<li>Visitor lets you define a new operation without changing the classes of the elements on which it operates. </li>
</ul>
<h2 id="Problem-13"><a href="#Problem-13" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>The problem is that distributing all these operations across the various classes in an object structure leads to a system that’s hard to understand, maintain, and change. Moreover, adding a new operation usually requires recompiling all of these classes. </li>
</ul>
<h2 id="Graph-13"><a href="#Graph-13" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/g6FNfJg.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-13"><a href="#Steps-13" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// ComputerPart.java</div><div class="line">public interface ComputerPart&#123;</div><div class="line">    public void accept(ComputerPartVisitor computerPartVisitor);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// Keyboard.java</div><div class="line">public class Keyboard implements ComputerPart&#123;</div><div class="line">    @Override</div><div class="line">    public void accept(ComputerPartVisitor computerPartVisitor)&#123;</div><div class="line">        computerPartVisitor.visit(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Monitor.java</div><div class="line">public class Monitor implements ComputerPart&#123;</div><div class="line">    @Override</div><div class="line">    public void accept(ComputerPartVisitor computerPartVisitor)&#123;</div><div class="line">        computerPartVisitor.visit(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Mouse.java</div><div class="line">public class Mouse implements ComputerPart&#123;</div><div class="line">    @Override</div><div class="line">    public void accept(ComputerPartVisitor computerPartVisitor)&#123;</div><div class="line">        computerPartVisitor.visit(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Computer.java</div><div class="line">public class Computer implements ComputerPart&#123;</div><div class="line">    ComputerPart[] parts;</div><div class="line">                                              </div><div class="line">    public Computer()&#123;</div><div class="line">        parts = new ComputerPart[] &#123;new Mouse(), new Keyboard(), new Monitor()&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void accept(ComputerPartVisitor computerPartVisitor)&#123;</div><div class="line">        for (int i = 0; i &lt; parts.length; i++)&#123;</div><div class="line">            parts[i].accept(computerPartVisitor);</div><div class="line">        &#125;</div><div class="line">        computerPartVisitor.visit(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// ComputerPartVisitor.java</div><div class="line">public interface ComputerPartVisitor&#123;</div><div class="line">    public void visit(Computer computer);</div><div class="line">    public void visit(Mouse mouse);</div><div class="line">    public void visit(Keyboard keyboard);</div><div class="line">    public void visit(Monitor monitor);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// ComputerPartDisplayVisitor.java</div><div class="line">public class ComputerPartDisplayVisitor ComputerPartVisitor&#123;</div><div class="line">    @Override</div><div class="line">   public void visit(Computer computer) &#123;</div><div class="line">      System.out.println(&quot;Displaying Computer.&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void visit(Mouse mouse) &#123;</div><div class="line">      System.out.println(&quot;Displaying Mouse.&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void visit(Keyboard keyboard) &#123;</div><div class="line">      System.out.println(&quot;Displaying Keyboard.&quot;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void visit(Monitor monitor) &#123;</div><div class="line">      System.out.println(&quot;Displaying Monitor.&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 5.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// VisitorPatternDemo.java</div><div class="line">public class VisitorPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        ComputerPart computer = new Computer();</div><div class="line">        computer.accept(new ComputerPartDisplayVisitor());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-13"><a href="#Example-Statement-13" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Compiler and AST,<ul>
<li>There are several nodes in an abstract syntax tree (AST), such as VariableRefNode and AssignmentNode, which represent respective parts in source code and keep the code information.</li>
<li>Each node currently provides three interfaces for the compiler to use in order to check its type, generate code and print out the content.</li>
</ul>
</li>
<li>Nutrition Retrieval from A Restaurant Menu,<ul>
<li>The menu components of the Diner restaurant which comprises menu items and diner menus can be printed by a waitress.</li>
<li>Each diner menu consists of several menu items.</li>
<li>The Diner restaurant would like to provide calories, protein and carbs information for each menu item.</li>
</ul>
</li>
<li>Equipment Power Consumption,<ul>
<li>There are three types of equipment in the inventory, such as chassis, buses, and floppies. Among all the equipment, Chassis is composited of others.</li>
<li>Chassis provides an interface for the creation of an iterator, which iterates all the equipment in one chassis with next and hasNext operations.</li>
<li>Each equipment provides its power consumption and cost in addition.</li>
<li>Chassis provides a sum of power consumption or cost for all its components.</li>
</ul>
</li>
</ul>
<h1 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h1><h2 id="Design-Aspect-14"><a href="#Design-Aspect-14" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>the sole instance of a class</strong></p>
<ul>
<li>Ensure a class only has one instance, and provide a global point of access to it</li>
</ul>
<h2 id="Problem-14"><a href="#Problem-14" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>It’s important for some classes to have exactly one instance and ensure that the instance is easily accessible. </li>
<li>A global variable makes an object accessible, but it doesn’t keep you from instantiating multiple objects.</li>
</ul>
<h2 id="Graph-14"><a href="#Graph-14" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/DE9I4fK.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-14"><a href="#Steps-14" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// SingleObject.java</div><div class="line">public class SingleObject&#123;</div><div class="line">    private static SingleObject instance = new SingleObject();</div><div class="line"></div><div class="line">    private SingleObject()&#123;&#125;</div><div class="line"></div><div class="line">    public static SingleObject getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void showMessage()&#123;</div><div class="line">        System.out.println(&quot;Hello World!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// SingletonPatternDemo.java</div><div class="line">public class SingletonPatternDemo&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        SingleObject object = SingleObject.getInstance();</div><div class="line">        object.showMessage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-14"><a href="#Example-Statement-14" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Chocolate Boiler,<ul>
<li>A chocolate boiler is used to boil chocolate.</li>
<li>Before boiling chocolate with the boiler, you have to make sure that the boiler is now empty and then fill chocolate in. Besides, you can’t boil chocolate again while the chocolate has already been boiled.</li>
<li>After boiling, it is time to drain out the boiled chocolate and make the boiler empty again.</li>
<li>In order to prevent some unexpected situation, it is not allowed to have multiple instances of the chocolate boiler in the system.</li>
</ul>
</li>
</ul>
<h1 id="FlyWeight-Pattern"><a href="#FlyWeight-Pattern" class="headerlink" title="FlyWeight Pattern"></a>FlyWeight Pattern</h1><h2 id="Design-Aspect-15"><a href="#Design-Aspect-15" class="headerlink" title="Design Aspect"></a>Design Aspect</h2><p><strong>Storage costs of objects</strong></p>
<ul>
<li>Use sharing to support large numbers of finegrained objects efficiently.</li>
</ul>
<h2 id="Problem-15"><a href="#Problem-15" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li>Some applications could benefit from using objects throughout their design, but a naive implementation would be prohibitively expensive.</li>
</ul>
<h2 id="Graph-15"><a href="#Graph-15" class="headerlink" title="Graph"></a>Graph</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/NT0Bzcj.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Steps-15"><a href="#Steps-15" class="headerlink" title="Steps"></a>Steps</h2><p><strong>Step 1.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Shape.java</div><div class="line">public interface Shape&#123;</div><div class="line">    void draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 2.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// Circle.java</div><div class="line">public class Circle implements Shape&#123;</div><div class="line">    private String color;</div><div class="line">    private int x;</div><div class="line">    private int y;</div><div class="line">    private int radius;</div><div class="line">    </div><div class="line">    public Circle(String color)&#123;</div><div class="line">        this.color = color;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setX(int x)&#123;</div><div class="line">        this.x = x;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setY(int y)&#123;</div><div class="line">        this.y = y;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setRadius(int radius)&#123;</div><div class="line">        this.radius = radius;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void draw()&#123;</div><div class="line">        System.out.println(&quot;Circle: draw() [ Color: &quot; + color + &quot;, x: &quot; + x + &quot;, y: &quot; + y + &quot;, radius: &quot; + radius + &quot;]&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 3.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// ShapeFactory.java</div><div class="line">import java.util.HashMap;</div><div class="line"></div><div class="line">public class ShapeFactory&#123;</div><div class="line">    private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap();</div><div class="line">    public static Shape getCircle(String color)&#123;</div><div class="line">        Circle circle = (Circle)circle.get(color);</div><div class="line">        if (circle == null)&#123;</div><div class="line">            circle = new Circle(color);</div><div class="line">            circleMap.put(color, circle);</div><div class="line">            System.out.println(&quot;Creating circle of color: &quot; + color);</div><div class="line">        &#125;</div><div class="line">        return circle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Step 4.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// FlyWeightPatternDemo.java</div><div class="line">public class FlyWeightPatternDemo&#123;</div><div class="line">    public static final String colors[] = &#123;&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;White&quot;, &quot;Black&quot;&#125;;</div><div class="line">    public static void main(Sting[] args)&#123;</div><div class="line">        for (int i = 0; i &lt; 20; i++)&#123;</div><div class="line">            Circle circle = (Circle)ShapeFactory.getCircle(getRandomColor());</div><div class="line">            circle.setX(getRandomX());</div><div class="line">            circle.setY(getRandomY());</div><div class="line">            circle.setRadius(100);</div><div class="line">            circle.draw();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String getRandomColor()&#123;</div><div class="line">        return colors[(int)(Math.random()*colors.length)];</div><div class="line">    &#125;</div><div class="line">    private static int getRandomX() &#123;</div><div class="line">        return (int)(Math.random()*100 );</div><div class="line">    &#125;</div><div class="line">    private static int getRandomY() &#123;</div><div class="line">        return (int)(Math.random()*100);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Example-Statement-15"><a href="#Example-Statement-15" class="headerlink" title="Example Statement"></a>Example Statement</h2><ul>
<li>Document Editor,<ul>
<li>A document editor uses objects to represent embedded elements like rows, columns and characters. The characters have X-Y locations, and they can draw themselves dynamically. </li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Strategy-Pattern&quot;&gt;&lt;a href=&quot;#Strategy-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Strategy Pattern&quot;&gt;&lt;/a&gt;Strategy Pattern&lt;/h1&gt;&lt;h2 id=&quot;Design-As
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Sorting Algorithms</title>
    <link href="http://yoursite.com/2017/11/09/sorted/"/>
    <id>http://yoursite.com/2017/11/09/sorted/</id>
    <published>2017-11-09T05:36:07.000Z</published>
    <updated>2017-11-09T05:36:51.672Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法是经典算法的重要一环，不仅需要了解如何实现，更应该注意每一种排序适用的范围以及相应的时间空间复杂度要求。</p>
<h1 id="插入排序（Insertion-sort）"><a href="#插入排序（Insertion-sort）" class="headerlink" title="插入排序（Insertion sort）"></a>插入排序（Insertion sort）</h1><p>时间复杂度：Best = O（n）， Worst = O（n^2^）<br>空间复杂度：O（1）<br>稳定性：稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void insert_sort(vector&lt;int&gt;&amp; data)&#123;</div><div class="line">        int temp, j;</div><div class="line">        for (int i = <span class="number">1</span>; i &lt; data.size(); i++)&#123;</div><div class="line">            temp = data[i];</div><div class="line">            for (j = i; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; data[j - <span class="number">1</span>]; j--)&#123;</div><div class="line">                data[j] = data[j - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            data[j] = temp;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">        int len;</div><div class="line">        int cond;</div><div class="line">        vector&lt;int&gt; data;</div><div class="line">        <span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">        cin &gt;&gt; len;</div><div class="line">        for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">            cin &gt;&gt; cond;</div><div class="line">            data.push_back(cond);</div><div class="line">        &#125;</div><div class="line">        insert_sort(data);</div><div class="line">        for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">            char temp[<span class="number">64</span>];</div><div class="line">            sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">            <span class="keyword">string</span> s(temp);</div><div class="line">            ans += s.c_str();</div><div class="line">            ans += <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="选择排序（Selection-sort）"><a href="#选择排序（Selection-sort）" class="headerlink" title="选择排序（Selection sort）"></a>选择排序（Selection sort）</h1><p>时间复杂度：Best = O（n^2^）， Worst = O（n^2^）<br>空间复杂度：O（1）<br>稳定性：不稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123;</div><div class="line">	int temp = data[i];</div><div class="line">	data[i] = data[j];</div><div class="line">	data[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void selection_sort(vector&lt;int&gt;&amp; data)&#123;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		int min = i;</div><div class="line">		for (int j = i + <span class="number">1</span>; j &lt; data.size(); j++)&#123;</div><div class="line">			<span class="keyword">if</span> (data[j] &lt; data[min])&#123;</div><div class="line">				min = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (i != min)&#123;</div><div class="line">			swap(data, i, min);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len;</div><div class="line">	int cond;</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	vector&lt;int&gt; data;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data.push_back(cond);</div><div class="line">	&#125;</div><div class="line">	selection_sort(data)</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="希尔排序（Shell-sort）"><a href="#希尔排序（Shell-sort）" class="headerlink" title="希尔排序（Shell sort）"></a>希尔排序（Shell sort）</h1><p>时间复杂度：Best = O（n）， Worst = O（n^2^）<br>空间复杂度：O（1）<br>稳定性：不稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void Shell_sort(vector&lt;int&gt;&amp; data, int gap)&#123;</div><div class="line">	for (; gap &gt; <span class="number">0</span>; gap = gap / <span class="number">2</span>)&#123;</div><div class="line">		for (int i = gap; i &lt; data.size(); i++)&#123;</div><div class="line">			int candidate = data[i];</div><div class="line">			int j = i - gap;</div><div class="line">			for (; j &gt;= <span class="number">0</span> &amp;&amp; data[j] &gt; candidate; j -= gap)&#123;</div><div class="line">				data[j + gap] = data[j];</div><div class="line">			&#125;</div><div class="line">			data[j + gap] = candidate;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond, gap;</div><div class="line">	vector&lt;int&gt; data;</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">1</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data.push_back(cond);</div><div class="line">	&#125;</div><div class="line">	gap = data.size() / <span class="number">2</span>;</div><div class="line">	Shell_sort(data, gap);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="堆排序（Heap-sort）"><a href="#堆排序（Heap-sort）" class="headerlink" title="堆排序（Heap sort）"></a>堆排序（Heap sort）</h1><p>时间复杂度：Best = O（nlogn）， Worst = O（nlogn）<br>空间复杂度：O（1）<br>稳定性：不稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cmath&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123;</div><div class="line">	int candidate = data[i];</div><div class="line">	data[i] = data[j];</div><div class="line">	data[j] = candidate;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void heapify(vector&lt;int&gt;&amp; data, int root, int length)&#123;</div><div class="line">	int leftChild = root * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">	int rightChild = root * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line">	int max = -<span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (leftChild &lt; length &amp;&amp; (data[leftChild] &gt; data[root]))</div><div class="line">		max = leftChild;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		max = root;</div><div class="line">	<span class="keyword">if</span> (rightChild &lt; length &amp;&amp; (data[rightChild] &gt; data[max]))</div><div class="line">		max = rightChild;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (max != root)&#123;</div><div class="line">		swap(data, root, max);</div><div class="line">		heapify(data, max, length);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void heap_sort(vector&lt;int&gt;&amp; data)&#123;</div><div class="line">	for (int i = floor(data.size() / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">		heapify(data, i, data.size());</div><div class="line">	&#125;</div><div class="line">	for (int i = data.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</div><div class="line">		swap(data, i, <span class="number">0</span>);</div><div class="line">		heapify(data, <span class="number">0</span>, i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond;</div><div class="line">	vector&lt;int&gt; data;</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data.push_back(cond);</div><div class="line">	&#125;</div><div class="line">	heap_sort(data);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="冒泡排序（Bubble-sort）"><a href="#冒泡排序（Bubble-sort）" class="headerlink" title="冒泡排序（Bubble sort）"></a>冒泡排序（Bubble sort）</h1><p>时间复杂度：Best = O（n）， Worst = O（n^2^）<br>空间复杂度：O（1）<br>稳定性：稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123;</div><div class="line">	int temp = data[i];</div><div class="line">	data[i] = data[j];</div><div class="line">	data[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void bubble_sort(vector&lt;int&gt;&amp; data)&#123;</div><div class="line">	bool flag = <span class="keyword">true</span>;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size() - <span class="number">1</span> &amp;&amp; flag; i++)&#123;</div><div class="line">		flag = <span class="keyword">false</span>;</div><div class="line">		for (int j = <span class="number">0</span>; j &lt; data.size() - i - <span class="number">1</span>; j++)&#123;</div><div class="line">			<span class="keyword">if</span> (data[j + <span class="number">1</span>] &lt; data[j])&#123;</div><div class="line">				swap(data, j + <span class="number">1</span>, j);</div><div class="line">				flag = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond;</div><div class="line">	vector&lt;int&gt; data;</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data.push_back(cond);</div><div class="line">	&#125;</div><div class="line">	bubble_sort(data);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="摇晃-鸡尾酒排序（Shaker-sort）"><a href="#摇晃-鸡尾酒排序（Shaker-sort）" class="headerlink" title="摇晃/鸡尾酒排序（Shaker sort）"></a>摇晃/鸡尾酒排序（Shaker sort）</h1><p>时间复杂度：Best = O（n）， Worst = O（n^2^）<br>空间复杂度：O（1）<br>稳定性：稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123;</div><div class="line">	int temp = data[i];</div><div class="line">	data[i] = data[j];</div><div class="line">	data[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void shaker_sort(vector&lt;int&gt;&amp; data)&#123;</div><div class="line">	int left = <span class="number">0</span>;</div><div class="line">	int right = data.size() - <span class="number">1</span>;</div><div class="line">	int shift = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (left &lt; right)&#123;</div><div class="line">		for (int i = left; i &lt; right; i++)&#123;</div><div class="line">			<span class="keyword">if</span> (data[i] &gt; data[i + <span class="number">1</span>])&#123;</div><div class="line">				swap(data, i, i + <span class="number">1</span>);</div><div class="line">				shift = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		right = shift;</div><div class="line">		for (int i = right; i &gt; left; i--)&#123;</div><div class="line">			<span class="keyword">if</span> (data[i] &lt; data[i - <span class="number">1</span>])&#123;</div><div class="line">				swap(data, i, i - <span class="number">1</span>);</div><div class="line">				shift = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		left = shift;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond;</div><div class="line">	vector&lt;int&gt; data;</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data.push_back(cond);</div><div class="line">	&#125;</div><div class="line">	shaker_sort(data);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick sort）"></a>快速排序（Quick sort）</h1><p>时间复杂度：Best = O（nlogn）， Worst = O（n^2^）<br>空间复杂度：O（nlogn）<br>稳定性：不稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void swap(vector&lt;int&gt;&amp; data, int i, int j)&#123;</div><div class="line">	int temp = data[i];</div><div class="line">	data[i] = data[j];</div><div class="line">	data[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Quick_sort(vector&lt;int&gt;&amp; data, int first, int last)&#123;</div><div class="line">	<span class="keyword">if</span> (first &lt; last)&#123;</div><div class="line">		int pivot = data[first];</div><div class="line">		int left = first + <span class="number">1</span>;</div><div class="line">		int right = last;</div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">while</span> (data[left] &lt;= pivot)&#123;</div><div class="line">				<span class="keyword">if</span> (left != right)</div><div class="line">					left++;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">while</span> (data[right] &gt; pivot)</div><div class="line">				right--;</div><div class="line">			<span class="keyword">if</span> (left &lt; right)</div><div class="line">				swap(data, left, right);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		swap(data, right, first);</div><div class="line">		Quick_sort(data, first, right - <span class="number">1</span>);</div><div class="line">		Quick_sort(data, right + <span class="number">1</span>, last);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond;</div><div class="line">	vector&lt;int&gt; data;</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data.push_back(cond);</div><div class="line">	&#125;</div><div class="line">	Quick_sort(data, <span class="number">0</span>, data.size() - <span class="number">1</span>);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; data.size(); i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="归并排序（Merge-sort）"><a href="#归并排序（Merge-sort）" class="headerlink" title="归并排序（Merge sort）"></a>归并排序（Merge sort）</h1><p>时间复杂度：Best = O（nlogn）， Worst = O（nlogn）<br>空间复杂度：O（n）<br>稳定性：稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cmath&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int* merge(int* left, int* right, int len, int l, int r)&#123;</div><div class="line">	int* sorted = new int[len];</div><div class="line">	int leftsize = <span class="number">0</span>, rightsize = <span class="number">0</span>;</div><div class="line"></div><div class="line">	for (int i = <span class="number">0</span>; i &lt; l + r; i++)&#123;</div><div class="line">		<span class="keyword">if</span> (leftsize == l)</div><div class="line">			sorted[i] = right[rightsize++];</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (rightsize == r)</div><div class="line">			sorted[i] = left[leftsize++];</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (left[leftsize] &lt; right[rightsize])</div><div class="line">			sorted[i] = left[leftsize++];</div><div class="line">		<span class="keyword">else</span></div><div class="line">			sorted[i] = right[rightsize++];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sorted;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int* merge_sort(int* data, int len)&#123;</div><div class="line">	<span class="keyword">if</span> (len &gt; <span class="number">1</span>)&#123;</div><div class="line">		int* left = new int[len];</div><div class="line">		int* right = new int[len];</div><div class="line">		int middle = ceil(len / <span class="number">2</span>);</div><div class="line">		int cout_l = <span class="number">0</span>, cout_r = <span class="number">0</span>;</div><div class="line"></div><div class="line">		for (int i = <span class="number">0</span>; i &lt; middle; i++)&#123;</div><div class="line">			left[i] = data[i];</div><div class="line">			cout_l++;</div><div class="line">		&#125;</div><div class="line">		for (int j = middle; j &lt; len; j++)&#123;</div><div class="line">			right[j - middle] = data[j];</div><div class="line">			cout_r++;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		left = merge_sort(left, cout_l);</div><div class="line">		right = merge_sort(right, cout_r);</div><div class="line">		<span class="keyword">return</span> merge(left, right, len, cout_l, cout_r);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond;</div><div class="line">	int* data = new int[len];</div><div class="line">	int* result = new int[len];</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data[i] = cond;</div><div class="line">	&#125;</div><div class="line">	result = merge_sort(data, len);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, result[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="基数-桶排序（Radix-sort）"><a href="#基数-桶排序（Radix-sort）" class="headerlink" title="基数/桶排序（Radix sort）"></a>基数/桶排序（Radix sort）</h1><p>时间复杂度：Best = O（d<em>(n+r)）， Worst = O（d</em>(n+r)），其中d代表回合数，n代表数组长度，r代表基数（桶）大小<br>空间复杂度：O（nr）<br>稳定性：稳定</p>
<p>Code（C++）：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;string&gt;</span></div><div class="line"><span class="comment">#include &lt;vector&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;cmath&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void init_bucket(int** buckets, int count[], int len)&#123;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">		buckets[i] = new int[len];</div><div class="line">		count[i] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int* radix_sort(int* data, int len)&#123;</div><div class="line">	int max = <span class="number">100</span>;</div><div class="line">	int dataindex = <span class="number">0</span>, radix = <span class="number">1</span>;</div><div class="line">	int** buckets = new int*[<span class="number">10</span>];</div><div class="line">	int count[len];</div><div class="line"></div><div class="line">	init_bucket(buckets, count, len);</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(radix &lt;= max)&#123;</div><div class="line">		for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">			int LSD = (int)ceil(data[i] / radix) % <span class="number">10</span>;</div><div class="line">			buckets[LSD][count[LSD]] = data[i];</div><div class="line">			count[LSD]++;</div><div class="line">		&#125;</div><div class="line">		radix *= <span class="number">10</span>;</div><div class="line"></div><div class="line">		dataindex = <span class="number">0</span>;</div><div class="line">		for (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">			<span class="keyword">if</span> (count[i] != <span class="number">0</span>)&#123;</div><div class="line">				for (int j = <span class="number">0</span>; j &lt; count[i]; j++)&#123;</div><div class="line">					data[dataindex++] = buckets[i][j];</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			count[i] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	int len, cond;</div><div class="line">	int* data = new int[len];</div><div class="line">	<span class="keyword">string</span> ans = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; len;</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		cin &gt;&gt; cond;</div><div class="line">		data[i] = cond;</div><div class="line">	&#125;</div><div class="line">	int* result = radix_sort(data, len);</div><div class="line">	for (int i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">		char temp[<span class="number">64</span>];</div><div class="line">		sprintf(temp, <span class="string">"%d"</span>, data[i]);</div><div class="line">		<span class="keyword">string</span> s(temp);</div><div class="line">		ans += s.c_str();</div><div class="line">		ans += <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line">	cout &lt;&lt; ans &lt;&lt; endl;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序算法是经典算法的重要一环，不仅需要了解如何实现，更应该注意每一种排序适用的范围以及相应的时间空间复杂度要求。&lt;/p&gt;
&lt;h1 id=&quot;插入排序（Insertion-sort）&quot;&gt;&lt;a href=&quot;#插入排序（Insertion-sort）&quot; class=&quot;headerl
    
    </summary>
    
    
      <category term="Sorted Algorithm" scheme="http://yoursite.com/tags/Sorted-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法工程师笔面试汇总</title>
    <link href="http://yoursite.com/2017/11/09/exam/"/>
    <id>http://yoursite.com/2017/11/09/exam/</id>
    <published>2017-11-09T05:31:15.000Z</published>
    <updated>2017-11-09T05:39:56.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系統与计算机结构"><a href="#操作系統与计算机结构" class="headerlink" title="操作系統与计算机结构"></a>操作系統与计算机结构</h1><ul>
<li><p>ThreadPool，Jdk原生线程池，四个参数详细解释原理，当线程池中poolSize达到corePoolSize且阻塞队列已满，再来一个任务，如何处理。</p>
</li>
<li><p>多线程实现同步的方式，互斥同步，非阻塞同步。</p>
</li>
<li><p>程序的编译、链接过程。</p>
</li>
<li><p>死锁的条件是什么？以及如何处理死锁问题？<br>条件：互斥条件（Mutual exclusion）：<br>1、资源不能被共享，只能由一个进程使用。<br>2、请求与保持条件（Hold and wait）：已经得到资源的进程可以再次申请新的资源。<br>3、非剥夺条件（No pre-emption）：已经分配的资源不能从相应的进程中被强制地剥夺。<br>4、循环等待条件（Circular wait）：系统中若干进程组成环路，该环路中每个进程都在等待相邻进程正占用的资源。<br>解决方法：<br>1、忽略该问题。例如鸵鸟算法，该算法可以应用在极少发生死锁的的情况下。为什么叫鸵鸟算法呢，因为传说中鸵鸟看到危险就把头埋在地底下，可能鸵鸟觉得看不到危险也就没危险了吧。跟掩耳盗铃有点像。<br>2、检测死锁并且恢复。<br>3、仔细地对资源进行动态分配，以避免死锁。<br>4、通过破除死锁四个必要条件之一，来防止死锁产生。（Synchronize）</p>
</li>
<li><p>请阐述动态链接库与静态链接库的区别。<br><strong>静态链接库</strong>是 <strong>.lib</strong> 格式的文件，一般在工程的设置界面加入工程中，程序编译时会把lib文件的代码加入你的程序中因此<strong>会增加代码大小</strong>，你的程序一运行lib代码强制被<strong>装入你程序的运行空间</strong>，<strong>不能手动移除</strong>lib代码。<br><strong>动态链接库</strong>是程序运行时动态装入内存的模块，格式 <strong>.dll</strong> ，在程序运行时可以随意加载和移除，节省内存空间。<br>在大型的软件项目中一般要实现很多功能，如果把所有单独的功能写成一个个lib文件的话，程序运行的时候要占用很大的内存空间，导致运行缓慢；但是如果将功能写成dll文件，就可以在用到该功能的时候调用功能对应的dll文件，不用这个功能时将dll文件移除内存，这样可以节省内存空间。</p>
</li>
<li><p>请阐述进程与线程的区别。<br><strong>从概念上</strong>：<br>进程：一个程序对一个数据集的动态执行过程，是分配资源的基本单位。<br>线程：一个进程内的基本调度单位。线程的划分尺度小于进程，一个进程包含一个或者更多的线程。<br><strong>从执行过程中来看</strong>：<br>进程：拥有独立的内存单元，而多个线程共享内存，从而提高了应用程序的运行效率。<br>线程：每一个独立的线程，都有一个程序运行的入口、顺序执行序列、和程序的出口。但是线程不能够独立的执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br><strong>从逻辑角度来看（重要区别）</strong>：<br>多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但是，操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理及资源分配。</p>
</li>
<li><p>用户进程间通信主要哪几种方式？<br>主要有以下6种：<br>1、管道：管道是单向的、先进先出的、无结构的、固定大小的字节流，它把一个进程的标准输出和另一个进程的标准输入连接在一起。写进程在管道的尾端写入数据，读进程在管道的道端读出数据。数据读出后将从管道中移走，其它读进程都不能再读到这些数据。管道提供了简单的流控制机制。进程试图读空管道时，在有数据写入管道前，进程将一直阻塞。同样地，管道已经满时，进程再试图写管道，在其它进程从管道中移走数据之前，写进程将一直阻塞。<br>无名管道：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系（通常是指父子进程关系）的进程间使用。<br>命名管道：命名管道也是半双工的通信方式，在文件系统中作为一个特殊的设备文件而存在，但是它允许无亲缘关系进程间的通信。当共享管道的进程执行完所有的I/O操作以后，命名管道将继续保存在文件系统中以便以后使用。<br>2、信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其它进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。<br>3、消息队列：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。<br>4、信号：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。<br>5、共享内存：共享内存就是映射一段能被其它进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其它进程间通信方式运行效率低而专门设计的。它往往与其它通信机制（如信号量）配合使用，来实现进程间的同步和通信。<br>6、套接字：套接字也是一种进程间通信机制，与其它通信机制不同的是，它可用于不同机器间的进程通信。</p>
</li>
<li><p>巨量化数据处理模型Hadoop和Spark的基本原理和区别。</p>
</li>
<li><p>Python垃圾回收机制（gc）：引用计数、标记回收、分代回收。</p>
</li>
<li><p>MySQL第一、二、三范式要求。（属性原子性；不存在函数依赖；不存在传递依赖）</p>
</li>
<li><p>CDN(Content Delivery Network)工作机制。（能够根据实时网络流量和各节点的链接、负载状况以及到用户的距离和响应时间等综合信息，将用户请求重新定向至离用户最近的服务节点上，解决网络拥挤和提高访问响应速度）</p>
</li>
</ul>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><a href="https://www.nowcoder.com/discuss/1937" target="_blank" rel="external">Link</a></p>
<ul>
<li><p>OSI七层结构和功能。</p>
</li>
<li><p>TCP四层结构和功能。</p>
</li>
<li><p>五层协议的基本机构。</p>
</li>
<li><p>IP地址的分类，ABC三类以及Internet上保留地址用于内部。</p>
</li>
<li><p>IP地址和子网掩码相与得到主机号。</p>
</li>
<li><p>ARP地址解析协议工作流程。</p>
</li>
<li><p>基本网络协议。（ICMP、TFTP、HTTP、DHCP、NAT、DHCP）</p>
</li>
<li><p>三次握手和四次挥手。</p>
</li>
<li><p>在浏览器中输入网址后执行的全部过程。（DNS -&gt; IP找server -&gt; 打包报文段 -&gt; 选择和传输路由（ARP） -&gt; 通过协议进行端对端传输）</p>
</li>
<li><p>TCP和UDP的区别（传输可靠性和面向连接，传输单位，数据安全性）。</p>
</li>
<li><p>报文段和用户数据报结构。(TCP -&gt; 首 + 数据，固定部分20字节，UDP -&gt; 首 + 数据，固定部分20字节)</p>
</li>
<li><p>TCP协议端口。（FTP、Telnet、SMTP、POP3、HTTP）</p>
</li>
<li><p>UDP协议端口。（DNS、SNMP、TFTP）</p>
</li>
<li><p>DNS域名系统的工作原理。</p>
</li>
<li><p>面向连接和非面向连接服务的特点是什么？</p>
</li>
<li><p>TCP三次握手可以改成两次吗？为什么？</p>
</li>
<li><p>TCP和UDP的12字节伪首部。<br>TCP：源IP地址（4）+目的IP地址（4）+0（1）+6(TCP标识符)(1)+TCP长度(2)<br>UDP：源IP地址（4）+目的IP地址（4）+0（1）+17(UDP标识符)(1)+UDP长度（2）</p>
</li>
<li><p>什么是交换器、路由器、网关和主机。</p>
</li>
</ul>
<h1 id="程式语言"><a href="#程式语言" class="headerlink" title="程式语言"></a>程式语言</h1><ul>
<li><p>解释Synchronize关键字的锁优化技术，偏向锁，轻量级锁，重量级锁，这些锁是如何存储的，偏向锁撤销升级为轻量级锁的过程</p>
</li>
<li><p>volatile关键字语义，内存屏障如何实现，JMM对内存屏障做了哪些优化，volatile的语义增强。</p>
</li>
<li><p>Integer与int的区别。</p>
</li>
<li><p>hashMap为什么会造成死循环。<a href="http://blog.csdn.net/zhuqiuhui/article/details/51849692" target="_blank" rel="external">Link</a></p>
</li>
<li><p>C++如何实现动态绑定（Virtual动态绑定，利用基类动态指针和当前静态类型指针指向同一个对象的Virtual函数）。<a href="http://blog.csdn.net/chgaowei/article/details/6427731" target="_blank" rel="external">Link</a></p>
</li>
<li><p>C++虚函数，虚函数表，虚指针，内存模型。</p>
</li>
<li><p>指针数组和数组指针的区别。</p>
</li>
<li><p>malloc-free和new-delete的区别。<a href="http://www.jianshu.com/p/bda7e83591ff" target="_blank" rel="external">Link</a></p>
</li>
<li><p>sizeof和strlen的区别。<a href="http://www.cnblogs.com/carekee/articles/1630789.html" target="_blank" rel="external">Link</a></p>
</li>
<li><p>C++中父类构造函数，子类构造函数，父类派生函数，子类派生函数训醒顺序。<a href="http://blog.csdn.net/u013467442/article/details/48682663" target="_blank" rel="external">Link</a></p>
</li>
<li><p>C++ STL里面的vector的实现机制。(Vector的底层实现一般是连续的内存(数组)。deque的实现是连续的内存块，list的是双链表，set和map是红黑树)<a href="http://blog.csdn.net/linux_ever/article/details/50974924" target="_blank" rel="external">Link</a></p>
</li>
<li><p><strong>(STL)</strong> STL的容器可以分为以下几个大类:<br>1、 顺序（序列）容器:有 vector,list,deque , string,stack(适配器类), queue(适配器类), priority queues(适配器类)。<br>2、关联容器:有set, multiset,map,multimap, bitset,hash_set, hash_map, hash_multiset, hash_multimap。</p>
</li>
<li><p>怎么防止单例模式被破坏。<a href="https://sing1.github.io/2017/08/15/%E9%98%B2%E6%AD%A2%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%A2%AB%E5%8F%8D%E5%B0%84%E6%94%BB%E5%87%BB/" target="_blank" rel="external">Link</a></p>
</li>
<li><p>LRU（Least Recently Used）cache 设计数据结构，怎么实现。<a href="https://yikun.github.io/2015/04/03/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AALRU-Cache%EF%BC%9F/" target="_blank" rel="external">Link</a></p>
</li>
<li><p>熟悉基本的设计模式：单例、工厂、观察者、装饰者以及MVC等模式。</p>
</li>
<li><p>Java中HashMap和HashTable的不同之处。（包括线程安全性，可否为null以及遍历方式，初始值与扩容方式，hash算法实现等等）</p>
</li>
</ul>
<h1 id="机器学习、算法和自然语言处理"><a href="#机器学习、算法和自然语言处理" class="headerlink" title="机器学习、算法和自然语言处理"></a>机器学习、算法和自然语言处理</h1><ul>
<li><p>SSD（Single Shot MultiBox Detector）的思路和里面的网络结构</p>
</li>
<li><p>讲下LR模型，LR模型为什么采用似然估计损失函数。</p>
</li>
<li><p>说下基本主题的LDA模型。</p>
</li>
<li><p>doc2vec中向量怎么产生的。（word2vec + TokenID）</p>
</li>
<li><p>说下频繁序列挖掘prefixspan 算法。（对比Apriori算法的过程和缺点，讲解该算法的优势，只需要扫描一次序列数据集，目标是挖掘出满足最小支持度的频繁序列，长度为1的前缀开始挖掘序列模式，搜索对应的投影数据库的频繁序列，然后递归的挖掘长度为2的前缀所对应的频繁序列。以此类推，一直递归到对应的投影数据库为空或者对应投影数据库中各项的支持度计数小于阈值为止。整个过程就是前缀不断的增长，产生1，2…N 频繁序列，对应的投影数据库不断缩小直至为空。<strong>优点</strong>：PrefixSpan算法由于不用产生候选序列，且投影数据库缩小的很快，内存消耗比较稳定，作频繁序列模式挖掘的时候效果很高。）</p>
</li>
<li><p>说说RBM编码器，Restricted Boltzmann Machine (RBM)限制波尔兹曼机。<a href="http://blog.csdn.net/zouxy09/article/details/8781396" target="_blank" rel="external">Link</a><br>作用：<br>1.降维，类似稀疏自动编码器<br>2.用RBM训练得到的权重举证和偏移量作为BP神经网路的初始值，避免陷入局部极小值<br>3.可以估计联合分布P(v,h)，进而求出P(h|v)。生成式模型<br>4.直接计算P(h|v)进行分类。判别式模型</p>
</li>
<li><p><strong>(序列标注)</strong> 适合序列标注问题的模型：<br>1、HMM<br>2、CRF<br>3、RNN</p>
</li>
<li><p><strong>(反向传递)</strong> 在电影票房预测工作中，假如使用梯度下降优化均方差损失函数，并且希望模型训练效更偏重于票房较大的电影样本。<br><strong>能：</strong> 1、在训练数据中直接复制大票房电影的数据。2、修改损失函数，使其偏重大票房电影的误差。3、针对大票房数据，在训练时增加学习步长。(增大Learning rate相当于增大了权重值)<br><strong>不能：</strong> 增加大票房电影独有的特征，例如访问流量是否大于一定阈值。（不一定对训练有帮助，反而容易干扰学习方向）</p>
</li>
<li><p><strong>(降维)</strong> 降维算法的实现有：<br>1、Latent Dirichlet Allocation(LDA)把文件投影到topic空间，降低了文件有效特征数。<br>2、Word2Vec利用word embedding表示词的向量，将传统的dim维度稀疏的向量one-hot vector压缩到n维的向量，n&lt;&lt;dim。<br>3、Principal component analysis(PCA)主成分分析，将特征通过在某个维度上的映射来降维。<br>4、AutoEncoder神经网络压缩特征向量常用的方法。</p>
</li>
<li><p><strong>(过拟合)</strong> 防止过拟合的方法：<br>1、使用正则化项<br>2、扩增训练数据集<br>3、决策树模型剪枝<br>4、early stop</p>
</li>
<li><p><strong>(生成、判别式模型)</strong> 判别式(Discriminative model)和生成式(Generative model)模型分类：<br>判别式 ： 线性回归、逻辑回归、神经网络、SVM、高斯处理(Gaussian Process)、条件随机场(CRF)、CART<br>生成式 ： 朴素贝叶斯、KNN、混合高斯模型、HMM、Sigmoid Belief Networks、马尔科夫随机场、深度信念网络(DBN)</p>
</li>
</ul>
<ul>
<li><strong>(无约束优化)</strong> 用来解决无约束优化的算法：（SMO用来解约束优化算法）<br>1、随机梯度下降<br>2、LBFGS<br>3、共轭梯度法<br>4、拟牛顿法</li>
</ul>
<ul>
<li><p><strong>(二叉树)</strong> 一颗高度为4的平衡二叉树，其最少节点数为 : 7<br>深度为n的平衡二叉树（Balance binary tree）至少有F（n）个节点，那么F（n）满足：F(n) = F(n-1)+F(n-2)+1</p>
</li>
<li><p><strong>(二叉树)</strong> 一共三个结点的二叉树可能出现多少种结构 : 5<br>节点形态数 = 卡特兰数 = C(2n, n) / (n+1)</p>
</li>
<li><p><strong>(哈弗曼编码)</strong> 现有一段文本，其中只有A，B，C，D，E包含五个字母，它们出现的次数分别是A出现1次，B出现2次，C出现10次，D出现6次，E出现4次，那么经过哈弗曼编码后，各个字母对应的编码可能是下面哪一组？</p>
</li>
<li><p>word2vec、sent2vec（doc2vec）如何得到向量？</p>
</li>
<li><p>词嵌入（Word Embedding）过程中，如何找到相似的字符。</p>
</li>
<li><p>传统机器学习、深度学习考点：<a href="https://eternalfeather.github.io/2017/07/24/Machine-Learning-Tutorial/" target="_blank" rel="external">Link</a></p>
</li>
<li><p>常见数据挖掘算法：<a href="https://eternalfeather.github.io/2017/08/16/data/" target="_blank" rel="external">Link</a></p>
</li>
<li><p>卡方检定基本功能。（同质性、适合度、独立性分析）</p>
</li>
<li><p>基础算法编程: <a href="https://eternalfeather.github.io/2017/11/02/Algorithm/" target="_blank" rel="external">Link</a></p>
</li>
<li><p>经典演算法实例：<a href="https://github.com/EternalFeather/Standard-Algorithms" target="_blank" rel="external">Link</a></p>
</li>
<li><p>排序算法和比较：<a href="https://eternalfeather.github.io/2017/11/09/sorted/" target="_blank" rel="external">Link</a></p>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>其他的问题可以参考<a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网</a>专项练习和公司专题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作系統与计算机结构&quot;&gt;&lt;a href=&quot;#操作系統与计算机结构&quot; class=&quot;headerlink&quot; title=&quot;操作系統与计算机结构&quot;&gt;&lt;/a&gt;操作系統与计算机结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ThreadPool，Jdk原生线程池，四个参数详细解释原
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer算法编程题（Python、C++、Java）</title>
    <link href="http://yoursite.com/2017/11/02/Algorithm/"/>
    <id>http://yoursite.com/2017/11/02/Algorithm/</id>
    <published>2017-11-02T05:44:14.000Z</published>
    <updated>2017-11-02T05:58:59.042Z</updated>
    
    <content type="html"><![CDATA[<p>主要考点涵盖了基本数据结构，基础逻辑和算法应用以及智力题。</p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>主要考察数据结构在现实算法中的实际应用和变形转换。</p>
<h2 id="链表（linked-list）"><a href="#链表（linked-list）" class="headerlink" title="链表（linked list）"></a>链表（linked list）</h2><h3 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h3><p>题目：输入一个链表，从尾到头打印链表每个节点的值。<br><strong>Input：</strong></p>
<p>{67,0,24,58}</p>
<p><strong>Output：</strong></p>
<p>[58,24,0,67]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题属于基本题，最直接的思路就是使用一个栈（stack）结构来依次存取数组中所有的元素，然后将stack的值按顺序pop即为答案。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class ListNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line"></div><div class="line">class Solution:</div><div class="line">    # 返回从尾部到头部的列表值序列，例如[1,2,3]</div><div class="line">    def printListFromTailToHead(self, listNode):</div><div class="line">        # write code here</div><div class="line">        if listNode is None:</div><div class="line">            return []</div><div class="line">        stack = []</div><div class="line">        while listNode is not None:</div><div class="line">            stack.append(listNode.val)</div><div class="line">            listNode = listNode.next</div><div class="line">        return stack[::-1]</div></pre></td></tr></table></figure>
<h3 id="链表中倒数第k个结点"><a href="#链表中倒数第k个结点" class="headerlink" title="链表中倒数第k个结点"></a>链表中倒数第k个结点</h3><p>题目：输入一个链表，输出该链表中倒数第k个结点。<br><strong>Input：</strong></p>
<p>1, {1,2,3,4,5}</p>
<p><strong>Output：</strong></p>
<p>{5}</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题可以使用双指针解决，定义一前一后两个指针。让前指针先走k次，然后指针同时前进，当前指针到达链表尾部时，后指针所指的就是所要求的倒数第k个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution:</div><div class="line">    def FindKthToTail(self, head, k):</div><div class="line">        # write code here</div><div class="line">        if head is None:</div><div class="line">            return None</div><div class="line">        count = k</div><div class="line">        first = head</div><div class="line">        second = None</div><div class="line">        while count:</div><div class="line">            if first is not None:</div><div class="line">            	first = first.next</div><div class="line">            	count -= 1</div><div class="line">            else:</div><div class="line">                return None</div><div class="line">        second = head</div><div class="line">        while first is not None:</div><div class="line">            first = first.next</div><div class="line">            second = second.next</div><div class="line">        return second</div></pre></td></tr></table></figure>
<h3 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h3><p>题目：输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。<br><strong>Input：</strong></p>
<p>{1,3,5}, {2,4,6}</p>
<p><strong>Output：</strong></p>
<p>{1,2,3,4,5,6}</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本体主要的条件是已排序，所以我们只要依次比较两个链表的最左端元素大小，依次插入新的链表即可。具体流程可使用递归的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class ListNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">class Solution:</div><div class="line">    # 返回合并后列表</div><div class="line">    def Merge(self, pHead1, pHead2):</div><div class="line">        # write code here</div><div class="line">        if pHead1 == None:</div><div class="line">            return pHead2</div><div class="line">        elif pHead2 == None:</div><div class="line">            return pHead1</div><div class="line">        newHead = ListNode(0)</div><div class="line">        if pHead1.val &lt; pHead2.val:</div><div class="line">            newHead.val = pHead1.val</div><div class="line">            newHead.next = self.Merge(pHead1.next, pHead2)</div><div class="line">        else:</div><div class="line">            newHead.val = pHead2.val</div><div class="line">            newHead.next = self.Merge(pHead1, pHead2.next)</div><div class="line">        return newHead</div></pre></td></tr></table></figure>
<h3 id="两个链表的第一个交点"><a href="#两个链表的第一个交点" class="headerlink" title="两个链表的第一个交点"></a>两个链表的第一个交点</h3><p>题目：输入两个链表，找出它们的第一个公共结点。<br><strong>Input：</strong></p>
<p>{1,2,3,6,7}, {4,5,6,7}</p>
<p><strong>Output：</strong></p>
<p>6</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 两个链表有公共节点，其必定共用结尾，因此可以计算两个链表的长度差，然后让长的先走相差的步数。最后两个链表同时移动，判断相同的点为公共点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class ListNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">class Solution:</div><div class="line">    def findlength(self, pHead):</div><div class="line">        count = 0</div><div class="line">        while pHead:</div><div class="line">            count += 1</div><div class="line">            pHead = pHead.next</div><div class="line">        return count</div><div class="line">    def FindFirstCommonNode(self, pHead1, pHead2):</div><div class="line">        # write code here</div><div class="line">        if not pHead1 or not pHead2:</div><div class="line">            return None</div><div class="line">        len_one = self.findlength(pHead1)</div><div class="line">        len_two = self.findlength(pHead2)</div><div class="line">        dis = abs(len_one - len_two)</div><div class="line">        if len_one &gt; len_two:</div><div class="line">            while dis:</div><div class="line">                pHead1 = pHead1.next</div><div class="line">                dis -= 1</div><div class="line">        elif len_one &lt; len_two:</div><div class="line">            while dis:</div><div class="line">                pHead2 = pHead2.next</div><div class="line">                dis -= 1</div><div class="line">        while pHead1:</div><div class="line">            if pHead1.val == pHead2.val:</div><div class="line">                return pHead1</div><div class="line">            else:</div><div class="line">                pHead1 = pHead1.next</div><div class="line">                pHead2 = pHead2.next</div><div class="line">        return None</div></pre></td></tr></table></figure>
<h3 id="链表中环的入口"><a href="#链表中环的入口" class="headerlink" title="链表中环的入口"></a>链表中环的入口</h3><p>题目：一个链表中包含环，请找出该链表的环的入口结点。<br><strong>Input：</strong></p>
<p>{1,2}, {3,4,5}</p>
<p><strong>Output：</strong></p>
<p>3</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题可以使用快慢指针，1个速度2倍于满指针的快指针。两指针一起移动，相遇的时候快指针在环中的距离为慢指针的2倍。此时慢指针距离入口的距离恰好等于起点距离入口的一半。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class ListNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">class Solution:</div><div class="line">    def EntryNodeOfLoop(self, pHead):</div><div class="line">        # write code here</div><div class="line">        if not pHead or not pHead.next:</div><div class="line">            return None</div><div class="line">        slow = pHead.next</div><div class="line">        fast = pHead.next.next</div><div class="line">        while slow != fast:</div><div class="line">            slow = slow.next</div><div class="line">            fast = fast.next.next</div><div class="line">        fast = pHead</div><div class="line">        while fast != slow:</div><div class="line">            fast = fast.next</div><div class="line">            slow = slow.next</div><div class="line">        return fast</div></pre></td></tr></table></figure>
<h2 id="树（tree）"><a href="#树（tree）" class="headerlink" title="树（tree）"></a>树（tree）</h2><h3 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h3><p>题目：操作给定的二叉树，将其变换为源二叉树的镜像。<br><strong>Input：</strong></p>
<p>{8,6,10,5,7,9,11}</p>
<p><strong>Output：</strong></p>
<p>{8,10,6,11,9,7,5}</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题的主要观念还是在<strong>树结构</strong>的问题上，由于题目给定的是二叉树，因此只会有左子节点和右子节点。值得注意的是在交换父节点的同时，父节点对应的子节点也跟着交换，这点符合镜像的要求，因此可以考虑使用<strong>递归</strong>的方式来实现这个过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line"></div><div class="line">class Solution:</div><div class="line">    # 返回镜像树的根节点</div><div class="line">    def transform(self, node):</div><div class="line">        temp = node.left</div><div class="line">        node.left = node.right</div><div class="line">        node.right = temp</div><div class="line">        </div><div class="line">    def Mirror(self, root):</div><div class="line">        # write code here</div><div class="line">        if root is not None:</div><div class="line">            self.transform(root)</div><div class="line">            self.Mirror(root.left)</div><div class="line">            self.Mirror(root.right)</div></pre></td></tr></table></figure>
<h3 id="重构二叉树"><a href="#重构二叉树" class="headerlink" title="重构二叉树"></a>重构二叉树</h3><p>题目：输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br><strong>Input：</strong></p>
<p>{1,2,3,4,5,6,7}, {3,2,4,1,6,5,7}</p>
<p><strong>Output：</strong></p>
<p>{1,2,5,3,4,6,7}， root = 1</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本体需要了解的关键点包括：树的遍历性质，递归的思维步骤等。先序遍历总是优先打印当前最大子树的root节点，而root节点的所有左子树的元素在中序遍历中必定出现在root前，相反右子树的所有元素都在后。根据这些性质就能够根据递归的思路对数的结构进行拆解，最后回归整棵树的结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for binary tree</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    TreeNode* reConstructBinaryTree(vector&lt;int&gt; pre,vector&lt;int&gt; vin) &#123;</div><div class="line">        int cand = pre[0];</div><div class="line">        if (vin.size() == 0)&#123;</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">        TreeNode* head = new TreeNode(cand);</div><div class="line">        vector&lt;int&gt; left_pre, right_pre, left_in, right_in;</div><div class="line">        int count = 0;</div><div class="line">        for (int i = 0; i &lt; vin.size(); i++)&#123;</div><div class="line">            if (vin[i] == cand)&#123;</div><div class="line">                count = i;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i = 0; i &lt; count; i++)&#123;</div><div class="line">            left_pre.push_back(pre[i+1]);</div><div class="line">            left_in.push_back(vin[i]);</div><div class="line">        &#125;</div><div class="line">        for (int i = count+1; i &lt; vin.size(); i++)&#123;</div><div class="line">            right_pre.push_back(pre[i]);</div><div class="line">            right_in.push_back(vin[i]);</div><div class="line">        &#125;</div><div class="line">        head -&gt; left = reConstructBinaryTree(left_pre, left_in);</div><div class="line">        head -&gt; right = reConstructBinaryTree(right_pre, right_in);</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h3><p>题目：输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）<br><strong>Input：</strong></p>
<p>{8,8,7,9,3,#,#,#,#,4,7}, {8,9,2}</p>
<p><strong>Output：</strong></p>
<p>False</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题用到的数据结构是二叉树，看到题目不难想到利用DFS的思路顺势搜索下去，如果能够找到答案就返回True，不行就返回False。DFS的行为主要依赖于递归的算法，对每一个节点进行深度检索，判断是否能够找到另一棵树。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def search(self, root1, root2):</div><div class="line">        if root2 is None:</div><div class="line">            return True</div><div class="line">        if root1 is None or root1.val != root2.val:</div><div class="line">            return False</div><div class="line">        return self.search(root1.left, root2.left) and self.search(root1.right, root2.right)</div><div class="line">    def HasSubtree(self, pRoot1, pRoot2):</div><div class="line">        # write code here</div><div class="line">        if pRoot1 is None or pRoot2 is None:</div><div class="line">            return False</div><div class="line">        return self.search(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2)</div></pre></td></tr></table></figure>
<h3 id="二叉树的广度优先检索"><a href="#二叉树的广度优先检索" class="headerlink" title="二叉树的广度优先检索"></a>二叉树的广度优先检索</h3><p>题目：从上往下打印出二叉树的每个节点，同层节点从左至右打印。<br><strong>Input：</strong></p>
<p>{10,6,14,4,8,12,16}</p>
<p><strong>Output：</strong></p>
<p>[10,6,14,4,8,12,16]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题不需要考虑按层换行打印，因此难度稍微低了些。code中的last和nlast用来判断层的结束和遍历的位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    # 返回从上到下每个节点值列表，例：[1,2,3]</div><div class="line">    def PrintFromTopToBottom(self, root):</div><div class="line">        # write code here</div><div class="line">        if root is None:</div><div class="line">            return []</div><div class="line">        queue = []</div><div class="line">        ans = []</div><div class="line">        last = root</div><div class="line">        nlast = root</div><div class="line">        queue.append(root)</div><div class="line">        while queue:</div><div class="line">            temp = queue.pop(0)</div><div class="line">            ans.append(temp.val)</div><div class="line">            if temp.left is not None:</div><div class="line">                queue.append(temp.left)</div><div class="line">                nlast = temp.left</div><div class="line">            if temp.right is not None:</div><div class="line">                queue.append(temp.right)</div><div class="line">                nlast = temp.right</div><div class="line">            if temp == last:</div><div class="line">                last = nlast</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="二叉树的后序遍历序列"><a href="#二叉树的后序遍历序列" class="headerlink" title="二叉树的后序遍历序列"></a>二叉树的后序遍历序列</h3><p>题目：输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。<br><strong>Input：</strong></p>
<p>[4,6,7,5]</p>
<p><strong>Output：</strong></p>
<p>True</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 值得注意的关键条件是对于一个后续遍历的二叉树序列而言，最后一个元素永远是root结点。因此可以使用递归的方式判断root结点的左右子树（小于的节点在左边，大于的节点在右边）。两者的值连续分布，如果存在交叉或者奇异值，则判断条件不成立。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def VerifySquenceOfBST(self, sequence):</div><div class="line">        # write code here</div><div class="line">        if not sequence:</div><div class="line">            return False</div><div class="line">        if len(sequence) == 1:</div><div class="line">            return True</div><div class="line">        temp = sequence.pop()</div><div class="line">        left = []</div><div class="line">        right = []</div><div class="line">        i = 0</div><div class="line">        while i &lt; len(sequence) and sequence[i] &lt; temp:</div><div class="line">            left.append(sequence[i])</div><div class="line">            i += 1</div><div class="line">        while i &lt; len(sequence):</div><div class="line">            if sequence[i] &lt; temp:</div><div class="line">                return False</div><div class="line">            right.append(sequence[i])</div><div class="line">            i += 1</div><div class="line">        left_flag = True</div><div class="line">        right_flag = True</div><div class="line">        if len(left):</div><div class="line">            left_flag = self.VerifySquenceOfBST(left)</div><div class="line">        if len(right):</div><div class="line">            right_flag = self.VerifySquenceOfBST(right)</div><div class="line">        return left_flag and right_flag</div><div class="line">``` </div><div class="line"></div><div class="line">### 平衡二叉树</div><div class="line">题目：输入一棵二叉树，判断该二叉树是否是平衡二叉树。</div><div class="line">**Input：**</div><div class="line"></div><div class="line">&#123;1,2,3,4,5,#,6,#,#,7&#125;</div><div class="line"></div><div class="line">**Output：**</div><div class="line"></div><div class="line">True</div><div class="line"></div><div class="line">**Requirement：**</div><div class="line"></div><div class="line">Time limit = 1s, Space limit = 32768K</div><div class="line"></div><div class="line">**思路：** 平衡二叉树的性质是最大的深度差不超过1，因此计算深度之后就能够容易得到结果。</div><div class="line"></div><div class="line">```python=</div><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def check(self, root):</div><div class="line">        if not root:</div><div class="line">            return 0</div><div class="line">        left = self.check(root.left)</div><div class="line">        right = self.check(root.right)</div><div class="line">        return max(left + 1, right + 1)</div><div class="line">    def IsBalanced_Solution(self, pRoot):</div><div class="line">        # write code here</div><div class="line">        if not pRoot:</div><div class="line">            return True</div><div class="line">        if abs(self.check(pRoot.left) - self.check(pRoot.right)) &gt; 1:</div><div class="line">            return False</div><div class="line">        else:</div><div class="line">            return True</div></pre></td></tr></table></figure>
<h3 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h3><p>题目：给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。<br><strong>Input：</strong></p>
<p>{8,6,10,5,7,9,11}, 5</p>
<p><strong>Output：</strong></p>
<p>6</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题属于一个递归的思路，需要熟悉二叉树的中序遍历特点。首先如果一个node有右节点，那么我们就会去寻找这个右节点的左子树的最左节点。如果右节点不存在的时候我们就会去找父节点，如果父节点的左节点就是当前节点，那么父节点就是下一个输出的对象。这个需要考虑几个特殊情况，例如root节点，如果没有右节点，那么没有下一个节点；右子树的最右节点，没有next节点等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeLinkNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">#         self.next = None</div><div class="line">class Solution:</div><div class="line">    def findleft(self, pNode):</div><div class="line">        while pNode.left:</div><div class="line">            pNode = pNode.left</div><div class="line">        return pNode</div><div class="line">    def GetNext(self, pNode):</div><div class="line">        # write code here</div><div class="line">        if not pNode:</div><div class="line">            return None</div><div class="line">        if pNode.right:</div><div class="line">            return self.findleft(pNode.right)</div><div class="line">        else:</div><div class="line">            temp = pNode</div><div class="line">            while temp.next:</div><div class="line">                temp = pNode.next</div><div class="line">                if temp.left == pNode:</div><div class="line">                    return temp</div><div class="line">                pNode = temp</div><div class="line">            return None</div></pre></td></tr></table></figure>
<h3 id="二叉树的对称"><a href="#二叉树的对称" class="headerlink" title="二叉树的对称"></a>二叉树的对称</h3><p>题目：请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。<br><strong>Input：</strong></p>
<p>{8,6,6,5,7,7,5}</p>
<p><strong>Output：</strong></p>
<p>True</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 该题的思路比较明确，就是判断二叉树的镜像是否相同，利用递归可以很好地解决。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def is_same(self, left, right):</div><div class="line">        if not left and not right:</div><div class="line">            return True</div><div class="line">        if left and right and left.val == right.val:</div><div class="line">            return self.is_same(left.left, right.right) and self.is_same(left.right, right.left)</div><div class="line">        return False</div><div class="line">    def isSymmetrical(self, pRoot):</div><div class="line">        # write code here</div><div class="line">        if not pRoot:</div><div class="line">            return True</div><div class="line">        if (pRoot.left and not pRoot.right) or (pRoot.right and not pRoot.left):</div><div class="line">            return False</div><div class="line">        return self.is_same(pRoot.left, pRoot.right)</div></pre></td></tr></table></figure>
<h2 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h2><h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><p>题目：请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy。则经过替换之后的字符串为We%20Are%20Happy。<br><strong>Input：</strong></p>
<p>“hello world”</p>
<p><strong>Output：</strong></p>
<p>“hello%20world”</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本体使用python的replace function可以快速得到结果。如果使用C++或是Java需要考虑替换的长度变化问题。另外替换过程中如果从第一个元素开始替换，需要进行大量的元素位移，因此考虑时间复杂度应该考虑从最后一位进行替换。而在原有的数组中进行替换，就需要知道数组的元素新增多少个空间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void replaceSpace(char *str,int length) &#123;</div><div class="line">        if (str == NULL || length &lt;0)</div><div class="line">            return;</div><div class="line">        int countspace = 0;</div><div class="line">        int oldlen = 0;</div><div class="line">        int i = 0;</div><div class="line">        while (str[i] != &apos;\0&apos;)&#123;</div><div class="line">            oldlen++;</div><div class="line">            if (str[i] == &apos; &apos;)</div><div class="line">                countspace++;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        int newlen = oldlen + 2*countspace;</div><div class="line">        if (newlen &gt; length)</div><div class="line">            return;</div><div class="line">        while (oldlen &gt;= 0 &amp;&amp; newlen &gt; oldlen)&#123;</div><div class="line">            if (str[oldlen] == &apos; &apos;)&#123;</div><div class="line">                str[newlen--] = &apos;0&apos;;</div><div class="line">                str[newlen--] = &apos;2&apos;;</div><div class="line">                str[newlen--] = &apos;%&apos;;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">                str[newlen--] = str[oldlen];</div><div class="line">            oldlen--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="字符串的全排列"><a href="#字符串的全排列" class="headerlink" title="字符串的全排列"></a>字符串的全排列</h3><p>题目：输入一个字符串,按字典序打印出该字符串中字符的所有排列。<br><strong>Input：</strong></p>
<p>abc</p>
<p><strong>Output：</strong></p>
<p>abc,acb,bac,bca,cab,cba</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 全排列的问题可以看成是一个递归的过程，在固定第一个元素的基础上计算之后元素的排列数，以此类推。也可以理解成动态规划的问题，根据每一个元素在每一个位置出现的可能性，交换不同元素使之成为固定元素，然后计算其他元素的排列数，以此作为转换函数传递递归下去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def swap(self, ss, i, j):</div><div class="line">        temp = ss[i]</div><div class="line">        ss[i] = ss[j]</div><div class="line">        ss[j] = temp</div><div class="line">        </div><div class="line">    def not_equal(self, ss, i, j):</div><div class="line">        for k in range(i, j):</div><div class="line">            if ss[k] == ss[j]:</div><div class="line">                return False</div><div class="line">        return True</div><div class="line">        </div><div class="line">    def permu(self, ss, temp, first, last):</div><div class="line">        if not ss or last &lt; 1:</div><div class="line">            return</div><div class="line">        if first == last:</div><div class="line">            temp.append(&quot;&quot;.join(ss))</div><div class="line">        else:</div><div class="line">            for i in range(first, last):</div><div class="line">                if self.not_equal(ss, first, i):</div><div class="line">                    self.swap(ss, first, i)</div><div class="line">                    self.permu(ss, temp, first + 1, last)</div><div class="line">                    self.swap(ss, first, i)</div><div class="line">            </div><div class="line">    def Permutation(self, ss):</div><div class="line">        # write code here</div><div class="line">        if not ss:</div><div class="line">            return []</div><div class="line">        ans = []</div><div class="line">        st = [i for i in ss]</div><div class="line">        self.permu(st, ans, 0, len(st))</div><div class="line">        return [&quot;&quot;.join(i) for i in ans]</div></pre></td></tr></table></figure>
<h3 id="第一次只出现一次的字符"><a href="#第一次只出现一次的字符" class="headerlink" title="第一次只出现一次的字符"></a>第一次只出现一次的字符</h3><p>题目：在一个字符串(1&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置。<br><strong>Input：</strong></p>
<p>google</p>
<p><strong>Output：</strong></p>
<p>4</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题考察hash的用法以及字符类型字典的建构。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int FirstNotRepeatingChar(<span class="keyword">string</span> str) &#123;</div><div class="line">        <span class="keyword">if</span> (str.empty())&#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        map&lt;char, int&gt; hash;</div><div class="line">        for (int i = <span class="number">0</span>; i &lt; str.size(); i++)&#123;</div><div class="line">            hash[str[i]]++;</div><div class="line">        &#125;</div><div class="line">        for (int i = <span class="number">0</span>; i &lt; str.size(); i++)&#123;</div><div class="line">            <span class="keyword">if</span> (hash[str[i]] == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="左旋转字符"><a href="#左旋转字符" class="headerlink" title="左旋转字符"></a>左旋转字符</h3><p>题目：汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。<br><strong>Input：</strong></p>
<p>abcdefg, 2</p>
<p><strong>Output：</strong></p>
<p>“cdefgab”</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 旋转字符属于基本的算法之一，其思路也有许多，包括最基本的取值平移（K位数直接平移）；以及3次反向（先对前k个取反，然后对后n-k个取反，最后对整个字符串取反）等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def LeftRotateString(self, s, n):</div><div class="line">        # write code here</div><div class="line">        if len(s) == 0:</div><div class="line">            return &quot;&quot;</div><div class="line">        if len(s) &lt;= n:</div><div class="line">            return s</div><div class="line">        left = s[:n]</div><div class="line">        right = s[n:]</div><div class="line">        ans = left[::-1] + right[::-1]</div><div class="line">        return ans[::-1]</div></pre></td></tr></table></figure>
<h3 id="翻转单词顺序列"><a href="#翻转单词顺序列" class="headerlink" title="翻转单词顺序列"></a>翻转单词顺序列</h3><p>题目：牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。后来才意识到，这家伙原来把句子单词的顺序翻转了。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？<br><strong>Input：</strong></p>
<p>I am a student.</p>
<p><strong>Output：</strong></p>
<p>student. a am I</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题属于旋转字符串的运用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def ReverseSentence(self, s):</div><div class="line">        # write code here</div><div class="line">        temp = s.split(&quot; &quot;)</div><div class="line">        if len(temp) == 0:</div><div class="line">            return []</div><div class="line">        return &quot; &quot;.join(temp[::-1])</div></pre></td></tr></table></figure>
<h3 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h3><p>题目：将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。<br><strong>Input：</strong></p>
<p>+2147483647<br>    1a33</p>
<p><strong>Output：</strong></p>
<p>2147483647<br>    0</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 实作stoi函数，需要考虑的有4点：是否有无关字符，正负符号问题，空指针以及是否越界（超过integer临界值）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int StrToInt(string str) &#123;</div><div class="line">        const char* temp = str.c_str();</div><div class="line">        const static int MAX_INT = (int)((unsigned)~0 &gt;&gt; 1);</div><div class="line">        const static int MIN_INT = -(int)((unsigned)~0 &gt;&gt; 1) - 1;</div><div class="line">        unsigned int ans = 0;</div><div class="line">        </div><div class="line">        if (*temp == &apos;\0&apos;)&#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        while (isspace(*temp))&#123;</div><div class="line">            temp++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        int sign = 1;</div><div class="line">        if (*temp == &apos;+&apos; || *temp == &apos;-&apos;)&#123;</div><div class="line">            if (*temp == &apos;-&apos;)&#123;</div><div class="line">                sign = -1;</div><div class="line">            &#125;</div><div class="line">            temp++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        while (*temp != &apos;\0&apos;)&#123;</div><div class="line">            if (isdigit(*temp))&#123;</div><div class="line">                int c = *temp - &apos;0&apos;;</div><div class="line">                if (sign &gt; 0 &amp;&amp; (ans &gt; MAX_INT / 10 || (ans == MAX_INT / 10 &amp;&amp; c &gt; MAX_INT % 10)))&#123;</div><div class="line">                    ans = MAX_INT;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                else if (sign &lt; 0 &amp;&amp; (ans &gt; (unsigned)MIN_INT / 10 || (ans == (unsigned)MIN_INT / 10 &amp;&amp; c &gt; (unsigned)MIN_INT % 10)))&#123;</div><div class="line">                    ans = MIN_INT;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                ans = ans * 10 + c;</div><div class="line">                temp++;</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                return 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return sign &gt; 0 ? ans : -ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h3><p>题目：请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值而”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。<br><strong>Input：</strong></p>
<p>“+100”</p>
<p><strong>Output：</strong></p>
<p>True</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题是要设计一个正则表达式能够判断字符的格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import re</div><div class="line">class Solution:</div><div class="line">    # s字符串</div><div class="line">    def isNumeric(self, s):</div><div class="line">        # write code here</div><div class="line">        return re.match(&quot;^[+-]?\\d*(\\.\\d+)?([Ee][+-]?\\d+)?$&quot;, s)</div></pre></td></tr></table></figure>
<h3 id="字符流中第一次只出现一次的字符"><a href="#字符流中第一次只出现一次的字符" class="headerlink" title="字符流中第一次只出现一次的字符"></a>字符流中第一次只出现一次的字符</h3><p>题目：请实现一个函数用来找出字符流中第一个只出现一次的字符。<br><strong>Input：</strong></p>
<p>google</p>
<p><strong>Output：</strong></p>
<p>l</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题使用hash的方式统计次数，需要注意的是需要得到的是第一次出现的单一字符，因此需要从头到尾判断。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    # 返回对应char</div><div class="line">    def __init__(self):</div><div class="line">        self.dic = &#123;&#125;</div><div class="line">        self.s = &quot;&quot;</div><div class="line">    def FirstAppearingOnce(self):</div><div class="line">        # write code here</div><div class="line">        for i in self.s:</div><div class="line">            if self.dic[i] == 1:</div><div class="line">                return i</div><div class="line">        return &apos;#&apos;</div><div class="line">    def Insert(self, char):</div><div class="line">        # write code here</div><div class="line">        self.s += char</div><div class="line">        if char in self.dic:</div><div class="line">            self.dic[char] += 1</div><div class="line">        else:</div><div class="line">            self.dic[char] = 1</div></pre></td></tr></table></figure>
<h2 id="数组（array）"><a href="#数组（array）" class="headerlink" title="数组（array）"></a>数组（array）</h2><h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><strong>Input：</strong></p>
<p>7, [[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]</p>
<p><strong>Output：</strong></p>
<p>True</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 既然二维数组满足严格的递增关系，那么我们可以考虑从数组的一个极端值开始考虑。以左下角为例，row = len(array)-1，col = 0的点比同一个col的其他值都大，因此如果此时这个数比我们的目标要大，我们只需要向上寻找即可。寻找过程中如果出现当前数字小于目标的时候，尝试往右寻找。如此往复，直到无路可走为止。想法类似<strong>DFS</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    # array 二维列表</div><div class="line">    def Find(self, target, array):</div><div class="line">        # write code here</div><div class="line">        if not array[0]:</div><div class="line">            return False</div><div class="line">        row = len(array)-1</div><div class="line">        col = 0</div><div class="line">        while (row &gt;=0) and (col &lt; len(array[0])):</div><div class="line">            if array[row][col] == target:</div><div class="line">                return True</div><div class="line">            elif array[row][col] &gt; target:</div><div class="line">                row-=1</div><div class="line">            else:</div><div class="line">                col+=1</div><div class="line">        return False</div></pre></td></tr></table></figure>
<h3 id="调整数组顺序让基数位于偶数前面"><a href="#调整数组顺序让基数位于偶数前面" class="headerlink" title="调整数组顺序让基数位于偶数前面"></a>调整数组顺序让基数位于偶数前面</h3><p>题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。<br><strong>Input：</strong></p>
<p>[1,2,3,4,5,6,7]</p>
<p><strong>Output：</strong></p>
<p>[1,3,5,7,2,4,6]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 利用两个指针来表示新数组中奇数和偶数的位置，然后依次插入即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def reOrderArray(self, array):</div><div class="line">        # write code here</div><div class="line">        if len(array) == 0:</div><div class="line">            return []</div><div class="line">        new_list = []</div><div class="line">        temp = 0</div><div class="line">        for i in array:</div><div class="line">            if i % 2 == 0:</div><div class="line">                new_list.append(i)</div><div class="line">            else:</div><div class="line">                new_list.insert(temp, i)</div><div class="line">                temp += 1</div><div class="line">        return new_list</div></pre></td></tr></table></figure>
<h3 id="数组中最小的k个数"><a href="#数组中最小的k个数" class="headerlink" title="数组中最小的k个数"></a>数组中最小的k个数</h3><p>题目：输入n个整数，找出其中最小的K个数。<br><strong>Input：</strong></p>
<p>{4,5,1,6,2,7,3,8}， 4</p>
<p><strong>Output：</strong></p>
<p>[1,2,3,4]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题是经典的算法题之一，其思路多种多样。其中包括最基本的排序取前k个数；维护一个长度为k的最小堆以及BFPRT算法（利用中位数进行更精准的二分）等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def is_min(self, s, k):</div><div class="line">        temp = s[-1]</div><div class="line">        if k &lt; temp:</div><div class="line">            s[-1] = k</div><div class="line">        s = sorted(s)</div><div class="line">        return s</div><div class="line">    def GetLeastNumbers_Solution(self, tinput, k):</div><div class="line">        # write code here</div><div class="line">        if k == len(tinput):</div><div class="line">            return sorted(tinput)</div><div class="line">        if k == 0 or not tinput or k &gt; len(tinput):</div><div class="line">            return []</div><div class="line">        min_heap = []</div><div class="line">        for i in range(k):</div><div class="line">            min_heap.append(tinput[i])</div><div class="line">        min_heap = sorted(min_heap)</div><div class="line">        for i in range(k, len(tinput)):</div><div class="line">            min_heap = self.is_min(min_heap, tinput[i])</div><div class="line">        return min_heap</div></pre></td></tr></table></figure>
<h3 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h3><p>题目：HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？<br><strong>Input：</strong></p>
<p>{6,-3,-2,7,-15,1,2,2}</p>
<p><strong>Output：</strong></p>
<p>8</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本体求的是连续数组，可以使用循环或者动态规划的思维来解决。其核心就是在遍历数组的过程中维护两个值，其中一个记录当前的和，另一个记录最大和。当当前和大于0且大于最大和的时候，更新最大和；如果当前和小于零，则令当前和等于下一个元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def FindGreatestSumOfSubArray(self, array):</div><div class="line">        # write code here</div><div class="line">        if len(array) == 0:</div><div class="line">            return 0</div><div class="line">        ans = array[0]</div><div class="line">        cur = 0</div><div class="line">        for i in range(len(array)):</div><div class="line">            if cur &lt; 0:</div><div class="line">                cur = array[i]</div><div class="line">            else:</div><div class="line">                cur += array[i]</div><div class="line">            if cur &gt; ans:</div><div class="line">                ans = cur</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a>把数组排成最小的数</h3><p>题目：输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。<br><strong>Input：</strong></p>
<p>{3，32，321}</p>
<p><strong>Output：</strong></p>
<p>321323</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题使用贪心（Greedy）算法和DFS结合的思路按照从长到短的顺序判断左右拼接字符的大小，然后选择大的继续。注意从长到短是因为长的数对全局影响比较大，用大的拼接小的可变化范围会增加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def PrintMinNumber(self, numbers):</div><div class="line">        # write code here</div><div class="line">        if len(numbers) == 0:</div><div class="line">            return &quot;&quot;</div><div class="line">        ans = &quot;&quot;</div><div class="line">        numbers = sorted(numbers)</div><div class="line">        for i in range(len(numbers)):</div><div class="line">            ans1 = int(ans + str(numbers[i]))</div><div class="line">            ans2 = int(str(numbers[i]) + ans)</div><div class="line">            if ans1 &gt; ans2:</div><div class="line">                ans = str(ans2)</div><div class="line">            else:</div><div class="line">                ans = str(ans1)</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h3><p>题目：把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。<br><strong>Input：</strong></p>
<p>2</p>
<p><strong>Output：</strong></p>
<p>2</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题如果使用遍历实数域的方式很难实现，所以可以考虑对因数进行组合。因为丑数是只包含2、3和5的因数，因此其值可以表示为 <strong>2i+3j+5k</strong> 的形式，因此我们去匹配相应的i、j、k系数，取组合数的最小值作为下一个出现的丑数，从而找到结果。注意：一次只加i、j、k中的一个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def GetUglyNumber_Solution(self, index):</div><div class="line">        # write code here</div><div class="line">        if index == 0:</div><div class="line">            return 0</div><div class="line">        if index == 1:</div><div class="line">            return 1</div><div class="line">        l = [1]</div><div class="line">        idx_two = 0</div><div class="line">        idx_three = 0</div><div class="line">        idx_five = 0</div><div class="line">        for _ in range(index-1):</div><div class="line">            temp = min(l[idx_two]*2, l[idx_three]*3, l[idx_five]*5)</div><div class="line">            l.append(temp)</div><div class="line">            if temp % 2 == 0:</div><div class="line">                idx_two += 1</div><div class="line">            if temp % 3 == 0:</div><div class="line">                idx_three += 1</div><div class="line">            if temp % 5 == 0:</div><div class="line">                idx_five += 1</div><div class="line">        return l[-1]</div></pre></td></tr></table></figure>
<h3 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h3><p>题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。<br><strong>Input：</strong></p>
<p>[2,4,3,6,3,2,5,5]</p>
<p><strong>Output：</strong></p>
<p>“4,6”</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 利用hash和字典可以轻松解决。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    # 返回[a,b] 其中ab是出现一次的两个数字</div><div class="line">    def FindNumsAppearOnce(self, array):</div><div class="line">        # write code here</div><div class="line">        if len(array) == 0:</div><div class="line">            return</div><div class="line">        ans = []</div><div class="line">        dic = &#123;i : 0 for i in array&#125;</div><div class="line">        for i in array:</div><div class="line">            dic[i] += 1</div><div class="line">        for i, j in dic.items():</div><div class="line">            if j == 1:</div><div class="line">                ans.append(i)</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h3><p>题目：在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。<br><strong>Input：</strong></p>
<p>[2,1,3,1,4]</p>
<p><strong>Output：</strong></p>
<p>“true, 1”</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 利用一个bool数组来动态规划。原本所有的数字table都为false，如果某一个数字对应数值位置的值为true，表示该数字已经出现过了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    // Parameters:</div><div class="line">    //    numbers:     an array of integers</div><div class="line">    //    length:      the length of array numbers</div><div class="line">    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;</div><div class="line">    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++</div><div class="line">    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]</div><div class="line">    // Return value:       true if the input is valid, and there are some duplications in the array number</div><div class="line">    //                     otherwise false</div><div class="line">    public boolean duplicate(int numbers[],int length,int [] duplication) &#123;</div><div class="line">        boolean temp[] = new boolean[length];</div><div class="line">        for (int i = 0; i &lt; length; i++)&#123;</div><div class="line">            if (temp[numbers[i]] == true) &#123;</div><div class="line">                duplication[0] = numbers[i];</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">            temp[numbers[i]] = true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="栈和堆叠（stack-amp-heap）"><a href="#栈和堆叠（stack-amp-heap）" class="headerlink" title="栈和堆叠（stack &amp; heap）"></a>栈和堆叠（stack &amp; heap）</h2><h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><p>题目：用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。<br><strong>Input：</strong></p>
<p>[1, 2, 3, “POP”, “POP”, 4, “POP”, 5, “POP”, “POP”]</p>
<p><strong>Output：</strong></p>
<p>1,2,3,4,5</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 栈的特点是先进后出，如果要让栈内元素先进先出，就必须使用另一个栈来接它pop出去的元素，利用第二个栈的顺序依次pop即为队列（queue）的顺序。此外要注意的是，在pop结束之后，如果第二个栈内有剩余的元素，需要将这些元素pop回第一个栈再继续push的动作，这样才能保证元素的顺序正确。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void push(int node) &#123;</div><div class="line">        stack1.push(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int pop() &#123;</div><div class="line">        while (!stack1.empty())&#123;</div><div class="line">            stack2.push(stack1.top());</div><div class="line">            stack1.pop();</div><div class="line">        &#125;</div><div class="line">        int ans = stack2.top();</div><div class="line">        stack2.pop();</div><div class="line">        while (!stack2.empty())&#123;</div><div class="line">            stack1.push(stack2.top());</div><div class="line">            stack2.pop();</div><div class="line">        &#125;</div><div class="line">        return ans;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">private:</div><div class="line">    stack&lt;int&gt; stack1;</div><div class="line">    stack&lt;int&gt; stack2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h3><p>题目：定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。<br><strong>Input：</strong></p>
<p>[3, “MIN”, 4, “MIN”, 2, “MIN”, 3, “MIN”, “POP”, “MIN”, “POP”, “MIN”, “POP”, “MIN”, 0, “MIN”]</p>
<p><strong>Output：</strong></p>
<p>3,3,2,2,2,3,3,0</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题考察数据结构的实作，在stack的基础上实现判断最小值的功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def __init__(self):</div><div class="line">        self.stack = []</div><div class="line">    def push(self, node):</div><div class="line">        # write code here</div><div class="line">        self.stack.append(node)</div><div class="line">    def pop(self):</div><div class="line">        # write code here</div><div class="line">        if self.stack:</div><div class="line">            del self.stack[-1]</div><div class="line">    def top(self):</div><div class="line">        # write code here</div><div class="line">        if self.stack:</div><div class="line">            return self.stack[-1]</div><div class="line">    def min(self):</div><div class="line">        # write code here</div><div class="line">        self.min_stack = []</div><div class="line">        if self.stack:</div><div class="line">            min = self.stack[-1]</div><div class="line">        else:</div><div class="line">            min = 0</div><div class="line">        while self.stack:</div><div class="line">            temp = self.top()</div><div class="line">            self.min_stack.append(temp)</div><div class="line">            self.pop()</div><div class="line">            if temp &lt; min:</div><div class="line">                min = temp</div><div class="line">        self.stack = self.min_stack[::-1]</div><div class="line">        return min</div></pre></td></tr></table></figure>
<h3 id="栈的压入与弹出序列"><a href="#栈的压入与弹出序列" class="headerlink" title="栈的压入与弹出序列"></a>栈的压入与弹出序列</h3><p>题目：输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。<br><strong>Input：</strong></p>
<p>[1,2,3,4,5], [4,3,5,1,2]</p>
<p><strong>Output：</strong></p>
<p>False</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 利用DFS的思路可以对pushV和popV里面所有时刻的值进行对比，判断是否能够组成一条完整的输出路线即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def IsPopOrder(self, pushV, popV):</div><div class="line">        # write code here</div><div class="line">        if not pushV or len(pushV) != len(popV):</div><div class="line">            return False</div><div class="line">        stack = []</div><div class="line">        for i in range(len(pushV)):</div><div class="line">            stack.append(pushV[i])</div><div class="line">            while stack and popV[0] == stack[-1]:</div><div class="line">                stack.pop()</div><div class="line">                popV.pop(0)</div><div class="line">        if len(stack) != 0:</div><div class="line">            return False</div><div class="line">        return True</div></pre></td></tr></table></figure>
<h1 id="智力题和知识迁移"><a href="#智力题和知识迁移" class="headerlink" title="智力题和知识迁移"></a>智力题和知识迁移</h1><h2 id="矩阵覆盖"><a href="#矩阵覆盖" class="headerlink" title="矩阵覆盖"></a>矩阵覆盖</h2><p>题目：我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2<em>n的大矩形，总共有多少种方法？<br><em>*Input：</em></em></p>
<p>4</p>
<p><strong>Output：</strong></p>
<p>5</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> t时刻的状态可以由t-1时刻的状态加上一个2<em>1的小矩阵构成，因此不难想到利用状态转移的方式进行解答。由于是2</em>1的矩阵，因此在扩展2<em>n大矩阵的时候可能出现 <strong>‘||’</strong> 和 <em>*’=’</em></em> 两种摆放形式，而这要求下矩阵需要以偶数形式出现。因此不难想到状态在偶数时会比奇数时多，一个典型的斐波那契数列应用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def rectCover(self, number):</div><div class="line">        # write code here</div><div class="line">        if number &lt; 1:</div><div class="line">            return 0</div><div class="line">        if number == 1:</div><div class="line">            return 1</div><div class="line">        ans = 1</div><div class="line">        a = 1</div><div class="line">        for i in range(2, number + 1):</div><div class="line">            temp = ans</div><div class="line">            ans += a</div><div class="line">            a = temp</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><p>题目：输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。<br><strong>Input：</strong></p>
<p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</p>
<p><strong>Output：</strong></p>
<p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10</p>
<p><strong>Requirement：</strong> 本体考察空间想象能力，通过每次将二维阵列的第一行从左到右顺序打印，然后删除打印的元素。之后对阵列进行倒序转置，一次往复就能够实现螺旋打印了。</p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本体需要考虑的问题是打印的顺序属于动态变化的情况，因此我们采用动态阵列的定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    # matrix类型为二维列表，需要返回列表</div><div class="line">    def transform(self, matrix):</div><div class="line">        n = len(matrix)</div><div class="line">        m = len(matrix[0])</div><div class="line">        B = []</div><div class="line">        for i in range(m):</div><div class="line">            A = []</div><div class="line">            for j in range(n):</div><div class="line">                A.append(matrix[j][i])</div><div class="line">            B.append(A)</div><div class="line">        return B[::-1]</div><div class="line">    def printMatrix(self, matrix):</div><div class="line">        # write code here</div><div class="line">        result = []</div><div class="line">        while matrix:</div><div class="line">            result += matrix.pop(0)</div><div class="line">            if not matrix:</div><div class="line">                break</div><div class="line">            matrix = self.transform(matrix)</div><div class="line">        return result</div></pre></td></tr></table></figure>
<h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h2><p>题目：输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空。<br><strong>Input：</strong></p>
<p>{1,2,3,4,5,3,5,’#’,2,’#’}</p>
<p><strong>Output：</strong></p>
<p>{1,2,3,4,5,3,5,’#’,2,’#’}</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 该题可以利用几种不同的思路进行解答，其中包括先利用临时阵列存取所有node的random值，然后复制原先的阵列，再将random值顺序赋值给对应的node。另一种是将遍历的每一个node复制到它的next结点，然后通过跳过一次的方式提取偶数node作为复制后的链表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class RandomListNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.label = x</div><div class="line">#         self.next = None</div><div class="line">#         self.random = None</div><div class="line">class Solution:</div><div class="line">    # 返回 RandomListNode</div><div class="line">    def Build(self, pHead):</div><div class="line">        temp = []</div><div class="line">        while pHead:</div><div class="line">            ans = pHead.random</div><div class="line">            temp.append(ans)</div><div class="line">            pHead = pHead.next</div><div class="line">        return temp</div><div class="line">    def Clone(self, pHead):</div><div class="line">        # write code here</div><div class="line">        if not pHead:</div><div class="line">            return</div><div class="line">        temp = self.Build(pHead)</div><div class="line">        root = pHead</div><div class="line">        res = RandomListNode(root.label)</div><div class="line">        result = res</div><div class="line">        result2 = res</div><div class="line">        while root.next:</div><div class="line">            root = root.next</div><div class="line">            newNode = RandomListNode(root.label)</div><div class="line">            result.next = newNode</div><div class="line">            result = result.next</div><div class="line">        for i in temp:</div><div class="line">            result2.random = i</div><div class="line">            result2 = result2.next</div><div class="line">        return res</div></pre></td></tr></table></figure>
<h2 id="二叉检索树转换成双向链表"><a href="#二叉检索树转换成双向链表" class="headerlink" title="二叉检索树转换成双向链表"></a>二叉检索树转换成双向链表</h2><p>题目：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。<br><strong>Input：</strong></p>
<p>{10,6,14,4,8,12,16}</p>
<p><strong>Output：</strong></p>
<p>From left to right are: 4,6,8,10,12,14,16; From right to left are: 16,14,12,10,8,6,4;</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题主要考察的是对数据结构的熟悉程度以及利用深度优先检索的中续遍历来构建双向链表的思路。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def Convert(self, pRootOfTree):</div><div class="line">        # write code here</div><div class="line">        if not pRootOfTree:</div><div class="line">            return None</div><div class="line">        stack = []</div><div class="line">        flag = True</div><div class="line">        root = pRootOfTree</div><div class="line">        while root or len(stack) != 0:</div><div class="line">            while root:</div><div class="line">                stack.append(root)</div><div class="line">                root = root.left</div><div class="line">            root = stack.pop()</div><div class="line">            if flag:</div><div class="line">                pRootOfTree = root</div><div class="line">                pre = root</div><div class="line">                flag = False</div><div class="line">            else:</div><div class="line">                pre.right = root</div><div class="line">                root.left = pre</div><div class="line">                pre = root</div><div class="line">            root = root.right</div><div class="line">        return pRootOfTree</div></pre></td></tr></table></figure>
<h2 id="整数中1出现的次数"><a href="#整数中1出现的次数" class="headerlink" title="整数中1出现的次数"></a>整数中1出现的次数</h2><p>题目：求出1-13的整数中1出现的次数,并算出100-1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。<br><strong>Input：</strong></p>
<p>10</p>
<p><strong>Output：</strong></p>
<p>2</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 设N = abcde ,其中abcde分别为十进制中各位上的数字。<br>如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。<br>① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100-199，1100-1199,2100-2199，，…，11100-11199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。<br>② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100-199，1100-1199,2100-2199，，….，11100-11199，一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100-12113,一共114个，等于低位数字（113）+1。<br>③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100-199,1100-1199，2100-2199，…，11100-11199,12100-12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def NumberOf1Between1AndN_Solution(self, n):</div><div class="line">        # write code here</div><div class="line">        ans = 0</div><div class="line">        temp = 1</div><div class="line">        cand = n</div><div class="line">        while cand:</div><div class="line">            last = cand % 10</div><div class="line">            cand = cand // 10</div><div class="line">            ans += cand * temp</div><div class="line">            if last == 1:</div><div class="line">                ans += n % temp + 1</div><div class="line">            elif last &gt; 1:</div><div class="line">                ans += temp</div><div class="line">            temp *= 10</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h2 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a>扑克牌顺子</h2><p>题目：LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。<br><strong>Input：</strong></p>
<p>[1,3,2,5,4]</p>
<p><strong>Output：</strong></p>
<p>true</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题比起正向思考，反向考虑其矛盾点更为明智。首先需要组成顺子必须保证有5张牌，其次如果5张牌有王，就必须保证除了王之外的数相差不超过5。同时不能有重复的出现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def is_same(self, s, i, k):</div><div class="line">        for i in range(i, k-1):</div><div class="line">            temp = s[i]</div><div class="line">            for j in range(i+1, k):</div><div class="line">                if s[j] == temp:</div><div class="line">                    return True</div><div class="line">        return False</div><div class="line">    def IsContinuous(self, numbers):</div><div class="line">        # write code here</div><div class="line">        if len(numbers) != 5:</div><div class="line">            return False</div><div class="line">        num = sorted(numbers)</div><div class="line">        point = 0</div><div class="line">        if num[-1] == 0:</div><div class="line">            return False</div><div class="line">        while num[point] == 0:</div><div class="line">            point += 1</div><div class="line">        if point != len(num) - 1:</div><div class="line">            if self.is_same(num, point, len(num)):</div><div class="line">                return False</div><div class="line">            if num[-1] - num[point] &gt;= 5:</div><div class="line">                return False</div><div class="line">        return True</div></pre></td></tr></table></figure>
<h2 id="孩子们的游戏（环中剩下的数）"><a href="#孩子们的游戏（环中剩下的数）" class="headerlink" title="孩子们的游戏（环中剩下的数）"></a>孩子们的游戏（环中剩下的数）</h2><p>题目：每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)。<br><strong>Input：</strong></p>
<p>5, 3</p>
<p><strong>Output：</strong></p>
<p>3</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题可以使用递归的思路解答，最后的胜利者永远不变，可以不断添加失败者进行递归的动作。另一种解法就是把环当成一个数组，然后根据规则每次删除数组中的相应的元素，最后的元素就是胜利者。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def LastRemaining_Solution(self, n, m):</div><div class="line">        # write code here</div><div class="line">        if n == 0 or m &lt; 0:</div><div class="line">            return -1</div><div class="line">        temp = 0</div><div class="line">        ans = range(n)</div><div class="line">        while len(ans) &gt; 1:</div><div class="line">            temp = (temp + m - 1) % len(ans)</div><div class="line">            ans.pop(temp)</div><div class="line">        return ans[0]</div></pre></td></tr></table></figure>
<h2 id="1-2-3-4-…-n"><a href="#1-2-3-4-…-n" class="headerlink" title="1+2+3+4+…+n"></a>1+2+3+4+…+n</h2><p>题目：求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。<br><strong>Input：</strong></p>
<p>1+2+3</p>
<p><strong>Output：</strong></p>
<p>6</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题的难点在于无法使用判断退出循环。因此可以使用位操作符的特性来进行判断，大于小于作为bool值返回的时候可以作为判断条件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def __init__(self):</div><div class="line">        self.sum = 0</div><div class="line">    def Sum_Solution(self, n):</div><div class="line">        # write code here</div><div class="line">        def func(n):</div><div class="line">            self.sum += n</div><div class="line">            n -= 1</div><div class="line">            return n &gt; 0 and self.Sum_Solution(n)</div><div class="line">        func(n)</div><div class="line">        return self.sum</div></pre></td></tr></table></figure>
<h2 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h2><p>题目：给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。<br><strong>Input：</strong></p>
<p>[1,2,3,4,5]</p>
<p><strong>Output：</strong></p>
<p>[120,60,40,30,24]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> B数组中的值就是A数组的值去掉i对应的哪一项后的乘积。不能使用除法的情况下，我们就可以使用动态规划，维护一个A*B的二维阵列，其中对应Ai = Bi的值全为1，然后计算整个阵列每行的乘积和即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def multiply(self, A):</div><div class="line">        # write code here</div><div class="line">        B = [1 for _ in range(len(A))]</div><div class="line">        for i in range(1, len(A)):</div><div class="line">            B[i] = B[i - 1] * A[i - 1]</div><div class="line">        temp = 1</div><div class="line">        for j in range(len(A) - 2, -1, -1):</div><div class="line">            temp *= A[j + 1]</div><div class="line">            B[j] *= temp</div><div class="line">        return B</div></pre></td></tr></table></figure>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>题目：请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab<em>a”均不匹配。<br><em>*Input：</em></em></p>
<p>“aa”, “aa”</p>
<p><strong>Output：</strong></p>
<p>true</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题的思路是递归加DFS。需要考虑的情况包括。如果下一个字符是’<em>‘，则当前的值如果是’.’或者与匹配字符相等，则继续判断三种情况：1、匹配字符跳过与当前正则表达式的字符继续匹配；2、跳过正则表达式的当前字符和’</em>‘，继续和匹配字符的当前字符比较；3、跳过正则表达式的当前字符和’<em>‘同时跳过匹配字符的当前字符，匹配双方的下一个字符。这三种情况有一种成立即可继续。另外，如果’</em>‘前面的字符不匹配，则跳过’<em>‘继续匹配。如果下一个字符不是’</em>‘，则匹配当前字符是否为’.’或者匹配字符，如果是跳过双方继续。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    # s, pattern都是字符串</div><div class="line">    def match(self, s, pattern):</div><div class="line">        # write code here</div><div class="line">        if len(s) == 0 and len(pattern) == 0:</div><div class="line">            return True</div><div class="line">        if len(s) &gt; 0 and len(pattern) == 0:</div><div class="line">            return False</div><div class="line">        if len(pattern) &gt; 1 and pattern[1] == &apos;*&apos;:</div><div class="line">            if len(s) &gt; 0 and (pattern[0] == &apos;.&apos; or pattern[0] == s[0]):</div><div class="line">                return self.match(s, pattern[2:]) or self.match(s[1:], pattern) or self.match(s[1:], pattern[2:])</div><div class="line">            else:</div><div class="line">                return self.match(s, pattern[2:])</div><div class="line">        else:</div><div class="line">            if len(s) &gt; 0 and (pattern[0] == &apos;.&apos; or pattern[0] == s[0]):</div><div class="line">                return self.match(s[1:], pattern[1:])</div><div class="line">        return False</div></pre></td></tr></table></figure>
<h2 id="之字形打印二叉树"><a href="#之字形打印二叉树" class="headerlink" title="之字形打印二叉树"></a>之字形打印二叉树</h2><p>题目：请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。<br><strong>Input：</strong></p>
<p>{8,6,10,5,7,9,11}</p>
<p><strong>Output：</strong></p>
<p>[[8], [10,6], [5,7,9,11]]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题的思路就是在二叉树的广度优先检索（BFS）算法的基础上加上了一些变形，维护一个flag来判断当前是顺序打印还是逆序打印。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def Print(self, pRoot):</div><div class="line">        # write code here</div><div class="line">        if not pRoot:</div><div class="line">            return []</div><div class="line">        res, temp = [], []</div><div class="line">        last = pRoot</div><div class="line">        queue = [pRoot]</div><div class="line">        flag = True</div><div class="line">        while queue:</div><div class="line">            cand = queue.pop(0)</div><div class="line">            temp.append(cand.val)</div><div class="line">            if cand.left:</div><div class="line">                queue.append(cand.left)</div><div class="line">            if cand.right:</div><div class="line">                queue.append(cand.right)</div><div class="line">            if cand == last:</div><div class="line">                res.append(temp if flag else temp[::-1])</div><div class="line">                flag = not flag</div><div class="line">                temp = []</div><div class="line">                if queue:</div><div class="line">                    last = queue[-1]</div><div class="line">        return res</div></pre></td></tr></table></figure>
<h2 id="序列化和反序列化二叉树"><a href="#序列化和反序列化二叉树" class="headerlink" title="序列化和反序列化二叉树"></a>序列化和反序列化二叉树</h2><p>题目：请实现两个函数，分别用来序列化和反序列化二叉树。<br><strong>Input：</strong></p>
<p>{8,6,10,5,#,9,11}</p>
<p><strong>Output：</strong></p>
<p>{8,6,10,5,#,9,11}</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 序列化二叉树就是用一个数据结构来表示二叉树，最简单的就是利用字符串以’,’区隔树的每一个node，然后用’#’表示空，按照从左到右的顺序编码。解码的时候就是编码的逆序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def __init__(self):</div><div class="line">        self.idx = -1</div><div class="line">    def Serialize(self, root):</div><div class="line">        # write code here</div><div class="line">        if not root:</div><div class="line">            return &apos;#&apos;</div><div class="line">        return str(root.val) + &apos;,&apos; + self.Serialize(root.left) + &apos;,&apos; + self.Serialize(root.right)</div><div class="line">    def Deserialize(self, s):</div><div class="line">        # write code here</div><div class="line">        temp = s.split(&apos;,&apos;)</div><div class="line">        self.idx += 1</div><div class="line">        if temp[self.idx] == &apos;#&apos;:</div><div class="line">            return None</div><div class="line">        root = TreeNode(int(temp[self.idx]))</div><div class="line">        root.left = self.Deserialize(s)</div><div class="line">        root.right = self.Deserialize(s)</div><div class="line">        return root</div></pre></td></tr></table></figure>
<h2 id="滚动窗口的最大值"><a href="#滚动窗口的最大值" class="headerlink" title="滚动窗口的最大值"></a>滚动窗口的最大值</h2><p>题目：给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。<br><strong>Input：</strong></p>
<p>[2,3,4,2,6,2,5,1], 3</p>
<p><strong>Output：</strong></p>
<p>[4,4,6,6,6,5]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题的关键信息在于window的size，我们可以维护一个window大小的数组，然后从左往右判断第一个数是否是最大的，如果此时长度已经达到了size的要求，那么pop第一个数，数组右移加入新的成员；或者如果数组中有数比第一个元素大则pop左边元素（目的是保证数组最左边的数永远最大）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def is_max(self, deque):</div><div class="line">        temp = deque[0]</div><div class="line">        for j in range(1, len(deque)):</div><div class="line">            if temp &lt;= deque[j]:</div><div class="line">                return True</div><div class="line">        return False</div><div class="line">    def process(self, num, deque, size):</div><div class="line">        while len(deque) &gt; size or self.is_max(deque):</div><div class="line">            deque.pop(0)</div><div class="line">            if len(deque) == 1:</div><div class="line">                break</div><div class="line">        return deque</div><div class="line">    def maxInWindows(self, num, size):</div><div class="line">        # write code here</div><div class="line">        ans = []</div><div class="line">        if len(num) == 0 or len(num) &lt; size or size == 0:</div><div class="line">            return []</div><div class="line">        deque = num[:size-1]</div><div class="line">        for i in range(size-1, len(num)):</div><div class="line">            deque.append(num[i])</div><div class="line">            temp = self.process(num, deque, size)</div><div class="line">            ans.append(temp[0])</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h2 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h2><p>题目：地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？<br><strong>Input：</strong></p>
<p>5, 10, 10</p>
<p><strong>Output：</strong></p>
<p>21</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题是一个深度检索和动态规划的结合应用，利用维护一个阵列来动态判断每一个格子的可能性，然后利用深度检索的方式便利空间图形中的所有格子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def __init__(self):</div><div class="line">        self.count = 0</div><div class="line">    def move(self, matrix, threshold, rows, cols, i, j):</div><div class="line">        if not (0&lt;=i&lt;rows and 0&lt;=j&lt;cols):</div><div class="line">            return</div><div class="line">        temp = sum(map(int, str(i) + str(j)))</div><div class="line">        if matrix[i][j] == -1 or temp &gt; threshold:</div><div class="line">            matrix[i][j] = -1</div><div class="line">            return</div><div class="line">        if matrix[i][j] == 1:</div><div class="line">            return</div><div class="line">        matrix[i][j] = 1</div><div class="line">        self.count += 1</div><div class="line">        self.move(matrix, threshold, rows, cols, i+1, j)</div><div class="line">        self.move(matrix, threshold, rows, cols, i-1, j)</div><div class="line">        self.move(matrix, threshold, rows, cols, i, j+1)</div><div class="line">        self.move(matrix, threshold, rows, cols, i, j-1)</div><div class="line">    def movingCount(self, threshold, rows, cols):</div><div class="line">        # write code here</div><div class="line">        matrix = [[0 for _ in range(cols)] for _ in range(rows)]</div><div class="line">        self.move(matrix, threshold, rows, cols, 0, 0)</div><div class="line">        return self.count</div></pre></td></tr></table></figure>
<h1 id="基本算法和逻辑"><a href="#基本算法和逻辑" class="headerlink" title="基本算法和逻辑"></a>基本算法和逻辑</h1><h2 id="递归和循环（recursive-amp-recurrent）"><a href="#递归和循环（recursive-amp-recurrent）" class="headerlink" title="递归和循环（recursive &amp; recurrent）"></a>递归和循环（recursive &amp; recurrent）</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>题目：大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。（n&lt;=39）<br><strong>Input：</strong></p>
<p>4</p>
<p><strong>Output：</strong></p>
<p>3</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 斐波那契数列的性质来看，通过循环或者动态规划可以轻松实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def Fibonacci(self, n):</div><div class="line">        # write code here</div><div class="line">        if n &lt;= 0:</div><div class="line">            return 0</div><div class="line">        ans = 1</div><div class="line">        pre = 1</div><div class="line">        while n &gt; 2:</div><div class="line">            temp = ans</div><div class="line">            ans = ans + pre</div><div class="line">            pre = temp</div><div class="line">            n-=1</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="普通跳台阶问题"><a href="#普通跳台阶问题" class="headerlink" title="普通跳台阶问题"></a>普通跳台阶问题</h3><p>题目：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br><strong>Input：</strong></p>
<p>4</p>
<p><strong>Output：</strong></p>
<p>5</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 斐波那契数列的简单应用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def jumpFloor(self, number):</div><div class="line">        # write code here</div><div class="line">        if number == 1:</div><div class="line">            return 1</div><div class="line">       	if number == 2:</div><div class="line">            return 2</div><div class="line">        a1 = 1</div><div class="line">        a2 = 2</div><div class="line">        ans = 0</div><div class="line">        for i in range(3, number+1):</div><div class="line">            ans = a1 + a2</div><div class="line">            a1 = a2</div><div class="line">            a2 = ans</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="跳台阶进阶问题"><a href="#跳台阶进阶问题" class="headerlink" title="跳台阶进阶问题"></a>跳台阶进阶问题</h3><p>题目：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br><strong>Input：</strong></p>
<p>2</p>
<p><strong>Output：</strong></p>
<p>2</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 不同与普通跳台阶问题，状态的转移关系到之前所有的状态累加。因此考虑t+1的状态可以表示成t状态的转移量，即1~t-1所有状态到t状态的可能性加上t到t+1状态的可能性。我们用ans表示X状态下对应的说有可能性，则t+1时刻的ans = t时刻的ans + （1~t-1）时刻的ans，而1~t-1时刻的ans又 = t时刻的ans。因此t+1时刻的ans = 2*t时刻的ans。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def jumpFloorII(self, number):</div><div class="line">        # write code here</div><div class="line">        ans = 1</div><div class="line">        for i in range(2, number + 1):</div><div class="line">            ans += ans</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h3><p>题目：给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。<br><strong>Input：</strong></p>
<p>2, 3</p>
<p><strong>Output：</strong></p>
<p>8.00000</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题如果用python的pow function可以轻易实现，如果使用循环的方式则属于考察临界条件的连乘问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def Power(self, base, exponent):</div><div class="line">        # write code here</div><div class="line">        ans = 1</div><div class="line">        if base == 0:</div><div class="line">            return 0</div><div class="line">        temp = exponent</div><div class="line">        if exponent &lt; 0:</div><div class="line">            temp = -exponent</div><div class="line">        while temp != 0:</div><div class="line">            ans *= base</div><div class="line">            temp -= 1</div><div class="line">        return ans if exponent &gt;= 0 else 1/ans</div></pre></td></tr></table></figure>
<h3 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h3><p>题目：输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。<br><strong>Input：</strong></p>
<p>{1,2,3,4,5,#,6,#,#,7}</p>
<p><strong>Output：</strong></p>
<p>4</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 典型的递归问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    def TreeDepth(self, pRoot):</div><div class="line">        # write code here</div><div class="line">        if not pRoot:</div><div class="line">            return 0</div><div class="line">        left = self.TreeDepth(pRoot.left)</div><div class="line">        right = self.TreeDepth(pRoot.right)</div><div class="line">        return max(left+1, right+1)</div></pre></td></tr></table></figure>
<h3 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a>删除链表中重复的结点</h3><p>题目：在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。<br><strong>Input：</strong></p>
<p>{1,2,3,3,4,4,5}</p>
<p><strong>Output：</strong></p>
<p>{1,2,5}</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题可以使用递归的思路解决，可以使用两个指针分别遍历链表，如果下一个指针和当前指针相同的话则跳过后者。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class ListNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.next = None</div><div class="line">class Solution:</div><div class="line">    def deleteDuplication(self, pHead):</div><div class="line">        # write code here</div><div class="line">        if not pHead or not pHead.next:</div><div class="line">            return pHead</div><div class="line">        temp = pHead.next</div><div class="line">        if temp.val != pHead.val:</div><div class="line">            pHead.next = self.deleteDuplication(temp)</div><div class="line">        else:</div><div class="line">            while pHead.val == temp.val and temp.next:</div><div class="line">                temp = temp.next</div><div class="line">            if temp.val != pHead.val:</div><div class="line">                pHead = self.deleteDuplication(temp)</div><div class="line">            else:</div><div class="line">                return None</div><div class="line">        return pHead</div></pre></td></tr></table></figure>
<h3 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h3><p>题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。<br><strong>Input：</strong></p>
<p>“ABCESFCSADEE”, 3, 4, “ABCCED”</p>
<p><strong>Output：</strong></p>
<p>true</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 3s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题是典型的DFS应用在Graph上的例子，在空间二维字符表中进行深度检索，利用动态规划的方式确定答案是否存在。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def search(self, matrix, rows, cols, path, i, j):</div><div class="line">        if not path:</div><div class="line">            return True</div><div class="line">        matrix[i*cols + j] = -1</div><div class="line">        if j+1&lt;cols and matrix[i*cols+j+1] == path[0]:</div><div class="line">            return self.search(matrix, rows, cols, path[1:], i, j+1)</div><div class="line">        elif j-1&gt;=0 and matrix[i*cols+j-1] == path[0]:</div><div class="line">            return self.search(matrix, rows, cols, path[1:], i, j-1)</div><div class="line">        elif i+1&lt;rows and matrix[(i+1)*cols+j] == path[0]:</div><div class="line">            return self.search(matrix, rows, cols, path[1:], i+1, j)</div><div class="line">        elif i-1&gt;=0 and matrix[(i-1)*cols+j] == path[0]:</div><div class="line">            return self.search(matrix, rows, cols, path[1:], i-1, j)</div><div class="line">        else:</div><div class="line">            return False</div><div class="line">    def hasPath(self, matrix, rows, cols, path):</div><div class="line">        # write code here</div><div class="line">        if not path or not matrix:</div><div class="line">            return False</div><div class="line">        for i in range(rows):</div><div class="line">            for j in range(cols):</div><div class="line">                if matrix[i*cols + j] == path[0]:</div><div class="line">                    if self.search(list(matrix), rows, cols, path[1:], i, j):</div><div class="line">                        return True</div><div class="line">        return False</div></pre></td></tr></table></figure>
<h2 id="查找和排序（search-amp-sort）"><a href="#查找和排序（search-amp-sort）" class="headerlink" title="查找和排序（search &amp; sort）"></a>查找和排序（search &amp; sort）</h2><h3 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h3><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。<br><strong>Input：</strong></p>
<p>[6501,6828,6963,7036,7422,7674,8146,8468,8704,8717,9170,9359,9719,9895,9896,9913,9962,154,293,334,492,1323,1479,1539,1727,1870,1943,2383,2392,2996,3282,3812,3903,4465,4605,4665,4772,4828,5142,5437,5448,5668,5706,5725,6300,6335]</p>
<p><strong>Output：</strong></p>
<p>154</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 3s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本体的关键条件是已排序数组，因此旋转之后的数组仍存在具有有序性。利用这个规律二分查找转折点就是最小值所在。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int minNumberInRotateArray(vector&lt;int&gt; rotateArray) &#123;</div><div class="line">        if (rotateArray.size() == 0)&#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        int first = 0;</div><div class="line">        int last = rotateArray.size()-1;</div><div class="line">        int mid = -1;</div><div class="line">        while (true)&#123;</div><div class="line">            if (last - first == 1)&#123;</div><div class="line">                mid = last;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            mid = first + (last - first) / 2;</div><div class="line">            if (rotateArray[mid] &lt;= rotateArray[last])&#123;</div><div class="line">                last = mid;</div><div class="line">            &#125;</div><div class="line">            if (rotateArray[mid] &gt;= rotateArray[first])&#123;</div><div class="line">                first = mid;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return rotateArray[first];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组中出现次数超过一半的数"><a href="#数组中出现次数超过一半的数" class="headerlink" title="数组中出现次数超过一半的数"></a>数组中出现次数超过一半的数</h3><p>题目：数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字，如果不存在则输出0。<br><strong>Input：</strong></p>
<p>{1,2,3,2,2,2,5,4,2}</p>
<p><strong>Output：</strong></p>
<p>2</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题属于经典题目之一，其解法和思路多种多样，包括最基本的排序取中间值；每次删除2个不同的元素，以及利用两个变数candidate和nTime来动态规划。遍历数组，利用candidate参数记录一个元素，并用nTime参数记录当前该元素出现次数，如果下一个相同则nTime加1，否则减1。直到nTime等于0，candidate替换成下一个出现的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def MoreThanHalfNum_Solution(self, numbers):</div><div class="line">        # write code here</div><div class="line">        if not numbers:</div><div class="line">            return 0</div><div class="line">        if len(numbers) == 1:</div><div class="line">            return numbers[0]</div><div class="line">        numbers = sorted(numbers)</div><div class="line">        n = len(numbers)</div><div class="line">        if n % 2 == 0:</div><div class="line">            if numbers[int(n / 2)] == numbers[int(n / 2) - 1]:</div><div class="line">                return numbers[int(n / 2)]</div><div class="line">        else:</div><div class="line">            if numbers[int(n / 2)] == numbers[int(n / 2) + 1]:</div><div class="line">                return numbers[int(n / 2)]</div><div class="line">        return 0</div></pre></td></tr></table></figure>
<h3 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h3><p>题目：输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。<br><strong>Input：</strong></p>
<p>{10,5,12,4,7}, 22</p>
<p><strong>Output：</strong></p>
<p>[[10,5,7],[10,12]]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 求和为定值的问题最先想到的应该是利用递归的方式考虑所有可能路径数字组合的DFS问题。只是这次的数据结构换成了二叉树，因此搜索的方向变成了树的深度方向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    # 返回二维列表，内部每个列表表示找到的路径</div><div class="line">    def FindPath(self, root, expectNumber):</div><div class="line">        # write code here</div><div class="line">        if not root:</div><div class="line">            return []</div><div class="line">        if root and not root.left and not root.right and root.val == expectNumber:</div><div class="line">            return [[root.val]]</div><div class="line">        res = []</div><div class="line">        left = self.FindPath(root.left, expectNumber - root.val)</div><div class="line">        right = self.FindPath(root.right, expectNumber - root.val)</div><div class="line">        for i in left+right:</div><div class="line">            res.append([root.val] + i)</div><div class="line">        return res</div></pre></td></tr></table></figure>
<h3 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a>数字在排序数组中出现的次数</h3><p>题目：统计一个数字在排序数组中出现的次数。<br><strong>Input：</strong></p>
<p>[1,2,3,3,3,3,4,5], 3</p>
<p><strong>Output：</strong></p>
<p>4</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 一个典型的利用二分查找的思路。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def GetNumberOfK(self, data, k):</div><div class="line">        # write code here</div><div class="line">        if len(data) == 0:</div><div class="line">        	return 0</div><div class="line">        left = 0</div><div class="line">        right = len(data)-1</div><div class="line">        while left &lt;= right:</div><div class="line">            mid = int(left + (right - left) / 2)</div><div class="line">            if data[mid] == k:</div><div class="line">                first, last = mid, mid</div><div class="line">                if data[first] == data[0]:</div><div class="line">                    first = 0</div><div class="line">                else:</div><div class="line">                    while data[first - 1] == k:</div><div class="line">                        first -= 1</div><div class="line">                if data[last] == data[-1]:</div><div class="line">                    last = len(data) - 1</div><div class="line">                else:</div><div class="line">                    while data[last + 1] == k:</div><div class="line">                        last += 1</div><div class="line">                return last - first + 1</div><div class="line">            elif data[mid] &gt; k:</div><div class="line">                right = mid - 1</div><div class="line">            else:</div><div class="line">                left = mid + 1</div><div class="line">        return 0</div></pre></td></tr></table></figure>
<h3 id="和为定值的连续正数序列"><a href="#和为定值的连续正数序列" class="headerlink" title="和为定值的连续正数序列"></a>和为定值的连续正数序列</h3><p>题目：小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!<br><strong>Input：</strong></p>
<p>3</p>
<p><strong>Output：</strong></p>
<p>[[1,2]]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题可以使用双指针的思路解决。一大一小两个指针分别位移，终止条件为小指针大于总数的一半（两个数都大于一半和一定超过总数）。因为是连续的，因此如果大小指针和小于总数，只要把大指针加1继续扩大和就行，同时当前总数加上新的值。如果等于总数，则输出小指针到大指针之间的所有数。如果当前总数大于总数，则小指针加1，同时当前总数减去新的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def FindContinuousSequence(self, tsum):</div><div class="line">        # write code here</div><div class="line">        if tsum &lt; 3:</div><div class="line">            return []</div><div class="line">        small = 1</div><div class="line">        big = 2</div><div class="line">        ans = []</div><div class="line">        cur = small + big</div><div class="line">        stop = int((1 + tsum) / 2)</div><div class="line">        while small &lt; stop:</div><div class="line">            if tsum == cur:</div><div class="line">                ans.append(list(range(small, big+1)))</div><div class="line">                big += 1</div><div class="line">                cur += big</div><div class="line">            elif tsum &gt; cur:</div><div class="line">                big += 1</div><div class="line">                cur += big</div><div class="line">            else:</div><div class="line">                cur -= small</div><div class="line">                small += 1</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="和为定制的两个数"><a href="#和为定制的两个数" class="headerlink" title="和为定制的两个数"></a>和为定制的两个数</h3><p>题目：输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。<br><strong>Input：</strong></p>
<p>[1,2,4,7,11,15], 15</p>
<p><strong>Output：</strong></p>
<p>[4,11]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 因为数组为递增排序的数组，因此考虑使用大小指针进行解答。另外需要判断输出的多样性，需要对所有结果进行乘积的比较。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def FindNumbersWithSum(self, array, tsum):</div><div class="line">        # write code here</div><div class="line">        if len(array) == 0:</div><div class="line">            return []</div><div class="line">        if len(array) == 1:</div><div class="line">            return array[0]</div><div class="line">        left = 0</div><div class="line">        right = len(array) - 1</div><div class="line">        ans = []</div><div class="line">        flag = True</div><div class="line">        while left &lt; right:</div><div class="line">            cur = array[left] + array[right]</div><div class="line">            if tsum == cur:</div><div class="line">                if flag:</div><div class="line">                    temp = array[left] * array[right]</div><div class="line">                    flag = False</div><div class="line">                    ans = [array[left], array[right]]</div><div class="line">                else:</div><div class="line">                    if array[left] * array[right] &lt; temp:</div><div class="line">                        temp = array[left] * array[right]</div><div class="line">                        ans = [array[left], array[right]]</div><div class="line">                left += 1</div><div class="line">                right -= 1</div><div class="line">            elif tsum &gt; cur:</div><div class="line">                left += 1</div><div class="line">            else:</div><div class="line">                right -= 1</div><div class="line">        return ans</div></pre></td></tr></table></figure>
<h3 id="二叉树的分层列印"><a href="#二叉树的分层列印" class="headerlink" title="二叉树的分层列印"></a>二叉树的分层列印</h3><p>题目：从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。<br><strong>Input：</strong></p>
<p>{8,6,10,5,7,9,11}</p>
<p><strong>Output：</strong></p>
<p>[[8],[6,10],[5,7,9,11]]</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 二叉树的分层打印是经典算法之一，其主要思想是在传统的BFS算法基础上维护两个变量来判断换行的条件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    # 返回二维列表[[1,2],[4,5]]</div><div class="line">    def Print(self, pRoot):</div><div class="line">        # write code here</div><div class="line">        if not pRoot:</div><div class="line">            return []</div><div class="line">        queue = [pRoot]</div><div class="line">        last = pRoot</div><div class="line">        nlast = pRoot</div><div class="line">        res, cand = [], []</div><div class="line">        while len(queue) != 0:</div><div class="line">            temp = queue.pop(0)</div><div class="line">            cand.append(temp.val)</div><div class="line">            if temp.left:</div><div class="line">                queue.append(temp.left)</div><div class="line">                nlast = temp.left</div><div class="line">            if temp.right:</div><div class="line">                queue.append(temp.right)</div><div class="line">                nlast = temp.right</div><div class="line">            if last == temp:</div><div class="line">                last = nlast</div><div class="line">                res.append(cand)</div><div class="line">                cand = []</div><div class="line">        return res</div></pre></td></tr></table></figure>
<h3 id="二叉检索树的第k大节点"><a href="#二叉检索树的第k大节点" class="headerlink" title="二叉检索树的第k大节点"></a>二叉检索树的第k大节点</h3><p>题目：给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。<br><strong>Input：</strong></p>
<p>{5,3,7,2,4,6,8}</p>
<p><strong>Output：</strong></p>
<p>4</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 本题利用了二叉检索树的性质，就是左子树的节点小于根节点小于右子树的节点。根据这个规律利用中序遍历的方式可以得到排序后的节点数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># class TreeNode:</div><div class="line">#     def __init__(self, x):</div><div class="line">#         self.val = x</div><div class="line">#         self.left = None</div><div class="line">#         self.right = None</div><div class="line">class Solution:</div><div class="line">    # 返回对应节点TreeNode</div><div class="line">    def middle_traversal(self, root, ans):</div><div class="line">        if not root:</div><div class="line">            return</div><div class="line">        self.middle_traversal(root.left, ans)</div><div class="line">        ans.append(root)</div><div class="line">        self.middle_traversal(root.right, ans)</div><div class="line">    def KthNode(self, pRoot, k):</div><div class="line">        # write code here</div><div class="line">        ans = []</div><div class="line">        self.middle_traversal(pRoot, ans)</div><div class="line">        if k &lt;= 0 or len(ans) &lt; k:</div><div class="line">            return None</div><div class="line">        return ans[k-1]</div></pre></td></tr></table></figure>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><p>题目：输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。<br><strong>Input：</strong></p>
<p>6</p>
<p><strong>Output：</strong></p>
<p>2</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 看到二进制问题首先想到的应该是位运算，将数字n右移一位的结果和1作and位运算，就可以知道当前位是否为1。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def NumberOf1(self, n):</div><div class="line">        # write code here</div><div class="line">        return sum([(n &gt;&gt; a &amp; 1) for a in range(32)])</div></pre></td></tr></table></figure>
<h3 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h3><p>题目：写一个函数，求两个整数之和，要求在函数体内不得使用+、-、<em>、/四则运算符号。<br><em>*Input：</em></em></p>
<p>4, 5</p>
<p><strong>Output：</strong></p>
<p>9</p>
<p><strong>Requirement：</strong></p>
<p>Time limit = 1s, Space limit = 32768K</p>
<p><strong>思路：</strong> 经典的位运算运用，两个数的加法等于两数的xor加上2*两书的and。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">class Solution:</div><div class="line">    def Add(self, num1, num2):</div><div class="line">        # write code here</div><div class="line">        return (num1 ^ num2) + ((num1 &amp; num2) &lt;&lt; 1)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要考点涵盖了基本数据结构，基础逻辑和算法应用以及智力题。&lt;/p&gt;
&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;主要考察数据结构在现实算法中的实际应用和变形转换。
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>New GANs(对抗生成网络)</title>
    <link href="http://yoursite.com/2017/10/17/GAN/"/>
    <id>http://yoursite.com/2017/10/17/GAN/</id>
    <published>2017-10-17T15:55:32.000Z</published>
    <updated>2017-11-30T12:06:13.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍（Introduction）"><a href="#介绍（Introduction）" class="headerlink" title="介绍（Introduction）"></a>介绍（Introduction）</h1><p>当今AI时代在人工智慧领域取得许多伟大的突破，其中机器学习与深度学习等计算机算法的崛起更是带来了一波又一波的浪潮。如今的深度学习模型已经数不胜数，而Generative Adversarial Network就是其中耀眼的一部分。在Quora上Facebook的AI研究团队主任Yann LeCun说了这样一句话：<strong>“Adversarial training is the coolest thing since sliced bread.”</strong></p>
<ul>
<li>说起GAN的种类，可谓是层出不穷：<br><a href="https://github.com/hindupuravinash/the-gan-zoo" target="_blank" rel="external">https://github.com/hindupuravinash/the-gan-zoo</a></li>
<li>在训练GAN网络的同时也存在许多Tricks:<br><a href="https://github.com/soumith/ganhacks" target="_blank" rel="external">https://github.com/soumith/ganhacks</a></li>
</ul>
<h1 id="用途（Usage）"><a href="#用途（Usage）" class="headerlink" title="用途（Usage）"></a>用途（Usage）</h1><ul>
<li><code>Drawing</code><br><a href="https://zhuanlan.zhihu.com/p/24767059" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24767059</a></li>
<li><code>Writing Poems</code></li>
</ul>
<h1 id="主要思想（Basic-Idea）"><a href="#主要思想（Basic-Idea）" class="headerlink" title="主要思想（Basic Idea）"></a>主要思想（Basic Idea）</h1><p>GAN的本质和大多数的神经网络模型一样,都是通过一系列Function的变化来拟合输入和输出的关系。GAN内部可以分为两个部分：1、Generator 2、Discriminator ，顾名思义Generator的职责就是根据输入的Vector中所隐含的Feature信息来生成结果所需要的形式（如图片或文字等）。</p>
<h2 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h2><ul>
<li><code>Input</code> : Vector</li>
<li><code>Hidden</code> : NN or Function</li>
<li><code>Output</code> : Image or Text …</li>
</ul>
<p>Generator的输入为一个固定维度的Vector，经过隐藏层的变化之后得到相应的输出。而这个隐藏层内部可以是一个<strong>神经网络（Neural Network）</strong> 或者是一个 <strong>方法（Function）</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/3HJh3Vq.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如图所示，Input端的Vector中不同的Feature会有不同的含义，而它们都决定了最终结果输出时候所具有的<strong>某个特征</strong>（Each dimension of input vector represents some characteristics）。只是这个特征被计算机量化成了一个人为无法辨识的数字罢了。只要能够掌握这些Features所代表的<strong>特征含义</strong>，我们就能够根据<strong>自己的意愿</strong>来调整结果的形态了。</p>
<ul>
<li><strong>Tips：</strong> 我们可以通过改变特征值来改变特征在结果中的表现。这个侧面说明了特征feature在数值上是连续的。只有当信号在一定区间范围内是<strong>连续的分布</strong>时，我们才能根据自己的意愿去调整特征的表象。</li>
</ul>
<h2 id="判别器（Discriminator）"><a href="#判别器（Discriminator）" class="headerlink" title="判别器（Discriminator）"></a>判别器（Discriminator）</h2><ul>
<li><code>Input</code> : Image or Text …</li>
<li><code>Hidden</code> : NN or Function</li>
<li><code>Output</code> : Scalar (Always normalize to 0~1)</li>
</ul>
<p>Discriminator的结构和Generator类似，只是它的输入转而变成了Generator所产生的输出而已。输入同样经过一系列隐藏层（NN或Function）得到相应的结果，而结果是一个Scalar，表示<strong>对输入的评价</strong>（Larger value means real, smaller value means fake）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/qLfZcNo.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="GAN网络-GAN-Network"><a href="#GAN网络-GAN-Network" class="headerlink" title="GAN网络(GAN Network)"></a>GAN网络(GAN Network)</h2><p>GAN的工作原理就是依靠生成器和判别器的对抗来让彼此变得更强，一个类似进化论的概念。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/JH5nUxS.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>以图中的例子来说：生成器不断产生不同的图片，然后由初代的判别器判断图片的好坏，直到能够符合第一代的判别器的要求。这时判别器已经<strong>没有能力再去打击生成器</strong>说它不够强大了，而这个情况并不是判别器想要看到的，于是它只能通过利用Real Images来训练我们的判别网络，使之<strong>进化</strong>到L2，而此时生成器也需要继续改变才能适应新的判别器的判别方式。就这样一方越来越好，一方越来越严格，<strong>两个模型都在不断变得更强</strong>（This is where the term “adversarial” comes from）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/E6Xi2Xl.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="为什么需要GAN（Why-GAN）"><a href="#为什么需要GAN（Why-GAN）" class="headerlink" title="为什么需要GAN（Why GAN）"></a>为什么需要GAN（Why GAN）</h1><p>了解了GAN的运作机制后，很多人可能会有这样一些疑问：</p>
<h2 id="Why-generator-cannot-learn-by-itself"><a href="#Why-generator-cannot-learn-by-itself" class="headerlink" title="Why generator cannot learn by itself"></a>Why generator cannot learn by itself</h2><ul>
<li><strong>Question1</strong> ： 既然生成器能够生成物件，那么为什么生成器不自己学习那些Real images呢？</li>
</ul>
<p><strong>第一个问题是：</strong> 我们的Generator是从随机的code信息中生成相应的物件（object），但是这些<strong>code又从何而来</strong>呢？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/DuJAJr1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们可以借助Auto-Encoding的方式来帮助找寻code。利用encoder和decoder的联合作用，就能够利用已知的数据产生数据表示向量，也就是我们的code。</p>
<p><strong>第二个问题是：</strong> 我们已经解决了code的来源问题，那么针对code中不同的Feature我们虽然能够准确辨识，但是对于结果的Feature Representation而言都太过绝对了。一个值表示一个特征，如果我们想要的特征不在这些Code向量的表示范围内，应该如何改变它们呢？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/dVJEQG0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个时候直觉的做法应该是找两个最<strong>接近</strong>这个特征的其他特征，然后通过<strong>加权组合</strong>来建构新的特征。而这种方式可以通过VAE来实现：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/pt3i9UX.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Variational Auto-encoder通过将Auto-encoder中encoder生成的code向量进行维度的拆分。利用一部分特征维度来进行<strong>分布扩散</strong>，最后和剩下的保留维度特征进行加总得到一个新的code向量。</p>
<ul>
<li>为什么要这么做呢？它的结果又会对Feature Representation造成哪些影响呢？</li>
</ul>
<p>我们可以通过下面这种图来理解：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/LYWAFnw.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>传统的Auto-encoder让我们每一个Feature都能够对应结果产生的某一个特定的Feature Representation，但是相对的浮动范围却很有限（相当于一个个<strong>离散的点</strong>）。如果Feature的向量和真实的向量存在<strong>些许偏差</strong>，产生的code将无法表示成为特定的Representation。而VAE将某些<strong>特征向量的分布进行了拓展</strong>，使得<strong>原本离散的点在一定范围内连续了起来</strong>。这样即使code的特征向量存在偏差，还是能够运用这些偏差进行调试。此外<strong>最关键的一点</strong>，如果让两个向量的特征拓展后存在交集，那么<strong>交集上的特征将具有两个特征的加权组合结果</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vector -&gt; Encoder -&gt; Low dimension code + Noise -&gt; decoder -&gt; Vector</div></pre></td></tr></table></figure>
<ul>
<li>那么回归问题，既然这些问题都解决了，还存在什么使得GAN的Generator不能自己训练呢？</li>
</ul>
<p>那么就是所谓的<strong>第三个问题了：</strong> 原来，如果直接训练我们的神经网络让他来自行判断并产生objects，势必会存在这样的问题——结果越像训练资料越好（这是SGD的想法）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/mh6jOyu.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>图中上半部分由于改变了一个新的像素点，因此误差error = 1，神经网络觉得是比较好的结果，但是在人为看来却不再是2这个数字了；相对的下半部分结果多了6个像素点error = 6，神经网络觉得它不够优秀，需要重新训练，但是在人为的角度却是ok的。</p>
<ul>
<li>导致这种问题的原因在于，我们的神经网络输出层往往是根据结果的类别所建立的one-hot vector，而这就使得结果的层级之间处于相对平行的状态，层内的neuron之间无法相互传递信息所导致的：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/pvOvZv4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>neuron之间无法沟通就会使得输出结果<strong>无法掌握全局的最优</strong>情况。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/4ofbgc3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上图是Generator产生的two-dimension的one-hot vector。从结果可以看出，在X2的坐标轴上，蓝点的分布十分散乱，这是因为神经网络在考虑输出的时候，负责输出X2结果的neuron没有考虑X1的分布情况；相对的X1的情况也是一样。</p>
<p><strong>因此</strong>，我们迫切需要一个能够将输出结果进行统整的结构，而最适合的结构就是神经网络了。因此我们<strong>引入了Discriminator来整合Generator的输出结果</strong>。</p>
<h2 id="Why-discriminator-don’t-generate-object-itself"><a href="#Why-discriminator-don’t-generate-object-itself" class="headerlink" title="Why discriminator don’t generate object itself"></a>Why discriminator don’t generate object itself</h2><ul>
<li><strong>Question2</strong> ： 既然判别器能够学习什么样的物件是好的物件，那为什么判别器不自己生成物件呢？</li>
</ul>
<p>判别器在训练过程中，我们通过Real Data作为输入来让它能够识别好的物件：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/iqhoAGe.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><p>但是这种训练只能让模型拟合好的例子，对于不好的例子随着训练的进行模型会一直降低它们的分数（Scalar），到最后模型就成为了一个<strong>二分类器了</strong>（只有0和1），显然这个不是我们想要的结果。</p>
</li>
<li><p>如何选择negative examples呢？</p>
</li>
</ul>
<p>我们不能够选择那些距离real sample很远的examples作为反面例子，而是需要选择<strong>尽可能接近的</strong>作为反面教材，因为只有这样模型才能学到细致的区分特性。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/TTe5Zhw.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们还需要给我们的模型一些<strong>反面的训练数据</strong>，好让它能够预测scalar值介于0和1之间的情况从而进行SGD的动态更新。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/OrbOJnv.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>总而言之就是判别器比起生成器无法保证每次产生的结果都能够用在提升模型效能，特别是在模型的结构是“Deep”的时候。另一个重要的一点就是我们可以通过Argmax函数确定好的模型，但是却 <strong>无法判断哪些生成的图片是不好的（Difficult to recognize the negative sampling）</strong> 。(因为不够灵活，不符合训练资料的很难判定为好的图片)</p>
<h2 id="How-discriminator-and-generator-interact"><a href="#How-discriminator-and-generator-interact" class="headerlink" title="How discriminator and generator interact"></a>How discriminator and generator interact</h2><ul>
<li><strong>Question3</strong> ： 判别器和生成器之间是如何互动的呢？</li>
</ul>
<p>GAN神经网络被广泛应用在<strong>Structured Learning</strong>领域中，而这种机器学习方式的可靠指出在于它能够适应更加复杂的环境。对于<strong>One-shot、Zero-shot Learning</strong>的问题上，传统的机器学习分类模式讲究的是利用监督式学习的方法用大量例子来拟合网络结构。而Structured Learning除了能够拟合那些带有Label的数据外，还能够在输出范围较大的时候<strong>主动去尝试拟合</strong>那些模型从未处理过的数据类别。从而<strong>创造出全新的类别成员</strong>，因此该学习方式也要求模型的结构更加智能。</p>
<p>利用Structured Learning的这些特性，我们就能够将两个神经网络结合进行训练，让他们彼此竞争相互学习，最后双双得到提升。</p>
<ul>
<li><strong>General Algorithm</strong></li>
</ul>
<p>在训练两个网络的时候，我们通过一些positive examples和由Generator随机生成的negative examples来作为训练数据。在每个迭代中，利用positive examples训练Discriminator，将数据标记为1。然后将Generator生成的negative examples标记成0，利用Gradient Ascent的方式提升GAN网络的最大似然结果（argmax）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/v1N0tD7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Gradient Ascent是用来提高Generator产生结果的最大似然分数（scalar），如果评估标准换成计算Discriminator的反馈和Generator生成结果之间的误差时，则用的是Gradient Descent。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ktbNjER.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="如何提升GAN的效能（How-to-improve-GAN）"><a href="#如何提升GAN的效能（How-to-improve-GAN）" class="headerlink" title="如何提升GAN的效能（How to improve GAN）"></a>如何提升GAN的效能（How to improve GAN）</h1><p>了解了GAN的用途之后，我们就要开始了解如何才能提升GAN的效能，GAN的种类有很多，不同的GAN网络具有自己独特的功能。但是在训练过程中仍然有一些细节是共通的。</p>
<h2 id="Binary-classifier-as-Discriminator"><a href="#Binary-classifier-as-Discriminator" class="headerlink" title="Binary classifier as Discriminator"></a>Binary classifier as Discriminator</h2><p>训练效果的好坏只是评估模型的学习能力如何，关键还是要看在实战（Testing）中的表现。为了能让模型更灵活而不仅仅是依赖于训练资料，我们要防止过拟合的出现。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/jNBZ9Jp.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>那么防止过拟合的方法又可以有哪些呢？</p>
<h2 id="Least-Square-GAN（LSGAN）"><a href="#Least-Square-GAN（LSGAN）" class="headerlink" title="Least Square GAN（LSGAN）"></a>Least Square GAN（LSGAN）</h2><p>首先想到的应该就是用线性的方法取代传统的非线性模型，用简化边缘区分度的方式来防止过拟合的出现。而将传统二分类的Sigmoid function换成Linear的方式就是LSGAN的做法，即利用最小二乘法拟合一条直线来对样本进行分类。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/aR05euq.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Wasserstein-GAN（WGAN）"><a href="#Wasserstein-GAN（WGAN）" class="headerlink" title="Wasserstein GAN（WGAN）"></a>Wasserstein GAN（WGAN）</h2><p>既然Discriminator是将real data的结果当成1，而来自Generator的结果当成0，那么就必然希望real data训练出来的分数越大越好，Generator产生结果的分数越小越好。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/upBP2iP.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>Original WGAN</strong>的做法势必会带来一些问题：</p>
<ul>
<li><p>Generator的学习过程是有一定的幅度的，根据<strong>Shrinkage</strong>的想法每次走一小步的结果去逼近最终答案比起每次走一大步去逼近更容易防止过拟合。因此我们要求Discirminator的分类曲线的区分度需要满足1-Lipschitz function（利普希茨函数）。</p>
</li>
<li><p>对优越值的无限优化会导致模型无法收敛。</p>
</li>
<li><p>过大的误差反而会增大Generator的学习负担，入不敷出。因此我们会选择设定一个阈值，当超过这个阈值的时候我们就利用Clipping的方式将值重置为阈值。这就是<strong>Improved WGAN</strong>模型的思想。</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/cf2TtUT.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="Lipschitz-function-利普希茨函数"><a href="#Lipschitz-function-利普希茨函数" class="headerlink" title="Lipschitz function(利普希茨函数)"></a>Lipschitz function(利普希茨函数)</h3><p>该函数要求函数满足算子：</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large ||D(x _{1}) - D(x _{2})|| \leq K ||x _{1} - x _{2}||" style="border:none;"></p>
<p>而1-Lipschitz 就是当K=1时的函数。从函数关系式不难看出需要满足这个的条件就是在任意时刻函数的斜率不能高于1。</p>
<h3 id="Sentence-Generation-Real-sentence-V-S-WGAN"><a href="#Sentence-Generation-Real-sentence-V-S-WGAN" class="headerlink" title="Sentence Generation(Real sentence V.S. WGAN)"></a>Sentence Generation(Real sentence V.S. WGAN)</h3><p>我们用one-hot vector表示句子：</p>
<p><strong>Real sentence:</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/UguRdtq.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><strong>Generator:</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/4JmnKrn.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>可以看出利用三角函数进行分类的WGAN在句子生成上能够做到比较好的效果。</p>
<h2 id="Loss-sensitive-GAN-LSGAN"><a href="#Loss-sensitive-GAN-LSGAN" class="headerlink" title="Loss-sensitive GAN(LSGAN)"></a>Loss-sensitive GAN(LSGAN)</h2><p>传统的WGAN会无限提升优质物件的scalar并且降低不理想物件的scalar值，这样训练的结果会让模型变得异常严格，难以客观评估。因此Loss-sensitive GAN就提出了利用<strong>分布式拟合</strong>的方法一步步逼近最终的结果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/dV7AZrt.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><p>我们可以先定义一个“好”的标准，并把生成器的结果编辑为“不好”。利用每一次训练慢慢减小这两者之间的差距。然后再将原先“好”的标准定义为“不好”，把更接近real data的图片定义为“好”，如此一点点进步。</p>
</li>
<li><p>利用LSGAN训练需要保证两极端值不能无限增长和下降，因此需要辅助以Improved WGAN或者Energy-based GAN作为Discriminator的训练瞄准。</p>
</li>
</ul>
<h2 id="Energy-based-GAN-EBGAN"><a href="#Energy-based-GAN-EBGAN" class="headerlink" title="Energy-based GAN(EBGAN)"></a>Energy-based GAN(EBGAN)</h2><p>如果一个物件足够优秀并且特征明确，我们就一定能够通过autoencoder的方式提取code特性。Energy-based GAN的Discriminator正式利用了autoencoder的方式进行训练的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/l4yYXxR.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们的目的是要最大化结果scalar X，从而使误差为0。与WGAN不同的是，利用autoencoder训练的Discriminator会尽可能让优化区间在一个<strong>有限</strong>的区间内增长。对于下降的趋势不需要太过强烈，同样通过clipping的方式进行修剪：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/tidc0Ip.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>EBGAN的训练过程中，我们会分成两个部分，最大化Real object，和最小化Gen object。而我们设置一个region来限制对gen的惩罚，因为惩罚远比reconstruct要容易，而因为这个限制，我们的模型最后只能通过提高Real object的值来更新参数。</li>
</ul>
<p>如此一来通过Gen区间不断向Real Data移动，最终得到一个有限的区间就是所谓的“优秀区间”。为了避免区间之间的过度太剧烈，同样能够让评估曲线满足Lipschitz function的条件。</p>
<h1 id="如何评估GAN的结果好坏（Evaluation）"><a href="#如何评估GAN的结果好坏（Evaluation）" class="headerlink" title="如何评估GAN的结果好坏（Evaluation）"></a>如何评估GAN的结果好坏（Evaluation）</h1><p>对于模型结果的评估，通常利用连个指标来区分，其中一个就是<strong>Likelihood</strong>，而另一个是<strong>Quality</strong>。</p>
<ul>
<li>Likelihood顾名思义就是生成的Object和Real Data特征分布的相似程度。</li>
<li>Quality则是指生成的Object中优秀样本的多少，无需和Real Data完全相似，而是关注训练样本本身是否优秀。</li>
</ul>
<p>如下列举两种极端条件：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/FkPZQzY.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图所示，生成样本和评估样本结果的相似度为0，但是其样本本身的质量OK。也就是生成器完全没有学习特征的匹配，而是尽可能提升结果的质量。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/TERNFKa.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>相对而言对于模型训练相似度高的模型，如果换一种新的样本主题（不同的特征组合），那么结果就会急速下降。也就是模型本身过于拟合那些特征的分布，而忽略了灵活变通的能力。</p>
<ul>
<li>有了上面两个例子，我们所要得到的就是介于两者之间，既能够一定程度上还原样本的特征分布，又能产生不错的结果的模型。</li>
</ul>
<h1 id="为什么GAN很难训练"><a href="#为什么GAN很难训练" class="headerlink" title="为什么GAN很难训练"></a>为什么GAN很难训练</h1><p>我们的generator能够产生一个范围作为它自身认为的正确的范围，然后通过和正确结果的范围误差来缩小距离（likelihood）。如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/J4eNy6M.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>但是generator无法计算两者之间的差距，因此需要Discriminator来判断两者是否相似，然后通过不同的GAN模型来达成不同的判别器的目的，用来以不同的方式评估范围的差距，然后更新范围。因此不同的GAN就是用不同的方法来实作error的计算。panelty的不同会让两者形状更新不同，谁包含谁范围会不一样大。</p>
<ul>
<li>那么GAN的训练究竟有那些难点呢？</li>
</ul>
<p>选择一个合适的结构来表示我们的feature是十分重要的，因为这个关系到optimizer对结果优化时候计算误差的标准。不同的标准带来的结果也不一样：</p>
<ul>
<li>Jensen–Shannon divergence（JSD）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/gaHxy42.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/qknd7jy.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/72TTfky.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>JSD利用传统的KL散度（Kullback–Leibler divergence）来衡量两个几率分布之间的差异性。因而也被称作<strong>information radius (IRad)</strong> 或 <strong>total divergence to the average</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/pejHfsi.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>由图中可以看出：JS计算相似度的时候关注的是数值本身的差异性，而忽略了数值之间的相对距离因素。所以如果使用JSD进行评估的话，会导致样本训练过程中无法判断模型训练趋势的好坏。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/LF1aUSa.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Earth Mover’s Distance（EMD）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/hn804Zn.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>EMD与JSD都是评估两个几率分布的差异性，不同的是EMD通过region D计算两个样本之间的相对距离，从而反应从一个样本转换到另一个样本的cost。这种评估方式无意可以让训练的reward变得清晰。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/l7ohobS.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="Conditional-GAN"><a href="#Conditional-GAN" class="headerlink" title="Conditional GAN"></a>Conditional GAN</h1><p>条件生成模型顾名思义就是能够按照我们设定的条件参数来动态生成一些相关的物件特征的模型。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/Ziam2Aw.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图所示，我们输入的特征给Generator的Noise不再只是一连串毫无关联的特征向量，而是含有一些人为标记的<strong>条件参数</strong>。</p>
<p>要实现Conditional Generation需要具备一些要求。</p>
<h2 id="Modifying-Input-Code"><a href="#Modifying-Input-Code" class="headerlink" title="Modifying Input Code"></a>Modifying Input Code</h2><p>要想让生成器产生的资料具有人为规定的特定特征表现，最直观的思维就是理解Input Code中每一个变量对应的含义，然后有选择性地改变它们。为此就衍生出了所谓的<strong>InfoGAN</strong>。</p>
<h3 id="InfoGAN"><a href="#InfoGAN" class="headerlink" title="InfoGAN"></a>InfoGAN</h3><p>我们通过可视化模型特征向量可以在维度空间中构建特征的表示（Representation）。我们理想中的特征往往是均匀分布的，然而事实真是如此吗？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/FnrwtHR.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>事实上特征的分布比我们想象的还要杂乱，并不容易发现其中的关联性。例如改变了一个特征对结果没有变化，而改变两个特征结果却发生了变化，然而单独改变其中一者又会是另外一种结果。因此对于这些众多的特征组合，我们应该如何发现其中有用的信息呢？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/75q09l4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通过训练一个decoder来对特征进行压缩，其结果就是生成能够有效还原物件本身的特征集合（Code）。如图所示：Z的特征包括了有用的c和没用的特征Z’，通过autoencoder的方式能够利用X重新生成X。而训练的过程中，我们的classifier得到的中间产物（hidden layer output）就包含了我们所要的特征集合（Code）。通过共享decoder和Discriminator input part的参数，我们就能够完美的将X的特征毫无泄漏地输入Discriminator中。</p>
<ul>
<li>AutoEncoder还可以用来解决特征消失和模型缺口的问题（Mode Collapse）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/kCcFoFQ.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如图所示，我们模型在训练过程中会根据自身参数选择特征，而如果对特征的前处理不够完整，模型可能会遗漏掉一些重要的特征，这个过程就被称为“Missing Mode”。而为了避免这种问题，我们就可以使用infoGAN的方式来对特征进行前处理。</p>
<h2 id="Controlling-By-Input-Objects"><a href="#Controlling-By-Input-Objects" class="headerlink" title="Controlling By Input Objects"></a>Controlling By Input Objects</h2><p>Input Data的不同种类也会对训练模型产生不同程度的影响。一般的Input可以分为3个类别：Paired data、Unpaired data、Unsupervised。</p>
<h3 id="Paired-Data"><a href="#Paired-Data" class="headerlink" title="Paired Data"></a>Paired Data</h3><p>传统的监督式学习就是使用了Paired Data，一个pair包含了input和label两个部分。以依照描述生成图片为例：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/Aw35RPg.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果输入包括了input：Description 和 label：image。这时候Traditional Supervised Learning就会通过训练学习文字和图片之间的对应关系。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/vmqNkzX.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Traditional Supervised Neural Network通过设定输入为一段描述，输出为一张对应的图片。通过梯度下降的方式拟合描述的文字和图片之间的权重。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ENtDXOp.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>测试时同样输入一段描述，根据权重生成图片。而这个图片往往是所有满足该描述的图片的加权平均结果，因此会是一个相对模糊的结果（Blurry Result）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/899BYmb.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>GAN的方式不同与传统的监督式神经网络拟合描述和图片，而是利用生成器生成一个分布表示描述下所有可能图片的出现条件。然后用判别器判断新的描述是否落在分布的合理位置。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/rRe88if.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果输入包括Image和Distribution，则我们的判别器不单单是判断图片产生的好不好，还会挖掘描述和图片之间的关联程度，依照关联度判断是否输出相应的图片。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/fRqZLsu.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图所示，利用条件分布来表示图片和描述是GAN的一个优势所在。不同与Traditional Supervised Learning只是单纯建立描述到图片的映射关系，GAN网络还能判断从图片到描述的关联程度。我们还可以将判别器产生的结果加入训练资料来完善分布曲线。</p>
<h3 id="Unpaired-Data"><a href="#Unpaired-Data" class="headerlink" title="Unpaired Data"></a>Unpaired Data</h3><p>除了成对存在的Paired Data之外，还存在一些原本只有单独出现的数据，通过对数据本身进行一些改变而生成另一组数据，这样的数据在原先的训练集中并不存在（没有label），因此称之为<strong>Unpaired Data</strong>。</p>
<ul>
<li>以图片的风格转换为例：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/BZ283yx.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上图中展示了两种不同风格的图片，每种图片具有自己的Datasets，我们需要利用这些data将Domain X的图片转换成Domain Y的图片。</p>
<p>如果按照GAN的训练思路来看，我们可能很容易想到下面的训练方式：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/YqZ2dJk.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通过Generator训练生成随机的图片（即随意改变原先图片的像素值）。然后通过Discriminator来判断生成的图片和Domain Y图片的相似程度。但是这样的方式存在一个很大的问题：</p>
<ul>
<li>在判别器的作用下，为了让判别器觉得产生的图片好，因此生成器可能选择完全无视Input的图片，只需要致力于生成带有特定Feature的Output，这样就会偏离我们的目的。为了解决这个问题，我们引入了<strong>Cycle GAN</strong>的概念。</li>
</ul>
<h4 id="Cycle-GAN"><a href="#Cycle-GAN" class="headerlink" title="Cycle GAN"></a>Cycle GAN</h4><p>在处理Unpaired Data的时候，我们需要注意让生成器不会完全放弃生成器原本输入的信息，那么如何锁住一个输入信息的Feature呢？</p>
<ul>
<li>AutoEncoder应该是一个绝佳的选择，能够通过建立AutoEncoder的网络来提取和压缩Generator的Input Data中潜在的Feature。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/vZSsbgv.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>有了AutoEncoder的限制和Discriminator的辅助我们就能够对生成的中间产物进行scalar的计算了。但这种判断方式也要求两个Domain的feature不能相差太大。</p>
<h3 id="Unsupervised"><a href="#Unsupervised" class="headerlink" title="Unsupervised"></a>Unsupervised</h3><p>我们只有一堆物件（如图片），却没有图片的Label，因此我们利用所有图片的Features来对Input进行Embedding(Feature Embedding)。此时我们在组合Feature的时候，不需要将两个Feature进行直接的组合，而是在Embedding的Code中寻找Vector相似的那个Output作为新的Output。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/2iWi9S2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Feature-Extraction"><a href="#Feature-Extraction" class="headerlink" title="Feature Extraction"></a>Feature Extraction</h2><p>有了输入资料和模型架构，剩下的就是需要让输入的资料能够表示成模型能够识别和方便处理的<strong>形态</strong>了。而这个所谓的形态就是资料feature的表示和提取。</p>
<h3 id="Domain-Independent-Feature"><a href="#Domain-Independent-Feature" class="headerlink" title="Domain Independent Feature"></a>Domain Independent Feature</h3><p>在使用神经网络训练和识别不同Domain的Feature时，神经元除了需要学习物件本身的特征之外，还需要区分不同的Domain。使用Traditional Neural Network拟合Training Data的同时，网络也会记住Training Data的Domain Feature，这样在预测Testing Data的时候一定会产生很大的问题。（问题本质：Training Data和Testing Data之间存在本质区别的Domain Feature）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/Pn64xtb.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h4 id="Domain-Adversarial-Training"><a href="#Domain-Adversarial-Training" class="headerlink" title="Domain-Adversarial Training"></a>Domain-Adversarial Training</h4><p>如果使用Training Data Domain Feature来预测Testing Data Domain Feature势必会有很大的误差，因此我们除了训练Label本身的特征，还需要训练Domain Feature的差异性。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/iVAKPT4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图所示：为了解决Domian依赖的问题，我们需要训练三个不同的网络来组合成一个总体的大网络结构。这个大网络中的训练目的各有些许不同，Feature Extractor的结果会极力接近Label predictor(Minimize Label Loss)，同时<strong>排斥</strong>Domain classifier(Maximize Domain Loss)。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/2Wa1pnl.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>要实现排斥Domain Label的结果，我们需要对Domain classifier的反馈进行一个负向的更新，这样就能够让Domain的Information完全消失，摆脱Domain的束缚。</p>
<h3 id="Improving-Auto-encoder"><a href="#Improving-Auto-encoder" class="headerlink" title="Improving Auto-encoder"></a>Improving Auto-encoder</h3><p>Auto-encoder在对Generator的训练过程中的特征降维以及保持特征本质特征等方面做出了极大的贡献。如何应用Auto-encoder也成为了GAN的一个重要过程。</p>
<h4 id="VAE-GAN"><a href="#VAE-GAN" class="headerlink" title="VAE-GAN"></a>VAE-GAN</h4><p>之前提到的利用VAE不仅能保存物件特征，还能够通过扩散特征的表示范围来产生新的特征。而利用这样的方法能够有效提升Generator的效能。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/2lLehdU.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h4 id="BiGAN"><a href="#BiGAN" class="headerlink" title="BiGAN"></a>BiGAN</h4><p>与VAE相似的BiGAN network利用一个双向的网络结构来进行训练。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/rZxxaMv.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Encoder输入为real data，输出为固定Dimension的code z。而Decoder利用这个code z重新还原data的模样，成为generated data。实际上就是将AutoEncoder网络拆分开来训练。利用Discriminator来辅助两个网络的训练，解决AutoEncoder中Encoder和Decoder无法分开训练的问题。</p>
<p>这个时候对于Encoder而言，其思想就相当于GAN网络中的Discriminator，通过真实资料提取信息，从而尽可能地学习原始资料的全部特征分布。因此为了提高Encoder的编码能力，我们需要让Discriminator尽可能降低Image x的scalar同时提高code z的scalar。通俗的理解也就是尽可能降低图片可以提供特征的条件，在这种严苛的条件下训练Encoder能够提取到尽可能高scalar的code z。相反，对于Decoder而言，则其思想就相当于GAN网络中的Generator，通过模糊的特征杂讯（noise）来生成物件。因此为了提高Decoder的解码能力，我们就需要让Discriminator尽可能提高Image x的scalar，同时降低code z的scalar。通俗理解为我们需要让结果达到一个高scalar的分数，同时要让我们的模型尽可能在最严苛的环境（code z的scalar很小，可以理解为杂讯很多）下训练。</p>
<h1 id="GAN-Examples"><a href="#GAN-Examples" class="headerlink" title="GAN Examples"></a>GAN Examples</h1><p>当今的GAN network被广泛应用于图片的生成和Dataset的产生。</p>
<h2 id="Anime-Face-Generation"><a href="#Anime-Face-Generation" class="headerlink" title="Anime Face Generation"></a>Anime Face Generation</h2><p>Example Code:</p>
<ul>
<li><a href="https://github.com/mattya/chainer-DCGAN" target="_blank" rel="external">https://github.com/mattya/chainer-DCGAN</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24767059" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24767059</a></li>
<li><a href="https://github.com/jayleicn/animeGAN" target="_blank" rel="external">https://github.com/jayleicn/animeGAN</a></li>
</ul>
<p>Dataset Collection:</p>
<ul>
<li><a href="http://konachan.net/post/show/239400/aikatsu-clouds-flowers-hikami_sumire-hiten_goane_r" target="_blank" rel="external">http://konachan.net/post/show/239400/aikatsu-clouds-flowers-hikami_sumire-hiten_goane_r</a></li>
<li><a href="https://drive.google.com/open?id=0BwJmB7alR-AvMHEtczZZN0EtdzQ" target="_blank" rel="external">https://drive.google.com/open?id=0BwJmB7alR-AvMHEtczZZN0EtdzQ</a></li>
</ul>
<p>Text-to-image:</p>
<ul>
<li><a href="https://github.com/paarthneekhara/text-to-image" target="_blank" rel="external">https://github.com/paarthneekhara/text-to-image</a></li>
</ul>
<h1 id="Decision-Making-and-Control"><a href="#Decision-Making-and-Control" class="headerlink" title="Decision Making and Control"></a>Decision Making and Control</h1><p>Widely Studies:</p>
<ul>
<li>Gym: <a href="https://gym.openai.com/" target="_blank" rel="external">https://gym.openai.com/</a></li>
<li>Universe: <a href="https://openai.com/blog/universe/" target="_blank" rel="external">https://openai.com/blog/universe/</a></li>
</ul>
<p>无论是GAN还是普通的神经网络结构，在解决特定问题的过程中都离不开决策和调控的平衡问题。AI的精髓在与自我调控和学习，因此神经网络结构不同，也会导致机器认知和判断决策的不同：</p>
<ul>
<li>Self-driving car</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/I7MIMTO.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Dialogue System</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/3EtailO.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Go playing</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/il9vg7y.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="What-do-we-miss"><a href="#What-do-we-miss" class="headerlink" title="What do we miss?"></a>What do we miss?</h2><p>当Decision making的议题出现之后，紧跟着的一个棘手的问题就是：Machine dosen’t know the influence of each action.而这个问题的根本原因就在于模型所有的行为都取决于它能够接收到的资讯，对于那些具有延迟性或者<strong>没有办法及时反馈</strong>的reward就没有办法很好地照顾到。</p>
<p>针对这种情况现有的解决方案：</p>
<ul>
<li><p>Reinforcement Learning</p>
<ul>
<li>从环境中获得reward。</li>
</ul>
</li>
<li><p>Learning by demonstration</p>
<ul>
<li>从过往经验中学习和总结。</li>
</ul>
</li>
</ul>
<h3 id="Reinforcement-Learning"><a href="#Reinforcement-Learning" class="headerlink" title="Reinforcement Learning"></a>Reinforcement Learning</h3><p>一个好的强化学习模型能够针对环境中的变化做出总结，并试图理解环境的本质。例如Alpha Go综合了Policy-based、Value-based和Model-based等不同模式于一身，这些模式相互协调帮助模型更好地学习环境中的反馈。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/nbDuGGn.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><p>首先根据环境得到一个状态S，根据状态再去预测接下来的行为a，如此反复最终达到一个结果状态结束。</p>
</li>
<li><p>以上过程中我们的每一个时刻表示为（S，a）的pair，所以全局的Actor、Environment信息就能够表示成：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/0S2qt1X.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
<li><p>而根据S和推导出来的a，我们就能够得到一个环境的反馈（可能不是即时的），最终的Reward可以表示成：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/kVWISaV.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
<li><p>最后，最大化reward就是我们模型所到达到的目标了。</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/fZq8eQt.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>对于Reward的计算有一些值得注意的地方：</li>
</ul>
<p><img src="" alt="Uploading file..._8mxhhffj3"></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/0zdd0iY.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>以上是Reward进行反向传递时候的<strong>误差</strong>，因为一般情况下，可能会出现无论如何改变参数，决策的行为会一直被判断成positive的情况（环境很温和），这种情况往往会让模型产生极端分化。因此我们通常会加入一个Baseline来减缓这种太过温和的环境反馈，让模型从一个相对优越的起点开始学习，降低学习成本。</p>
<h3 id="Neural-network"><a href="#Neural-network" class="headerlink" title="Neural network"></a>Neural network</h3><p>除了强化学习的方式以外，神经网络也能够作为行为预测的模型。利用NN来predict最终结果所要表示行为的one-hot vector，利用argmax来选择几率最大的行为输出也是一种Actor的决策方式。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/5SPToYI.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><p>与Reinforcement Learning结构相似的，神经网络只是将Actor的决策交给神经元来计算得到。Actor模型需要对环境进行编码，然后再利用权重计算得到相应的行为分数，取最大的行为进行输出。</p>
</li>
<li><p>然而传统的神经网络利用SGD等梯度下降的方式进行反向传递更新参数，而在环境中的决策问题往往是不可微分的，行为与行为之间属于离散分布，这个时候通常会借助强化学习的Policy Gradient来帮助输出的决策。</p>
</li>
</ul>
<h1 id="RNN-Generation-with-GAN"><a href="#RNN-Generation-with-GAN" class="headerlink" title="RNN Generation with GAN"></a>RNN Generation with GAN</h1><p>GAN在自然语言生成方面的应用：</p>
<h2 id="Sentence-Generation"><a href="#Sentence-Generation" class="headerlink" title="Sentence Generation"></a>Sentence Generation</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/gWNkcVu.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>具体操作流程如下：</p>
<ul>
<li>Initialize generator G and discriminator D</li>
<li><p>In each iteration:</p>
<ul>
<li>Sample real sentences x from datasets</li>
<li>Generate sentences x’ by G</li>
<li>Update D to increase D(x) and decrease D(x’)</li>
<li>Update G such that increase scalar</li>
</ul>
</li>
<li><p>到了这里就会有一个<strong>关键的问题</strong>出现了：在句子生成的序列化决策行为上，我们可以对GAN网络做反向传递吗？</p>
<ul>
<li>答案是No！因为vocabulary字典序列的不连续性（Discrete），反向传递改变的细微变化无法改变原先的结果。</li>
<li>因此我们会使用输出为固定行为的Policy Gradient来取代输出为一个区间范围取值的传统神经网络模型。以一个例子来看：如果我的结果是token，而传统神经网络通过预测token’的取值来逼近结果，然而如果预测的token不在字典集中就会回传UNK，因为token的数值能够进行梯度下降的运算。但是Policy Gradient是通过计算每一个token出现的概率来选择合适的token输出，因此更新的参数也只是token出现的概率，避免了梯度下降计算的误差出现的UNK现象。（NN：label=1，prediction_sequence = [0.2, 0.4, 0.5, 0.8, 0.9, 0.95, 1.0]；PG：label=1，prediction_sequence = [0, 0, 1, 0, 1, 1, 1]）</li>
</ul>
</li>
</ul>
<h3 id="SeqGAN"><a href="#SeqGAN" class="headerlink" title="SeqGAN"></a>SeqGAN</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/IEKMQP0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Neural Network + GAN + Reinforcement learning = SeqGAN</li>
</ul>
<p>SeqGAN</p>
<ul>
<li>Consider the discriminator as reward function</li>
<li>Consider the output of discriminator as total reward</li>
<li>Update generator to increase discriminator to get maximum total reward</li>
<li>Generator is a neural network updated with reinforcement learning</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/kZxEVMl.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><strong>GAN在自然语言处理上出现的问题：</strong></li>
</ul>
<p><strong>问题一：</strong> 我们知道，GAN在自然语言处理方面仍无法得到让人满意的结果，其原因主要可分为三类：首先，GAN主要应用于连续的数据类型上，在离散数据例如文字方面的问题上并不适用。最初的GANs仅仅定义在实数领域上，通过判别器输出的误差反向传递给生成器，利用梯度下降的方式进行优化更新。然而在离散的数据范围内，由于结果是通过sampling的方式取得，因此每一个离散的点微分结果等于零，因此来自判别器的误差无法通过梯度下降的方式进行反向传递更新优化。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/nyVgK9D.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/tD1cBC1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果保留softmax之后的结果作为传入判别器的latent codes反向传递误差，则会让判别器学到许多“作弊”的手段，例如输入的vector的每一项是一个介于0和1之间的数，而最终的结果是只包含一个1其他全是0的one-hot vector，这样的误差会让判别器认为只要存在0和1之外的数，这个生成结果就不算完美，如此一来模型的训练就会陷入瓶颈。</p>
<p>针对上面的问题，通常的方式是采用Reinforcement learning的方式来取代传统的Gradient Descent Optimization。或者使用类似Gumbel-softmax等特助分布函数来取代传统的softmax作为Discriminator的输入。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/KPz3T6V.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>问题二：</strong> GAN在利用RNN等序列化生成模型作为生成器的时候，也会面临因为MLE误差函数所带来的error累积问题。随着句子长度的增加，生成器的训练就容易出现exposure bias的问题，从而让判别器的结果飘忽不定，模型难以优化更新。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/QUzJCOk.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>问题三：</strong> 在生成句子的同时，判别器对生成器产生的反馈是一个全局的作用，也就是说这个标准是针对句子中每一个词都有相同的作用力度。这样的方式会带来一些潜在的问题，迷惑生成模型的更新思路，从而难以判断序列生成过程中每一个步骤的优劣程度，对模型的更新产生影响。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/cnRIfiS.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>针对这个问题，通常的解决办法是采用Mento-Carlo Search的方式对每一个subsequence进行单独深度扩展，从而评估每一个部分的reward值。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/10wKIdR.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Chat-bot-with-GAN"><a href="#Chat-bot-with-GAN" class="headerlink" title="Chat-bot with GAN"></a>Chat-bot with GAN</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/T2g8iPg.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>GAN在聊天机器人的应用和Sentence Generation十分类似，都是应用序列化决策的方式决定句子的生成问题。其主要的注意点如下：</p>
<ul>
<li>Genrator is composed of Encoder and Decoder</li>
<li>Using paired or unpaired data to train with conditional GAN</li>
<li>Reinforcement learning and attention mechanism are useful for obtaining reward and conmunicating context</li>
</ul>
<h3 id="Actor-Critic"><a href="#Actor-Critic" class="headerlink" title="Actor + Critic"></a>Actor + Critic</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/5AL8ssb.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Actor通过神经网络预测当下的输出行为，通过TD或MC的方式结合环境因素进行模拟，最后根据Learning Critic来判断行为的reward新型反向更新。</p>
<p><a href="https://hackmd.io/IYdgTAxgzALFBsBaAnAViiRMYCMwoAYATVRVAgqVZARmQDN54ag=?view#actor-critic" target="_blank" rel="external">更多介绍</a></p>
<h1 id="Inverse-Reinforcement-Learning"><a href="#Inverse-Reinforcement-Learning" class="headerlink" title="Inverse Reinforcement Learning"></a>Inverse Reinforcement Learning</h1><p>Inverse Reinforcement Learning的思想其实就是<strong>跟着大佬走不吃亏！</strong>。</p>
<p>在训练过程中我们需要通过一些专家序列（Expert sequence）的行为新型模拟，然后制定相应的reward function，根据这个function一步步优化我们的模型。细节如下：</p>
<ul>
<li>Define a principle</li>
<li>Initialize an actor</li>
<li>In each iteration<ul>
<li>The actor interacts with the environment to obtain some trajectories</li>
<li>Define a reward function, which makes the trajectories of the teacher better than the actor</li>
<li>The actor learns to maximize the reward based on the new reward function</li>
</ul>
</li>
<li>Output the reward funciton and the actor learned from the reward function</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/8BfZ2PJ.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="对比GAN和IRL"><a href="#对比GAN和IRL" class="headerlink" title="对比GAN和IRL"></a>对比GAN和IRL</h2><p>GAN网络和IRL在结构和功能上具有一定的相似性：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/UpJKs64.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>GAN通过discriminator的到的scalar来评估Generator的好坏，进而促使Generator以提高scalar为目标不断提升。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/arTM2Py.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>IRL的Expert相当于GAN中的Discriminator，Actor则相当于Generator。Reward function反馈给Expert一个较高的分数，而给予Actor一个较低的分数，促使Actor为了提高奖励就不断向Expert靠拢，一步步得到提升。</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.youtube.com/watch?v=0CKeqXl5IY0&amp;lc=z13zuxbglpvsgbgpo04cg1bxuoraejdpapo0k" target="_blank" rel="external">Generative Adversarial Network</a></p>
<p><a href="https://www.youtube.com/watch?v=0CKeqXl5IY0&amp;lc=z13zuxbglpvsgbgpo04cg1bxuoraejdpapo0k" target="_blank" rel="external">Improving Generative Adversarial Network</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍（Introduction）&quot;&gt;&lt;a href=&quot;#介绍（Introduction）&quot; class=&quot;headerlink&quot; title=&quot;介绍（Introduction）&quot;&gt;&lt;/a&gt;介绍（Introduction）&lt;/h1&gt;&lt;p&gt;当今AI时代在人工智慧领域取
    
    </summary>
    
    
      <category term="GAN" scheme="http://yoursite.com/tags/GAN/"/>
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Single Cycle MIPS CPU</title>
    <link href="http://yoursite.com/2017/08/29/CPU/"/>
    <id>http://yoursite.com/2017/08/29/CPU/</id>
    <published>2017-08-29T09:28:33.000Z</published>
    <updated>2017-08-29T09:29:29.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>The goal of this experience is to understand how a single-cycle MIPS work and how to use Verilog hardware description language (Verilog HDL) to model electronic systems. We need to implement a single cycle MIPS CPU that can execute all the instructions shown in the MIPS ISA section. We need to follow the instruction table and satisfy all the requirements .In addition, we need to verify our CPU by using Modelsim. Testing steps will provide test fixtures that will run a MIPS program for the CPU.</p>
<h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><ul>
<li><code>Verilog</code></li>
<li><code>ModelSim</code></li>
</ul>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><ul>
<li>The single-cycle CPU use one cycle to execute instruction. There are five main components in CPU: controller, regfile, arithmetic logic unit (ALU), program counter(PC), and jump controller.</li>
<li>The controller control most of the multiplexers, DM write enable, ALU, Jump Controller, and regfile. The file Controller.v implements the controller.</li>
<li>The regfile is used to store data between memory and the functional units. The file Regfile.v implements the regfile.</li>
<li>The arithmetic logic unit do arithmetic and bitwise operations. The file ALU.v implements the arithmetic logic unit.</li>
<li>The program counter is stored in the PC module. The file PC.v implements the program counter. It is triggered by positive clock edges.</li>
<li>The jump controller select a memory address and send to PC. The file Jump_Ctrl.v implements the jump controller.</li>
<li>The instruction memory is used to store instructions and it is implemented in IM.v files. The data memory is used to store data and it is implemented in DM.v file.</li>
<li>The MIPS ISA is shown in the following. Figure 2 shows the R-type instructions in the MIPS ISA. Figure 3 shows the I-type instructions in the MIPS ISA. Figure 4 shows the J-type instructions in the MIPS ISA.</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/jJ6ajUH.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/d89KFdi.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/MeLucnx.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Figure 5 shows the datapath of the single-cycle CPU. This single-cycle CPU is similar to the single-cycle in the textbook. However, to simply the CPU design, only smaller instruction and data memory are used and only 18-bit addresses are needed to obtain data in the memory.</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/71fKMwP.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;The goal of this experience is to understand h
    
    </summary>
    
    
      <category term="Verilog" scheme="http://yoursite.com/tags/Verilog/"/>
    
      <category term="CPU" scheme="http://yoursite.com/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>自编码（Auto-encoder）</title>
    <link href="http://yoursite.com/2017/08/21/auto-encoder/"/>
    <id>http://yoursite.com/2017/08/21/auto-encoder/</id>
    <published>2017-08-21T02:33:32.000Z</published>
    <updated>2017-08-21T02:34:48.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是自编码"><a href="#什么是自编码" class="headerlink" title="什么是自编码"></a>什么是自编码</h1><p>在神经网络训练过程中，往往会需要输入<strong>大量的信息</strong>，而这些信息对于计算机的学习来说具有十分巨大的负担。想想人类的学习过程，如果一次性塞给我们大量的信息，不但达不到很好的学习效果，还会浪费大量的时间。</p>
<p>因此我们需要一个特殊的神经网络来将原本的信息进行压缩，提取其中最具有代表性的信息，这个网络就是所谓的编码器（encoder）。之后再通过放大压缩后的信息，重现原始资料的全部信息，也就是 解码（decoder） 的过程。而我们所需要做的就是取得编码器压缩之后的简要信息，送入神经网络进行学习，从而达到我们的目的。</p>
<h1 id="General-Auto-encoder"><a href="#General-Auto-encoder" class="headerlink" title="General Auto-encoder"></a>General Auto-encoder</h1><p>通常我们会利用神经网络的结构将输入和输出的vector进行维度的变化，从而拟合二者，而auto-encoder就是利用非监督式学习来自动找到能够表示输入信号的低维度（Low Dimension）特征向量。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/w1FOwlL.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图所示，如果单独想要依靠一个神经网络得到好的特征向是不可能的。因为是非监督式学习，对于NN Encoder而言，我们无法评估结果code的好坏；相对的NN Decoder而言我们无从得到code的信息。因此两者必须相互沟通，共同训练才能达到最终的目的。</p>
<h1 id="Deep-Auto-encoder"><a href="#Deep-Auto-encoder" class="headerlink" title="Deep Auto-encoder"></a>Deep Auto-encoder</h1><p>如果说传统的Auto-encoder只是使用了简单的机器学习方法或是简单的神经网络作为encoder和decoder的内部构造，那么Deep Auto-encoder就是将这些网络结构替换成了更为复杂，从资料形态和特征出发的神经网络。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/u3zi7BE.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>从图中可以看出，Deep Auto-encoder能够利用神经网络的特性将输入和输出（同样的输入资料）进行转换，最终得到资料的精华部分（code）。因此我们可以说：</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Deep\ Auto\ Encoder\ Network = DNN\ encoder + DNN\ decoder" style="border:none;"></p>
<ul>
<li>下图是通过PCA和t-SNE对输入信号进行降维后在二维空间中的手写数字分类结果：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/gmqBwil.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>而经过Deep Auto-encoder之后的结果如下：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/0NRrwu8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>不难看出，Auto-encoder在特征的分类上还是有一定程度能够超越传统的主成分分析模型。</p>
<h1 id="Sequence-to-Sequence-Auto-encoder"><a href="#Sequence-to-Sequence-Auto-encoder" class="headerlink" title="Sequence-to-Sequence Auto-encoder"></a>Sequence-to-Sequence Auto-encoder</h1><p>Sequence-to-Sequence的Auto-encoder主要是用在提取输入信号是一个<strong>时序的特征向量</strong>。这个时候我们需要借助RNN的模型来对时序特征向量进行encode和decode的动作。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/fzLQuVT.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>同样的利用Sequence-to-Sequence Model定义的Encoder对输入信号进行编码，输出的Vector通过Decoder重新解码。不同的是解码的结果需要拟合的是原先编码前的信号。如此一来解码器和编码器就能够准确地将<strong>原始输入信号的特征压缩和保存了</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/WL6H0GX.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Encoder输出的Vector就是我们需要的输入信息的精华，其中的Feature都能够对信息本身造成关键性的影响。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是自编码&quot;&gt;&lt;a href=&quot;#什么是自编码&quot; class=&quot;headerlink&quot; title=&quot;什么是自编码&quot;&gt;&lt;/a&gt;什么是自编码&lt;/h1&gt;&lt;p&gt;在神经网络训练过程中，往往会需要输入&lt;strong&gt;大量的信息&lt;/strong&gt;，而这些信息对于计算机的学习
    
    </summary>
    
    
      <category term="Auto-Encoder" scheme="http://yoursite.com/tags/Auto-Encoder/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘（Data Mining）十大经典算法</title>
    <link href="http://yoursite.com/2017/08/16/data/"/>
    <id>http://yoursite.com/2017/08/16/data/</id>
    <published>2017-08-16T09:25:15.000Z</published>
    <updated>2017-08-16T09:27:21.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法介绍（Introduction）"><a href="#算法介绍（Introduction）" class="headerlink" title="算法介绍（Introduction）"></a>算法介绍（Introduction）</h1><h2 id="C4-5"><a href="#C4-5" class="headerlink" title="C4.5"></a>C4.5</h2><p>C4.5是机器学习中的一个分类决策树（Decision Tree）算法，它是决策树的一个核心，ID3的改进算法。因此想要构造C4.5的结构，只需要了解决策树的构造方法即可实现大半。而总的来说就是每次选择一个好的特征以及分裂点作为当前节点的判断条件（树的分岔路口）。</p>
<h3 id="C4-5相比于ID3改进的方面包括："><a href="#C4-5相比于ID3改进的方面包括：" class="headerlink" title="C4.5相比于ID3改进的方面包括："></a>C4.5相比于ID3改进的方面包括：</h3><ul>
<li><p>使用了信息增益率作为选择节点的标准。</p>
<ul>
<li>传统的ID3算法使用了<a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#Information-Gain-amp-Entropy" target="_blank" rel="external">信息增益(Information Gain)</a>作为衡量节点优异度的标准，也就是熵值（Entropy）的变化程度，而这个情况往往会导致选择属性的时候偏向选择取值多的属性。例如同样是跑步，一个人的速度为5m/s，另一个人的速度为3m/s，之后两人分别加速到了10m/s和6m/s。如果利用信息增益来评估两人的速度变化，那么显然前者的信息增益更强（10-5 &gt; 6-3）。然而如果使用信息增益率来说两人的加速度是一致的((10-5) / 5 = (6-3) / 3)。</li>
</ul>
</li>
<li><p>在构建决策树的过程中对分支进行了修剪。</p>
<ul>
<li>剪去那些只有几个节点的分支，因为选择方式少而单一，容易造成Overfitting。</li>
</ul>
</li>
<li><p>能够处理不完整的数据。</p>
</li>
</ul>
<h2 id="The-K-means-Algorithm-K-means"><a href="#The-K-means-Algorithm-K-means" class="headerlink" title="The K-means Algorithm(K-means)"></a>The K-means Algorithm(K-means)</h2><p><a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#K均值（K-means）" target="_blank" rel="external">K-means算法</a>在机器学习中属于一个聚类算法，它是把n个对象根据他们的属性差异（Feature维度空间中的距离）来将彼此分成K群。它与处理混合正态分布的最大期望类似，因为都是试图找到数据中的聚类中心。<br>K-means计算假设对象属性来自于空间向量，并且目标是使各个群组内部的误差最小化。</p>
<h2 id="Support-Vector-Machine（SVM）"><a href="#Support-Vector-Machine（SVM）" class="headerlink" title="Support Vector Machine（SVM）"></a>Support Vector Machine（SVM）</h2><p><a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#支持向量机（Support-vector-machine-SVM）" target="_blank" rel="external">支持向量机</a>是一种监督式学习的方法，被广泛应用在分类和回归的分析中。它的原理是将空间中的向量映射到一个更高纬度的空间中，然后在空间中找到一个最大间隔超平面。通俗的来说就是在原有的维度空间中无法分割的情况下，我们先提高向量表示的维度空间，然后在高纬度空间中找到一个超平面，能够将不同类别的向量集合分割开来。我们在这个超平面两侧各取两个平行的超平面，然后最大化这两个平面的距离。</p>
<h2 id="The-Apriori-algorithm"><a href="#The-Apriori-algorithm" class="headerlink" title="The Apriori algorithm"></a>The Apriori algorithm</h2><p>Apriori算法是一种最有影响力关联法则应用算法。其核心是结合了关联法则和递归的思想，我们会定义一个最小支持度（minimum support）来生成我们的频繁数据集。<br>首先从所有数据中计算出频繁项集L1，之后再利用L1生成L2项集，以此类推最后能够得到频繁k项集。每次检索需要扫描所有数据一次。</p>
<h3 id="关联度分析的基本概念"><a href="#关联度分析的基本概念" class="headerlink" title="关联度分析的基本概念"></a>关联度分析的基本概念</h3><ul>
<li><p>支持度</p>
<ul>
<li>关联规则 A-&gt;B 的支持度（Support）= P（AB），指的是A和B同时发生的概率</li>
</ul>
</li>
<li><p>置信度</p>
<ul>
<li>A对B的置信度（confidence）= P（B | A）= P（AB）/ P（A），指的是A发生的情况下B发生的概率</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/g2ND7QL.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="最大期望（EM）算法"><a href="#最大期望（EM）算法" class="headerlink" title="最大期望（EM）算法"></a>最大期望（EM）算法</h2><p>在统计计算中，最大期望算法是在概率模型中寻找最大似然估计或者最大后验估计的算法，其中概率模型依赖于无法观测的隐性变量（Latent Variable）。</p>
<p>举个例子就是：</p>
<ul>
<li>两个人分食物，我们没有必要利用十分精确的仪器来将食物分成完全相等的两份，而是先随便将食物分成两群，然后观察是否一样多，把比较多的那一份取出一部分到少的那一群。久而久之两群的差距就会越来越小最后收敛。</li>
</ul>
<h2 id="PageRank"><a href="#PageRank" class="headerlink" title="PageRank"></a>PageRank</h2><p>PageRank，又称网页排名，是一种根据相互的超链接计算关联度的技术。它通过网页的外部链接和内部链接的数量和质量来衡量网站的价值。PageRank背后的机制是投票，也就是每一次访问网页的链接都是对该页面的一次投票，票数越多代表网站的权重越高。</p>
<p>假设有一个4个对象组成的小团体A，B，C，D。如果所有对象都提到A，那么A的PageRank值就是B，C，D三个PageRanks的总和。<br>即:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large PR(A) = PR(B) + PR(C) + PR(D)" style="border:none;"></p>
<p>如果此时B有提到C，D也有提到A，B，C。由于一个页面不能出现两次，因此权重会被一个权重分配：</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large PR(A) = {PR(B) \over 2} + {PR(C) \over 1} + {PR(D) \over 3}" style="border:none;"></p>
<h2 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h2><p><a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#Adaboost" target="_blank" rel="external">AdaBoost</a>是一种迭代的算法，其核心思想是针对同一个训练集训练不同的分类器，也叫作弱分类器。然后通过把这些弱分类器整合起来，构造出一个最终的强分类器。<br>AdaBoost算法本身是通过动态改变数据的分布情况来实现的，根据每次训练样本的正确与否，以及上次分类的准确率，来调整每个样本的权重比例。然后再将结果送给下一次分类器的迭代中进行训练，以此类推。</p>
<h2 id="K-nearest-neighbor-classification-KNN"><a href="#K-nearest-neighbor-classification-KNN" class="headerlink" title="K-nearest neighbor classification(KNN)"></a>K-nearest neighbor classification(KNN)</h2><p><a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#K近邻（K-Nearest-Neighbors）" target="_blank" rel="external">KNN算法</a>可以用于分类和回归问题，然而我们更常将其被用于解决分类问题上。KNN能够存储所有的案例，通过对比周围K个样本中的大概率情况，从而决定新的对象应该分配在哪一个类别。新的样本会被分配到它的K个最近最普遍的类别中去，因此KNN算法也是一个基于距离函数的算法。</p>
<h2 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h2><p>在所有的分类模型中，应用最为广泛的无非是两种分类模型了，它们分别是决策树模型和<a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#朴素贝叶斯（Naive-Bayesian）" target="_blank" rel="external">朴素贝叶斯（Naive Bayes）</a>模型。在结构上，Naive Bayes所需估计的参数较少，对缺失数据不太敏感，算法也比较简单。<br>Naive Bayes模型假设属性之间相互独立。通俗来说，一个朴素贝叶斯分类器假设分类的特性和其他特性不相关。朴素贝叶斯模型容易创建，而且在非监督式学习的大型数据样本集中非常有用，虽然简单，却能超越复杂的分类方法。其基本思想就是：对于给出的待分类项，求解在此项出现的条件下各个目标类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。</p>
<h2 id="CART（分类与回归树）"><a href="#CART（分类与回归树）" class="headerlink" title="CART（分类与回归树）"></a>CART（分类与回归树）</h2><p>Classification and Regression Trees是在分类树下面总结两个关键的思想。一个是关于递归的划分自变量空间，第二个是用验证数据对树结构进行剪枝。<br>我们知道分类树的输出是样本的类别标签。回归树的输出则是一个固定的数值。而CART包含了上述的两种决策树。它的结构是一棵二叉树，且每个非叶子节点都有两个Child，所以叶子节点数总是比非叶子节点数多1。<br>CART中用于选择变量的不纯性度量标准是用<a href="https://eternalfeather.github.io/2017/08/08/ML-algorithms/#Gini" target="_blank" rel="external">Gini指数</a>来处理的，也就是说树内部的属性越杂乱，Gini指数就越大。如果目标变量是离散的，并且具有两个以上的类别，则CART可能考虑将这些目标类别进行合并，最终合并成两个超类别（这个过程叫做双化）。如果目标变量是连续的，则CART会找出一组基于树的回归方程来预测目标变量的结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;算法介绍（Introduction）&quot;&gt;&lt;a href=&quot;#算法介绍（Introduction）&quot; class=&quot;headerlink&quot; title=&quot;算法介绍（Introduction）&quot;&gt;&lt;/a&gt;算法介绍（Introduction）&lt;/h1&gt;&lt;h2 id=&quot;C
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Data Mining" scheme="http://yoursite.com/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>An Implementation of Attention is all you need with Chinese Corpus</title>
    <link href="http://yoursite.com/2017/08/15/attention/"/>
    <id>http://yoursite.com/2017/08/15/attention/</id>
    <published>2017-08-15T09:42:49.000Z</published>
    <updated>2017-08-15T09:46:10.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p><a href="https://github.com/EternalFeather/Transformer-in-generating-dialogue" target="_blank" rel="external">Github</a></p>
<h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><ul>
<li>Numpy &gt;= 1.13.1</li>
<li>Tensorflow-gpu &gt;= 1.2.1</li>
<li>tqdm</li>
<li>nltk</li>
</ul>
<h1 id="Construction-Details"><a href="#Construction-Details" class="headerlink" title="Construction Details"></a>Construction Details</h1><p>As we all know Translation System can be used in implementing conversational model just by replacing the paris of two different sentences to questions and answers. After all, the basic conversation model named “Sequence-to-Sequence” is develped from translation system. Therefore, why we not to improve the efficiency of conversation model in generating dialogues?<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/x5FRdRo.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>This is the structure of transformer which is the core of implementing our model. Now let’s split it into several points:</p>
<ul>
<li>First one is Input Datasets(Get the batch datasets from generator, which is represented as a list of token ids in this experiment).</li>
<li>Second one is Embedding layers(Including two parts:<strong>Dataset Embedding</strong> and <strong>Positional Embedding</strong>)<ul>
<li>Dataset Embedding transform input token ids into a one-hot vector whose size is the length of vocabulary.</li>
<li>Positional Embedding also called positional encoding. It considered the index of each word in the list of sentence as the position symbol.</li>
<li>Third we have a multi-head attention model to split the output of embedding layers into many pieces and run through different attention models parallelly. Finally we can get the result by concating all the outputs from every models.</li>
<li>Finally, going through a feed forward layer and combining with residual items, so that we can get the result. </li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/YfKUgIC.png" alt=""></p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><ul>
<li>STEP 1. Download dialogue corpus with format like sample datasets and extract them to <code>data/</code> folder.</li>
<li>STEP 2. Adjust hyper parameters in <code>params.py</code> if you want.</li>
<li>STEP 3. Run <code>make_dic.py</code> to generate vocabulary files to a new folder named <code>dictionary</code>.</li>
<li>STEP 4. Run <code>train.py</code> to build the model. Checkpoint will be stored in <code>checkpoint</code> folder while the tensorflow event files can be found in <code>logdir</code>. </li>
<li>STEP 5. Run <code>eval.py</code> to evaluate the result with testing data. Result will be stored in <code>Results</code> folder.</li>
</ul>
<h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">- Source: 肥 宅 初 夜 可 以 賣 多 少 `</div><div class="line">- Ground Truth: 肥 宅 還 是 去 打 手 槍 吧</div><div class="line">- Predict: 肥 宅 還 是 去 打 手 槍 吧</div><div class="line"></div><div class="line">- Source: 兇 的 女 生 484 都 很 胸</div><div class="line">- Ground Truth: 我 看 都 是 醜 的 比 較 凶</div><div class="line">- Predict: 我 看 都 是 醜 的 比 較 &lt;UNK&gt;</div><div class="line"></div><div class="line">- Source: 留 髮 不 留 頭</div><div class="line">- Ground Truth: 還 好 我 早 就 禿 頭 了</div><div class="line">- Predict: 還 好 我 早 就 禿 頭 了</div><div class="line"></div><div class="line">- Source: 當 人 好 痛 苦 R 的 八 卦</div><div class="line">- Ground Truth: 去 中 國 就 不 用 當 人 了</div><div class="line">- Predict: 去 中 國 就 不 會 有 了 -</div><div class="line"></div><div class="line">- Source: 有 沒 有 今 天 捷 運 的 八 卦</div><div class="line">- Ground Truth: 有 - 真 的 有 多</div><div class="line">- Predict: 有 - 真 的 有 多</div><div class="line"></div><div class="line">- Source: 2016 帶 走 了 什 麼 `</div><div class="line">- Ground Truth: HellKitty 麥 當 勞 歡 樂 送 開 門 -</div><div class="line">- Predict: &lt;UNK&gt; 麥 當 勞 歡 樂 送 開 門 -</div><div class="line"></div><div class="line">- Source: 有 沒 有 多 益 很 賺 的 八 卦</div><div class="line">- Ground Truth: 比 大 型 包 裹 貴</div><div class="line">- Predict: 比 大 型 包 &lt;UNK&gt; 貴</div><div class="line"></div><div class="line">- Source: 邊 緣 人 收 到 地 震 警 報 了</div><div class="line">- Ground Truth: 都 跑 到 窗 邊 了 才 來</div><div class="line">- Predict: 都 跑 到 &lt;UNK&gt; 邊 了 才 來</div><div class="line"></div><div class="line">- Source: 車 震</div><div class="line">- Ground Truth: 沒 被 刪 版 主 是 有 眼 睛 der</div><div class="line">- Predict: 沒 被 刪 版 主 是 有 眼 睛 der</div><div class="line"></div><div class="line">- Source: 在 家 跌 倒 的 八 卦 `</div><div class="line">- Ground Truth: 傷 到 腦 袋 - 可 憐</div><div class="line">- Predict: 傷 到 腦 袋 - 可 憐</div><div class="line"></div><div class="line">- Source: 大 家 很 討 厭 核 核 嗎 `</div><div class="line">- Ground Truth: 核 核 欠 幹 阿</div><div class="line">- Predict: 核 核 欠 幹 阿</div><div class="line"></div><div class="line">- Source: 館 長 跟 黎 明 打 誰 贏 -</div><div class="line">- Ground Truth: 我 愛 黎 明 - 我 愛 黎 明 -</div><div class="line">- Predict: 我 愛 &lt;UNK&gt; 明 - 我 愛 &lt;UNK&gt; 明 -</div><div class="line"></div><div class="line">- Source: 嘻 嘻 打 打</div><div class="line">- Ground Truth: 媽 的 智 障 姆 咪 滾 喇 幹</div><div class="line">- Predict: 媽 的 智 障 姆 咪 滾 喇 幹</div><div class="line"></div><div class="line">- Source: 經 典 電 影 台 詞</div><div class="line">- Ground Truth: 超 時 空 要 愛 裡 滿 滿 的 梗</div><div class="line">- Predict: 超 時 空 要 愛 裡 滿 滿 滿 的</div><div class="line"></div><div class="line">- Source: 2B 守 得 住 街 亭 嗎 `</div><div class="line">- Ground Truth: 被 病 毒 滅 亡 真 的 會 -</div><div class="line">- Predict: &lt;UNK&gt; 守 得 住</div></pre></td></tr></table></figure>
<h1 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h1><h2 id="Implement-feedforward-through-fully-connected"><a href="#Implement-feedforward-through-fully-connected" class="headerlink" title="Implement feedforward through fully connected."></a>Implement feedforward through fully connected.</h2><ul>
<li>Training Accuracy</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/wZW34e8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Training Loss</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/p5MSVVQ.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Implement-feedforward-through-convolution-in-only-one-dimention"><a href="#Implement-feedforward-through-convolution-in-only-one-dimention" class="headerlink" title="Implement feedforward through convolution in only one dimention."></a>Implement feedforward through convolution in only one dimention.</h2><ul>
<li>Training Accuracy</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/y2Q9yM8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>Training Loss</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/MJdMnvt.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p>Thanks for <a href="https://github.com/Kyubyong/transformer" target="_blank" rel="external">Transformer</a></p>
<ul>
<li>本文在原先的模组上添加了Attention is all you need提到的Position encoding的部分</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Link&quot;&gt;&lt;a href=&quot;#Link&quot; class=&quot;headerlink&quot; title=&quot;Link&quot;&gt;&lt;/a&gt;Link&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/EternalFeather/Transformer-in-gene
    
    </summary>
    
    
      <category term="Transformer" scheme="http://yoursite.com/tags/Transformer/"/>
    
      <category term="Attention is all you need" scheme="http://yoursite.com/tags/Attention-is-all-you-need/"/>
    
      <category term="Conversation Model" scheme="http://yoursite.com/tags/Conversation-Model/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow快速入门</title>
    <link href="http://yoursite.com/2017/08/14/tensorflow/"/>
    <id>http://yoursite.com/2017/08/14/tensorflow/</id>
    <published>2017-08-14T06:08:47.000Z</published>
    <updated>2017-08-14T06:09:41.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍（Introduction）"><a href="#介绍（Introduction）" class="headerlink" title="介绍（Introduction）"></a>介绍（Introduction）</h1><p>Tensorflow是一个使用数据流图（Data flow graphs）技术进行数值运算的函式库。每一张图都是由节点（Node）和边（Edge）组成的。Tensorflow具有以下几点特性：</p>
<h2 id="灵活性"><a href="#灵活性" class="headerlink" title="灵活性"></a>灵活性</h2><p>Tensorflow不是一个严格意义上的神经网络函式库，只要是能够使用数据流图来描述的计算问题，都能够通过Tensorflow来实现。与此同时还能够用简单的Python来实现高层次的功能。</p>
<h2 id="可迁移性"><a href="#可迁移性" class="headerlink" title="可迁移性"></a>可迁移性</h2><p>Tensorflow可以在任何具备CPU或者GPU的设备上运行，无需考虑复杂的环境配置问题，。</p>
<h2 id="高效性"><a href="#高效性" class="headerlink" title="高效性"></a>高效性</h2><p>Tensorflow可以提升神经网络的训练效率，且具备代码统一的有优势，便于和同行分享。</p>
<h1 id="配置支持"><a href="#配置支持" class="headerlink" title="配置支持"></a>配置支持</h1><ul>
<li><code>Python</code></li>
<li><code>C++</code></li>
<li><code>CUDA</code>   (GPU环境)</li>
<li><code>CUDNN</code> （GPU环境）</li>
</ul>
<h1 id="Tensorflow的结构"><a href="#Tensorflow的结构" class="headerlink" title="Tensorflow的结构"></a>Tensorflow的结构</h1><h2 id="数据流图（Graph）"><a href="#数据流图（Graph）" class="headerlink" title="数据流图（Graph）"></a>数据流图（Graph）</h2><p>数据流图是一种描述有向图的数值计算过程产物。图中的节点通常是代表数学运算，但也可以表示数据的输入、输出和读写等操作。图中的边（Edge）表示节点之间的某种关联，负责在节点之间传递各种数据单元，而Tensorflow的基本运算单元是Tensor。Tensorflow的flow也因此得名。</p>
<p>节点可以被分配到多个设备上运算，也就是所谓的异步并行操作。因为是有向图，所以只有等到先前的节点结束工作时，当前的节点才能够执行相应的操作。</p>
<h2 id="节点（Ops）"><a href="#节点（Ops）" class="headerlink" title="节点（Ops）"></a>节点（Ops）</h2><p>Tensorflow中的节点也被称为Operation。一个Ops通常使用0个或者以上的Tensors，通过执行某个特定的运算，产生新的Tensors。一个Tensor表示的是一个<strong>多维数组</strong>，例如[batch, height, width, channels]这样的形式，数组中的数多为浮点数。</p>
<h2 id="边（Edge）"><a href="#边（Edge）" class="headerlink" title="边（Edge）"></a>边（Edge）</h2><p>Tensorflow各节点之间的通道被成为边，也可以理解为流（FLow），作用是在每个节点的计算过程中传输数据Tensor。因为是有向图的关系，边的传输方向也是有自己的规则，因此在Tensorflow的运算过程中往往需要安排好节点和边的关系。</p>
<h1 id="Tensorflow的常见使用步骤"><a href="#Tensorflow的常见使用步骤" class="headerlink" title="Tensorflow的常见使用步骤"></a>Tensorflow的常见使用步骤</h1><ul>
<li>将计算流程表示成图的形式</li>
<li>通过Session来执行图计算</li>
<li>将数据表示为Tensors</li>
<li>通过Variable储存模型的状态数值</li>
<li>使用feeds和fetches来填充数据和抓取数据</li>
</ul>
<p>Tensorflow运行中通过Session来执行图中各节点的运算，Session将Ops放置到CPU或者GPU中，然后执行他们。执行完毕后，返回相应的结果（Tensors），在Python中这些Tensors的形式是numpy ndarray的objects。</p>
<h2 id="创建数据流图"><a href="#创建数据流图" class="headerlink" title="创建数据流图"></a>创建数据流图</h2><p>Tensorflow在使用过程中通常分为<strong>施工阶段</strong> 和 <strong>建设阶段</strong>两部分。在施工阶段我们创建一个神经网络的结构和功能，在建设阶段通过Session来反复执行我们所构建的神经网络。</p>
<p>和大多数编程语言类似，Tensorflow的Constant是一种没有输入的ops（常量），但是它本身可以作为其他ops的输入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">matrix1 = tf.constant([[3., 3.]])</div><div class="line">matrix2 = tf.constant([[2.], [2.]])</div><div class="line">product = tf.matmul(matrix1, matrix2)</div></pre></td></tr></table></figure>
<p>这时我们已经在一个Default的Graph里面加入了三个Nodes，两个Constant ops和一个matmul的ops。为了能够得到两个矩阵运算的结果，我们就必须使用<strong>session来启动图</strong>。</p>
<h2 id="在Session中执行数据流图"><a href="#在Session中执行数据流图" class="headerlink" title="在Session中执行数据流图"></a>在Session中执行数据流图</h2><p>刚才已经完成了施工的阶段，现在要开始建设阶段了，这样才能实作出我们想要的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sess = tf.Session()</div><div class="line">result = sess.run(product)</div><div class="line">print(result)</div><div class="line">sess.close()</div></pre></td></tr></table></figure>
<p>用定义式的Session执行需要一个结束的判定，或者我们可以使用with的方式来定义我们的执行过程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">with tf.Session() as sess:</div><div class="line">    result = sess.run(product)</div><div class="line">    print(result)</div></pre></td></tr></table></figure>
<p>Tensorflow这些节点可以被分配到不同的设备上进行计算。如果是GPU，默认会在第一个GPU（id = 0）上执行，如果想在其他的GPU上执行相应的session，需要进行手动配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">with tf.Session() as sess:</div><div class="line">    # 也可以用‘/cpu:0’</div><div class="line">    with tf.device(&quot;/gpu:1&quot;):</div><div class="line">        matrix1 = tf.constant([[3., 3.]])</div><div class="line">        matrix2 = tf.constant([[2.], [2.]])</div><div class="line">        product = tf.matmul(matrix1, matrix2)</div><div class="line">        print(sess.run(product))</div></pre></td></tr></table></figure>
<p>在一些交互界面（例如Ipython或者cmd）运行tensorflow的时候，我们往往不需要编译全局而用分布式运算的方式。因此我们可以使用InteractiveSession和eval()、Ops_name.run()等方式来进行分布式运算:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">sess = tf.InteractiveSession()</div><div class="line"></div><div class="line">a = tf.Variable([1.0, 2.0])</div><div class="line">a.initializer.run()</div><div class="line">b = tf.constant([3.0, 3.0])</div><div class="line"></div><div class="line">sub = tf.subtract(a, b)</div><div class="line">print(sub.eval())</div><div class="line"></div><div class="line">sess.close()</div></pre></td></tr></table></figure>
<h2 id="运算中的数据结构Tensors"><a href="#运算中的数据结构Tensors" class="headerlink" title="运算中的数据结构Tensors"></a>运算中的数据结构Tensors</h2><p>Tensorflow中使用的数据结构不同于其他语言中的结构，而是一种叫作Tensor的结构，它的本质是一个多维的数据集的表示形式，用来在数据流图中的各节点之间传递信息，一个Tensor具有固定的类型和大小（静态型别）。</p>
<h3 id="变量Variable"><a href="#变量Variable" class="headerlink" title="变量Variable"></a>变量Variable</h3><p>变量在图的执行过程中，保持着自己特有的状态信息，能够为图模型的运作保存变化的数值信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">state = tf.Variable(0, name = &quot;counter&quot;)</div><div class="line">one = tf.constant(1)</div><div class="line">new_value = tf.add(state, one)</div><div class="line"># 赋值函数</div><div class="line">update = tf.assign(state, new_value)</div><div class="line"></div><div class="line">init_op = tf.initializer_all_variables()</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">    sess.run(init_op)</div><div class="line">    print(sess.run(state))</div><div class="line">    for _ in range(3):</div><div class="line">        sess.run(update)</div><div class="line">        print(sess.run(state))</div></pre></td></tr></table></figure>
<p>一般我们会将神经网络的参数初始化为一些变量，等到训练的时候再通过Session来对参数进行更新。</p>
<h2 id="抓取（Fetches）和填充（Feeds）"><a href="#抓取（Fetches）和填充（Feeds）" class="headerlink" title="抓取（Fetches）和填充（Feeds）"></a>抓取（Fetches）和填充（Feeds）</h2><p>我们在使用神经网络的过程中，每一个节点的图往往不是封闭的，也就是说它们需要传入和输出一些东西。而为了抓取ops的输出，我们需要执行Session的run函数，然后通过print的方式抓取它们的参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">input1 = tf.constant(3.0)</div><div class="line">input2 = tf.constant(2.0)</div><div class="line">input3 = tf.constant(5.0)</div><div class="line">intermed = tf.add(input2, input3)</div><div class="line">mul = tf.multiply(input1, intermed)</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">    result = sess.run(mul)</div><div class="line">    print(result)</div></pre></td></tr></table></figure>
<ul>
<li>其中的result计算过程中，虽然mul的计算过程需要用到intermed的计算结果，但是我们不需要另外写入sess.run(intermed)。原因是Tensorflow是一个有向图集，因此我们定义后面的图，它就会自动去追溯先前的所有图并且实作它们。</li>
</ul>
<p>有的时候我们在计算过程中有些参数我们是在之后<strong>建设</strong>的过程中才会得到的，因此我们在施工的时候就可以先用一个占位符把它的位置保留：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">input1 = tf.placeholder(tf.float32)</div><div class="line">input2 = tf.placeholder(tf.float32)</div><div class="line">output = tf.multiply(input1, input2)</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">    print(sess.run(output, feed_dict = &#123;input1 : [7.], input2: [2.]&#125;))</div></pre></td></tr></table></figure>
<p>或者传入一个numpy array：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">n = 5</div><div class="line">a = tf.placeholder(dtype = tf.float32)</div><div class="line">b = tf.placeholder(&quot;float&quot;, [None, n])</div><div class="line">output = tf.multiply(a, b)</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">    temp = np.asarray([[1., 2., 3., 4., 5.]])</div><div class="line">    print(sess.run(output, feed_dict = &#123;a: [2.], b: temp&#125;))</div></pre></td></tr></table></figure>
<h1 id="Tensorflow范例"><a href="#Tensorflow范例" class="headerlink" title="Tensorflow范例"></a>Tensorflow范例</h1><h2 id="拟合曲线的计算"><a href="#拟合曲线的计算" class="headerlink" title="拟合曲线的计算"></a>拟合曲线的计算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">x_data = np.random.randn(100).astype(&quot;float32&quot;)</div><div class="line">y_data = x_data * 0.1 + 0.3</div><div class="line"></div><div class="line">W = tf.Variable(tf.random_uniform([1], -1.0, 1.0))</div><div class="line">b = tf.Variable(tf.zeros([1]))</div><div class="line">y = W * x_data + b</div><div class="line"></div><div class="line">loss = tf.reduce_mean(tf.square(y - y_data))</div><div class="line">optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)</div><div class="line"></div><div class="line">init = tf.initialize_all_variables()</div><div class="line"></div><div class="line">sess = tf.Session()</div><div class="line">sess.run(init)</div><div class="line"></div><div class="line">for step in range(101):</div><div class="line">    sess.run(optimizer)</div><div class="line">    if step % 20 == 0:</div><div class="line">        print(step, sess.run(W), sess.run(b))</div></pre></td></tr></table></figure>
<h2 id="MNIST手写识别"><a href="#MNIST手写识别" class="headerlink" title="MNIST手写识别"></a>MNIST手写识别</h2><p>利用线性分类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">from tensorflow.examples.tutorials.mnist import input_data</div><div class="line"># mnist.train, mnist.test, mnist.validation</div><div class="line">mnist = input_data.read_data_sets(&quot;MNIST_data/&quot;, one_hot = True)</div><div class="line">import tensorflow as tf</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">batch_size = 64</div><div class="line">train_iter = 1000</div><div class="line"></div><div class="line"># input_size = [batch_size, 28, 28]; output_size = one_hot</div><div class="line">x = tf.placeholder(tf.float32, [None, 784])</div><div class="line">y = tf.placeholder(tf.float32, [None, 10])</div><div class="line"></div><div class="line">W = tf.Variable(tf.zeros([784, 10]))</div><div class="line">b = tf.Variable(tf.zeros([10]))</div><div class="line">pred = tf.nn.softmax(tf.matmul(x, W) + b)</div><div class="line"></div><div class="line">loss = -tf.reduce_sum(y * tf.log(pred))</div><div class="line">optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss)</div><div class="line">correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, &quot;float&quot;))</div><div class="line"></div><div class="line">init = tf.initialize_all_variables()</div><div class="line"></div><div class="line">sess = tf.Session()</div><div class="line">sess.run(init)</div><div class="line"></div><div class="line">for step in range(train_iter):</div><div class="line">    batch_xs, batch_ys = mnist.train.next_batch(64)</div><div class="line">    sess.run(optimizer, feed_dict = &#123;x: batch_xs, y: batch_ys&#125;)</div><div class="line">    if step % 100 == 0:</div><div class="line">        print(sess.run(accuracy, feed_dict = &#123;x: mnist.test.images, y: mnist.test.labels&#125;))</div></pre></td></tr></table></figure>
<p>利用RNN（GRU）神经网络：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">from tensorflow.examples.tutorials.mnist import input_data</div><div class="line">import tensorflow as tf</div><div class="line">import numpy as np</div><div class="line">mnist = input_data.read_data_sets(&quot;MNIST/&quot;, one_hot = True)</div><div class="line"></div><div class="line">n_input = 28</div><div class="line">time_step = 28</div><div class="line">n_hidden = 128</div><div class="line">n_output = 10</div><div class="line"></div><div class="line">learning_rate = 0.001</div><div class="line">train_iters = 1000</div><div class="line">batch_size = 64</div><div class="line"></div><div class="line">x = tf.placeholder(tf.float32, [None, time_step, n_input])</div><div class="line">y = tf.placeholder(tf.float32, [None, n_output])</div><div class="line"></div><div class="line">W = &#123;</div><div class="line">	&apos;hidden&apos; : tf.Variable(tf.random_normal([n_input, n_hidden])),</div><div class="line">	&apos;output&apos; : tf.Variable(tf.random_normal([n_hidden, n_output]))</div><div class="line">&#125;</div><div class="line"></div><div class="line">b = &#123;</div><div class="line">	&apos;hidden&apos; : tf.Variable(tf.random_normal([n_hidden])),</div><div class="line">	&apos;output&apos; : tf.Variable(tf.random_normal([n_output]))</div><div class="line">&#125;</div><div class="line"></div><div class="line">def RNN(x, W, b):</div><div class="line">	x = tf.transpose(x, [1, 0, 2])</div><div class="line">	x = tf.reshape(x, [-1, n_input])</div><div class="line">	x = tf.matmul(x, W[&apos;hidden&apos;]) + b[&apos;hidden&apos;]</div><div class="line">	x = tf.split(x, time_step, 0)</div><div class="line"></div><div class="line">	lstm_cell = tf.nn.rnn_cell.GRUCell(n_hidden)</div><div class="line">	outputs, _ = tf.contrib.rnn.static_rnn(lstm_cell, x, dtype = tf.float32)</div><div class="line">	return tf.matmul(outputs[-1], W[&apos;output&apos;]) + b[&apos;output&apos;]</div><div class="line"></div><div class="line">pred = RNN(x, W, b)</div><div class="line"></div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = pred, labels = y))</div><div class="line">optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)</div><div class="line"></div><div class="line">corrent_pred = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(corrent_pred, tf.float32))</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">	with tf.device(&apos;/cpu:0&apos;):</div><div class="line">		sess.run(init)</div><div class="line">		for step in range(train_iters):</div><div class="line">			batch_x, batch_y = mnist.train.next_batch(batch_size)</div><div class="line">			batch_x = batch_x.reshape(batch_size, time_step, n_input)</div><div class="line">			sess.run(optimizer, feed_dict = &#123;x: batch_x, y: batch_y&#125;)</div><div class="line">			if step % 100 == 0:</div><div class="line">				acc = sess.run(accuracy, feed_dict = &#123;x: batch_x, y: batch_y&#125;)</div><div class="line">				cost = sess.run(loss, feed_dict = &#123;x: batch_x, y: batch_y&#125;)</div><div class="line">				print(&quot;MSG : Epoch &#123;&#125;, Training_accuracy = &#123;:.6f&#125;, Training_loss = &#123;:.5f&#125;&quot;.format((step // 100) + 1, acc, cost))</div><div class="line"></div><div class="line">		test_data = mnist.test.images.reshape(-1, time_step, n_input)</div><div class="line">		test_labels = mnist.test.labels</div><div class="line">		print(&quot;MSG : Testing_accuracy = &#123;:.6f&#125;&quot;.format(sess.run(accuracy, feed_dict = &#123;x: test_data, y: test_labels&#125;)))</div></pre></td></tr></table></figure>
<p>利用CNN神经网络：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">from tensorflow.examples.tutorials.mnist import input_data</div><div class="line">import tensorflow as tf</div><div class="line">mnist = input_data.read_data_sets(&apos;MNIST/&apos;, one_hot = True)</div><div class="line"></div><div class="line">time_step = 28</div><div class="line">n_input = 28</div><div class="line">n_output = 10</div><div class="line">n_hidden = 1024</div><div class="line">learning_rate = 0.001</div><div class="line">train_iters = 20000</div><div class="line">batch_size = 64</div><div class="line">dropout = 0.5</div><div class="line"></div><div class="line">strides_size = 1</div><div class="line">kernal_size = 2</div><div class="line">window_size = 5</div><div class="line"></div><div class="line">def weight_variable(shape):</div><div class="line">	initial = tf.truncated_normal(shape, stddev = 0.1)</div><div class="line">	return tf.Variable(initial)</div><div class="line"></div><div class="line"></div><div class="line">def bias_variable(shape):</div><div class="line">	initial = tf.constant(0.1, shape = shape)</div><div class="line">	return tf.Variable(initial)</div><div class="line"></div><div class="line"></div><div class="line">def conv(x, W):</div><div class="line">	return tf.nn.conv2d(x, W, strides = [strides_size] * 4, padding = &apos;SAME&apos;)</div><div class="line"></div><div class="line"></div><div class="line">def max_pooling(x):</div><div class="line">	return tf.nn.max_pool(x, ksize = [1, window_size, window_size, 1], strides = [1, 2, 2, 1], padding = &apos;SAME&apos;)</div><div class="line"></div><div class="line"></div><div class="line">x = tf.placeholder(tf.float32, [None, time_step, n_input])</div><div class="line">x_image = tf.reshape(x, [-1, time_step, n_input, 1])</div><div class="line">y = tf.placeholder(tf.float32, [None, n_output])</div><div class="line">keep_prob = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line"># conv1 layer</div><div class="line">W_conv1 = weight_variable([window_size, window_size, 1, 32])</div><div class="line">b_conv1 = bias_variable([32])</div><div class="line"></div><div class="line"># conv2 layer</div><div class="line">W_conv2 = weight_variable([window_size, window_size, 32, 64])</div><div class="line">b_conv2 = bias_variable([64])</div><div class="line"></div><div class="line"># linear flatten layer</div><div class="line">W_fc1 = weight_variable([7*7*64, n_hidden])</div><div class="line">b_fc1 = bias_variable([n_hidden])</div><div class="line"></div><div class="line"># softmax layer</div><div class="line">W_fc2 = weight_variable([n_hidden, n_output])</div><div class="line">b_fc2 = bias_variable([n_output])</div><div class="line"></div><div class="line"></div><div class="line">def CNN(x, W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2, keep_prob):</div><div class="line">	# [-1, 28, 28, 1]</div><div class="line">	h_conv1 = tf.nn.relu(conv(x, W_conv1) + b_conv1)</div><div class="line">	h_pool1 = max_pooling(h_conv1)</div><div class="line">	h_pool1_drop = tf.nn.dropout(h_pool1, keep_prob)</div><div class="line"></div><div class="line">	# [-1, 14, 14, 32]</div><div class="line">	h_conv2 = tf.nn.relu(conv(h_pool1_drop, W_conv2) + b_conv2)</div><div class="line">	h_pool2 = max_pooling(h_conv2)</div><div class="line">	h_pool2_drop = tf.nn.dropout(h_pool2, keep_prob)</div><div class="line"></div><div class="line">	# [-1, 7, 7, 64]</div><div class="line">	h_fc1 = tf.reshape(h_pool2_drop, [-1, 7*7*64])</div><div class="line">	h_fc1 = tf.nn.relu(tf.matmul(h_fc1, W_fc1) + b_fc1)</div><div class="line">	h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</div><div class="line"></div><div class="line">	# [-1, n_hidden] -&gt; [-1, n_output]</div><div class="line">	# return tf.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</div><div class="line">	return tf.matmul(h_fc1_drop, W_fc2) + b_fc2</div><div class="line"></div><div class="line">pred = CNN(x_image, W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2, keep_prob)</div><div class="line"></div><div class="line"># loss = -tf.reduce_sum(y * tf.log(pred))</div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = pred, labels = y))</div><div class="line">optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)</div><div class="line"></div><div class="line">corrent_pred = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(corrent_pred, tf.float32))</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">	with tf.device(&apos;/gpu:0&apos;):</div><div class="line">		sess.run(init)</div><div class="line">		for step in range(train_iters):</div><div class="line">			batch_x, batch_y = mnist.train.next_batch(batch_size)</div><div class="line">			batch_x = batch_x.reshape(batch_size, time_step, n_input)</div><div class="line">			sess.run(optimizer, feed_dict = &#123;x: batch_x, y: batch_y, keep_prob: dropout&#125;)</div><div class="line">			if step % 100 == 0:</div><div class="line">				acc = sess.run(accuracy, feed_dict = &#123;x: batch_x, y: batch_y, keep_prob: 1.0&#125;)</div><div class="line">				cost = sess.run(loss, feed_dict = &#123;x: batch_x, y: batch_y, keep_prob: 1.0&#125;)</div><div class="line">				print(&quot;MSG : Epoch &#123;&#125;, Training accuracy = &#123;:.6f&#125;, Training loss = &#123;:.5f&#125;&quot;.format((step // 100) + 1, acc, cost))</div><div class="line"></div><div class="line">		test_data = mnist.test.images.reshape(-1, time_step, n_input)</div><div class="line">		test_labels = mnist.test.labels</div><div class="line">		print(sess.run(accuracy, feed_dict = &#123;x: test_data, y: test_labels, keep_prob: 1.0&#125;))</div></pre></td></tr></table></figure>
<p>至此，基本能够掌握Tensorflow在神经网络构建过程中的一些流程细节。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍（Introduction）&quot;&gt;&lt;a href=&quot;#介绍（Introduction）&quot; class=&quot;headerlink&quot; title=&quot;介绍（Introduction）&quot;&gt;&lt;/a&gt;介绍（Introduction）&lt;/h1&gt;&lt;p&gt;Tensorflow是一个使
    
    </summary>
    
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>挖掘神经网络的本质</title>
    <link href="http://yoursite.com/2017/08/09/Feature/"/>
    <id>http://yoursite.com/2017/08/09/Feature/</id>
    <published>2017-08-09T03:10:11.000Z</published>
    <updated>2017-08-09T03:11:43.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Features-amp-Feature-Representation"><a href="#Features-amp-Feature-Representation" class="headerlink" title="Features &amp; Feature Representation"></a>Features &amp; Feature Representation</h1><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在神经网络训练过程中，我们往往会因为无法理解输入和输出数据之间的关系而面临无从选择神经网络结构模块的问题。为了进一步理解神经网络的功能和明白每一层神经网络层对输出的贡献程度，我们就必须了解这些输入在经过神经网络处理后是如何改变和反应在输出数据中的。</p>
<h1 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h1><p>以传统的分类问题为例，想要利用神经网络解决分类的问题，就必须明确我们的输入数据拥有的哪些 <strong>特征（Features）</strong> 能够帮助我们区分这些输入从而将他们分配到不同的 <strong>类别（Labels）</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/jzBDTBp.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>不同的特征数据对分类的结果具有不同的影响力，这也使得我们的神经网络需要学习一个能够区分特征的能力，而这个能力就是我们所谓的 <strong>权重值（Weights）</strong>。不同的权重值控制输入的特征值能够以不同的力度作用在最终的结果上，从而达到区分标记的作用。</p>
<ul>
<li>以二维空间的散点二分类问题为例子，图中的点具有两个Label值，分别为 <strong>“蓝色”</strong> 和 <strong>“橙色”</strong>。而反应他们分布情况的特征可能有很多，比如空间的坐标值（X1 和 X2）或是距离原点（0, 0）的距离等。这里我们取坐标值作为输入的特征值。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/2wzMVJM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>特征值的输入方式有很多，除了特征值自己本身，我们还可以通过数学模型将这些特征值进行组合和转换，从而衍生出另一种特征值。这和神经网络层所做的事情十分类似，他们都是通过现有的特征想方设法组合出一些更加具有代表性的区分特征，从而拉近输入数据和Label之间的距离。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/QVsmwpV.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/dV8dNYU.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>假设我们的特征值 <strong>X1</strong> 能够将数据空间的分布从<strong>X1 = 0</strong>处切分开来。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/J3lsiIP.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/UQ2aBYH.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>而组合特征值 <strong>X1X2</strong> 能够将数据空间的分布从<strong>X1 = 0和X2 = 0</strong>处同时切分开来，这时我们就可以利用这些特征表示法对最终的分布集合进行一个调整：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/WZbaqm1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>图中左边为我们选择使用的输入特征值和对应的区分方式。经过3层的神经网络层，它能够将这些特征的区分方式进行组合（动态增强某些部分）和调整（动态削弱某个部分），得到另外一个特征的表示（Feature Representation），这些表示方式会对最后的模型进行直接的影响。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/xIKLGIq.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>神经网络的全连接（Fully Connected）也是有权重之分的，图中橙色的连接表示传入的Feature对当前的特征构建是有负向的影响（需要削弱）的，而相反蓝色的连接表示传入的Feature对当前的特征构建是有正向影响（需要加强）的。而线条的深浅则表示Feature对神经网络层的作用强度，越深的颜色表示影响越强烈。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/X2SQyYj.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>如果我们观察每一个神经网络层中产生的任何一个新的特征表示（Feature Representation），我们就能观察到它们是如何作用在神经网络分配中的。原先的Feature无法在图中画出圆形的间隔区域，因此我们需要通过神经网络的计算来对Feature进行 <strong>变形和组合</strong>，让这些Feature能够更好地拟合我们的数据集。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/vSK3uLp.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>训练过程中，神经网络会通过反向传递的方式动态调整layer中的Feature Representation，让这些形成的分割区域在经过了每次迭代之后能够更好的优化边缘，形成更完美的分类器。如果资料内部的噪声（Noise）比较少的时候，甚至可以达到100%的区分率（即loss = 0）。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/SBUWfnO.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>但是现实生活中的数据是无法做到完全没有噪声干扰的，些许的噪声都会让资料集看起来无法完全区隔开来（如上图所示）。这时候我们通常就会选择使用维度扩充的方式，让他们在更高维度上进行收敛（也就是寻找其他特征，其中X1为第一维度，X2为第二维度），然后在将这些特征压缩成其他的Feature Representation。</li>
</ul>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>训练完毕的模型可以很好地通过Feature Representation将数据集在有限维度空间中区隔开来。但是不能忽视的一点是，我们的模型是用来最终判断资料特性而选择的模型，不是为了完全拟合训练数据的产物。因此我们往往不会选择训练误差最小的模型作为我们的最终模型，原因是因为这些模型的灵活度太低。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/iMVS7Rs.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>如上图所示，深色的点表示我们测试集资料，不难看出测试集的分布情况和训练集还是具有一定的差距的，如果我们的模型过分依赖训练集的边缘特性，那么在预测过程中就没有办法很好地区分那些全新的（训练集中未出现的）数据，反而造成测试误差的提升。因此我们需要通过类似Cross Validation等评估方式来让模型训练结果保持在较好的一个的动态范围内。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Features-amp-Feature-Representation&quot;&gt;&lt;a href=&quot;#Features-amp-Feature-Representation&quot; class=&quot;headerlink&quot; title=&quot;Features &amp;amp; Feature
    
    </summary>
    
    
      <category term="Feature" scheme="http://yoursite.com/tags/Feature/"/>
    
      <category term="Feature Representation" scheme="http://yoursite.com/tags/Feature-Representation/"/>
    
      <category term="Neural Netword" scheme="http://yoursite.com/tags/Neural-Netword/"/>
    
  </entry>
  
  <entry>
    <title>十大常见机器学习算法</title>
    <link href="http://yoursite.com/2017/08/08/ML-algorithms/"/>
    <id>http://yoursite.com/2017/08/08/ML-algorithms/</id>
    <published>2017-08-08T08:09:23.000Z</published>
    <updated>2017-08-08T08:11:02.738Z</updated>
    
    <content type="html"><![CDATA[<p>常用的机器学习算法，几乎可以用在所有的数据问题上：</p>
<h2 id="线性回归（Linear-Regression）"><a href="#线性回归（Linear-Regression）" class="headerlink" title="线性回归（Linear Regression）"></a>线性回归（Linear Regression）</h2><p>线性回归通常用于根据<strong>连续变量</strong>估计实际数值等问题上。通过拟合最佳的<strong>直线</strong>来建立<strong>自变量（X，features）</strong> 和 <strong>因变量（Y，labels）</strong> 的关系。这条直线也叫做回归线，并用<strong>Y = a* X + b</strong>来表示。</p>
<p>在这个等式中：</p>
<ul>
<li><code>Y</code> : 因变量（也就是Labels）</li>
<li><code>a</code> : 斜率（也就是Weights）</li>
<li><code>X</code> : 自变量（也就是Features）</li>
<li><code>b</code> : 截距（也就是Bias）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/PSM7e7e.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>系数 <code>a</code> 和 <code>b</code> 可以通过<strong>最小二乘法</strong>（即让所有pairs带入线性表达式等号两边的方差和最小）获得。</p>
<h2 id="逻辑回归（Logistic-Regression）"><a href="#逻辑回归（Logistic-Regression）" class="headerlink" title="逻辑回归（Logistic Regression）"></a>逻辑回归（Logistic Regression）</h2><p>逻辑回归虽然名字中带有<strong>回归</strong>字样，但其实是一个<strong>分类</strong>算法而不是回归算法。该算法根据已知的一系列因变量估计<strong>离散的数值</strong>（0或1，代表假和真）。该算法通过将数据拟合进一个逻辑函数来预估一个事件发生的<strong>概率</strong>。由于其估计的对象是概率，所以输出的值大都在0和1之间。</p>
<p>逻辑回归通常用于解决二分类的问题，例如判断人是男是女等。逻辑回归就是通过人的一些基本性状特征来判断属于男女的概率。</p>
<p>从数学角度看，几率的对数使用的是<strong>预测变量的线性组合</strong>模型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Probability of event occurence / not occurence</span></div><div class="line">odds = p / (<span class="number">1</span> - p)</div><div class="line">ln(odds) = ln(p / (<span class="number">1</span> - p))</div><div class="line">logit(p) = ln(p / (<span class="number">1</span> - p)) = b0 + b1X1 + b2X2 + ... + bnXn</div></pre></td></tr></table></figure></p>
<p>式子中 <code>p</code> 指的是特征出现的概率，它选用使观察样本可能性最大的值（<strong>极大似然估计</strong>）作为参数，而不是通过最小二乘法得到。</p>
<ul>
<li><p>那么为什么要取对数log呢？</p>
<ul>
<li>简而言之就是对数这种方式是复制阶梯函数最好的方法之一。</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/hq1q9Z5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>关于改进模型的方法：<ul>
<li>加入交互项（<strong>X1 * X2</strong>等）</li>
<li>对输入输出进行正规化</li>
<li>使用非线性模型</li>
</ul>
</li>
</ul>
<h2 id="决策树（Decision-Tree）"><a href="#决策树（Decision-Tree）" class="headerlink" title="决策树（Decision Tree）"></a>决策树（Decision Tree）</h2><p>该算法属于监督式学习的一部分，主要用来处理分类的问题，它能够适用于分类连续因变量。我们将主体分成两个或者更多的类群，根据重要的属性或者自变量来尽可能多地区分开来。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/8Nj3E0r.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>根据不同的决策属性，我们可以依次将输入进行分类，最终会得到一个标签（Label）。为了把总体分成不同组别，需要用到许多技术，比如<strong>Gini、Information Gain</strong> 和 <strong>Entropy</strong> 等。</li>
</ul>
<h3 id="Gini"><a href="#Gini" class="headerlink" title="Gini"></a>Gini</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ltVHIxt.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>图中的实际分配曲线（红线）和绝对平衡线（绿线）之间的<strong>面积</strong>为A，和绝对不平衡线（蓝线）之间的面积为B，则横纵坐标之间的比例的<strong>Gini系数</strong>为：</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large {A \over A + B}" style="border:none;"></p>
<ul>
<li>A为零时，Gini系数为0，表示完全平衡。B为零时，Gini系数为1，表示完全不平衡。</li>
</ul>
<h3 id="Information-Gain-amp-Entropy"><a href="#Information-Gain-amp-Entropy" class="headerlink" title="Information Gain &amp; Entropy"></a>Information Gain &amp; Entropy</h3><p>在我们建立决策树的时候，常常会有许多属性，那么用哪一个属性作为数的根节点呢？这个时候就需要用到 <strong>信息增益（Information Gain）</strong> 来衡量一个属性区分以上数据样本的能力强弱。信息增益越大的属性作为数的根节点，就能使得这棵树更加简洁。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/9vwwsJt.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>以图中数据为例，要想知道信息增益，就必须先算出分类系的<strong>熵值（Entropy）</strong>。最终结果的label是yes或者no，所以统计数量之后共有9个yes和5个no。这时候<strong>P（“yes”） = 9 / 14，P（“no”） = 5 / 14</strong>。这里的熵值计算公式为：</li>
</ul>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Entropy(S) = {-(9 / 14) * log2(9 / 14) - (5 / 14) * log2(5 / 14)}" style="border:none;"></p>
<ul>
<li>之后就可以计算每一个属性特征的信息增益（Gain）了。以wind属性为例，Wind为Weak的共有8条，其中yes的有6条，no的有2条；为Strong的共有6条，其中yes的有3条，no的也有3条。因此相应的熵值为：</li>
</ul>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Entropy(Weak) = {-(6 / 8) * log2(6 / 8) - (2 / 8) * log2(2 / 8)}" style="border:none;"></p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Entropy(Strong) = {-(3 / 6) * log2(3 / 6) - (3 / 6) * log2(3 / 6)}" style="border:none;"></p>
<ul>
<li>现在就可以计算Wind属性的<strong>信息增益</strong>了：</li>
</ul>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Gain(Wind) = {Entropy(S) -(8 / 14) * Entropy(Weak) - (6 / 14) * Entropy(Strong)}" style="border:none;"></p>
<h2 id="支持向量机（Support-vector-machine-SVM）"><a href="#支持向量机（Support-vector-machine-SVM）" class="headerlink" title="支持向量机（Support vector machine,SVM）"></a>支持向量机（Support vector machine,SVM）</h2><p>SVM是一种常用的机器学习分类方式。在这个算法过程中，我们将每一笔数据在<strong>N维度的空间中用点表示（N为特征总数，Features）</strong>，每个特征的值是一个坐标的值。</p>
<p>如果以二维空间为例，此时有两个特征变量，我们会在空间中画出这两个变量的分布情况，每个点都有两个坐标（分别为tuples所具有的特征值组合）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/Ea3Jb95.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>现在我们找一条直线将两组不同的数据在维度空间中分开。分割的曲线满足让两个分组中的距离最近的两个点到直线的距离<strong>动态最优化</strong>（都尽可能最近）。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/NGsSXtM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>那么看到这里一定很多人和我一样有一个疑问，那就是这种线性分类的SVM和之前提到的逻辑回归（Logistic Regression）有什么<strong>区别</strong>呢？</li>
</ul>
<p>其实他们在二维空间的<strong>线性分类</strong>中都扮演了重要的角色，其主要区别大致可分为两类：</p>
<ul>
<li><p>寻找最优超平面的方式不同。</p>
<ul>
<li>形象来说就是Logistic模型找的超平面（二维中就是线）是尽可能让所有点都远离它。而SVM寻找的超平面，是只让最靠近的那些点远离，这些点也因此被称为<strong>支持向量样本</strong>，因此模型才叫<strong>支持向量机</strong>。</li>
</ul>
</li>
<li><p>SVM可以处理非线性的情况。</p>
<ul>
<li>比Logistic更强大的是，SVM还可以处理<strong>非线性</strong>的情况（经过优化之后的Logistic也可以，但是却更为复杂）。</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/5seIoZJ.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="朴素贝叶斯（Naive-Bayesian）"><a href="#朴素贝叶斯（Naive-Bayesian）" class="headerlink" title="朴素贝叶斯（Naive Bayesian）"></a>朴素贝叶斯（Naive Bayesian）</h2><p>在假设变量间<strong>相互独立</strong>的前提下，根据贝叶斯定理（Bayesian Theorem）可以推得朴素贝叶斯这个分类方法。通俗来说，一个朴素贝叶斯分类器假设分类的特性和其他特性不相关。朴素贝叶斯模型容易创建，而且在非监督式学习的大型数据样本集中非常有用，虽然简单，却能超越复杂的分类方法。其基本思想就是：对于给出的待分类项，求解<strong>在此项出现的条件下各个目标类别出现的概率</strong>，哪个最大，就认为此待分类项属于哪个类别。</p>
<p>贝叶斯定理提供了从P（c）、P（x）和P（x | c）计算后验概率P（c | x）的方法:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large P(c | x) = {P(x | c) P(c) \over P(x)}" style="border:none;"></p>
<p>式子中的变量表示如下：</p>
<ul>
<li>P（c | x）是已知预测变量（属性特征）的前提下，目标发生的后验概率。</li>
<li>P（c）是目标发生的先验概率。</li>
<li>P（x | c）是已知目标发生的前提下，预测变量发生的概率。</li>
<li>P（x）是预测变量的先验概率。</li>
</ul>
<p>举一个例子：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/gBuFCBd.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>这是一个训练资料集，提供一些身体特征，用来预测人的性别。此时假设特征之间独立且满足高斯分布，则得到下表：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/eSwuOJV.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>通过计算方差、均值等参数，同时确认Label出现的频率来判断训练集的样本分布概率，P（male） = P（female） = 0.5。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/qZPw7xC.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>此时给出测试资料，我们希望通过计算得到性别的后验概率从而判断样本的类型：</li>
</ul>
<p><strong>男子的后验概率</strong>:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Posterior(male) = {P(male) P(height | male) P(weight | male) P(footsize | male) \over evidence}" style="border:none;"></p>
<p><strong>女子的后验概率</strong>:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Posterior(female) = {P(female) P(height | female) P(weight | female) P(footsize | female) \over evidence}" style="border:none;"></p>
<p>证据因子（evidence）通常为常数，是用来对结果进行归一化的参数。</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Evidence = {(Posterior(female) + Posterior(male)) * evidence}" style="border:none;"></p>
<ul>
<li>因此我们可以计算出相应结果：</li>
</ul>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large P(height | male) = {1 \over \sqrt{2\pi\sigma^2}}exp({-(6 - \mu^2) \over 2\sigma^2})" style="border:none;"></p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large P(weight | male) = ..." style="border:none;"></p>
<ul>
<li>最后可以得出后验概率:</li>
</ul>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Posterior Numerator(male) = {6.1984e^{-09}}" style="border:none;"></p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large Posterior Numerator(female) = {5.3778e^{-04}}" style="border:none;"></p>
<ul>
<li>因此女性的概率较大，我们估计结果为女性。</li>
</ul>
<h2 id="K近邻（K-Nearest-Neighbors）"><a href="#K近邻（K-Nearest-Neighbors）" class="headerlink" title="K近邻（K Nearest Neighbors）"></a>K近邻（K Nearest Neighbors）</h2><p>该算法可以用于分类和回归问题，然而我们更常将其被用于解决分类问题上。KNN能够存储所有的案例，通过对比周围K个样本中的大概率情况，从而决定新的对象应该分配在哪一个类别。新的样本会被分配到它的K个最近最普遍的类别中去，因此KNN算法也是一个基于距离函数的算法。</p>
<p>这些<strong>距离函数</strong>可以是欧氏距离、曼哈顿距离、明氏距离或是汉明距离。前三个距离函数用于<strong>连续函数</strong>，最后一个用于<strong>分类变量</strong>。如果K = 1，新的样本就会被直接分到距离最近的那个样本所属的类别中。因此选择K是一个关系到模型精确度的问题。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/7sGrxz0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>如图所示，如果我们取K = 3，即为中间的圆圈内，我们可以直观地看出此时绿点应该被归为红三角的一类。而如果K = 5，此时延伸到虚线表示的圆，则此时绿点应该被归为蓝色的类。</li>
</ul>
<p>在选择KNN之前，我们需要考虑的事情有：</p>
<ul>
<li>KNN在K数量大的时候的计算成本很高。</li>
<li>变量（Features）应该先标准化（normalized），不然会被更高数量单位级别的范围带偏。</li>
<li>越是<strong>干净</strong>的资料效果越好，如果存在偏离度较高的杂讯噪声，那么在类别判断时就会收到干扰。</li>
</ul>
<h3 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h3><p>空间中点X = （X1，X2，X3，…，Xn）与点Y = （Y1，Y2，Y3，…，Yn）的欧氏距离为：</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large d(x, y) := {\sqrt{(X1 - Y1)^2 + (X2 - Y2)^2 + ... + (Xn - Yn)^2}}" style="border:none;"></p>
<h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h3><p>在平面上，坐标（X1，X2，…，Xn）的点和坐标（Y1，Y2，…，Yn）的点之间的曼哈顿距离为:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large {|X1 - Y1| + |X2 - Y2| + ... + |Xn - Yn|}" style="border:none;"></p>
<h3 id="明氏距离"><a href="#明氏距离" class="headerlink" title="明氏距离"></a>明氏距离</h3><p>两点 P = (X1，X2，…，Xn) 和 Q = （Y1，Y2，…，Yn）之间的明氏距离为:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large {(|X1 - Y1|^p + |X2 - Y2|^p + ... + |Xn - Yn|^p)^{1 \over p}}" style="border:none;"></p>
<ul>
<li>其中p取1时为曼哈顿距离，p取2时为欧氏距离。</li>
</ul>
<h3 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h3><p>对于固定长度n，汉明距离是该长度字符串向量空间上的度量，即表示长度n中不同字符串的个数。</p>
<p>例子：</p>
<ul>
<li><strong>“toned”</strong> 和 <strong>“roses”</strong> 之间的汉明距离就是3。因为其中 <strong>t - &gt; r，n -&gt; s，d -&gt; s</strong> 三个字符不相同。</li>
</ul>
<h2 id="K均值（K-means）"><a href="#K均值（K-means）" class="headerlink" title="K均值（K-means）"></a>K均值（K-means）</h2><p>K-means方法是一种<strong>非监督式学习</strong>的算法，能够解决<strong>聚类</strong>问题。使用K-means算法将一个数据样本归入一定数量的集群中（假设有K个）中，每一个集群的数据点都是均匀齐次的，并且异于其它集群。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/WQlIGo4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>K-means算法如何形成<strong>集群</strong>？</p>
<ul>
<li>给一个集群选择K个点，这些点称为质心。</li>
<li>给每一个数据点与距离最接近的质心形成一个集群，也就是K个集群。</li>
<li>根据现有的类别成员，找出每个类别的质心。</li>
<li>当有新的样本输入后，找到距离每个数据点最近的质心，并与质心对应的集群归为一类，计算新的质心位置，重复这个过程直到数据收敛，即质心位置不再改变。</li>
<li>如果新的数据点到多个质心的距离相同，则将这个数据点作为<strong>新的质心</strong>。</li>
</ul>
<p>如何决定K值？</p>
<ul>
<li>K-means算法涉及到集群问题，每个集群都有自己的质心。一个集群的内的质心和个数据点之间的距离的平方和形成了这个集群的平方值之和。我们能够直观地想象出当集群的内部的数据点增加时，K值会跟着下降（数据点越多，分散开来每个质心能够包揽的范围就变大了，这时候其他的集群就会被吞并或者分解）。<strong>集群元素数量的最优值</strong>也就是在集群的平方值之和最小的时候取得（每个点到质心的距离和最小，分类最精确）。</li>
</ul>
<h2 id="随机森林（Random-Forest）"><a href="#随机森林（Random-Forest）" class="headerlink" title="随机森林（Random Forest）"></a>随机森林（Random Forest）</h2><p>Random Forest是表示<strong>决策树总体</strong>的一个专有名词。在算法中我们有一系列的决策树（因此为<strong>森林</strong>）。为了根据一个新的对象特征将其分类，每一个决策树都有一个分类结果，称之为这个决策树<strong>投票</strong>给某一个分类群。这个森林选择获得其中（所有决策树）<strong>投票数最多</strong>的分类。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/xViexYM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Random Forest中的Decision Tree是如何形成的？</p>
<ul>
<li>如果训练集的样本数量为N，则从N个样本中用重置抽样的方式随机抽取样本。这个样本将作为决策树的训练资料。</li>
<li>假如有N个输入特征变量，则定义一个数字<strong>m &lt;&lt; M</strong>。m表示从M中随机选中的变量，这m个变量中最好的切分特征会被用来当成节点的决策特征（利用Information Gain等方式）。在构建其他决策树的时候，m的值<strong>保持不变</strong>。</li>
<li>尽可能大地建立每一个数的节点分支。</li>
</ul>
<h2 id="降维（Dimensionality-reduction）"><a href="#降维（Dimensionality-reduction）" class="headerlink" title="降维（Dimensionality reduction）"></a>降维（Dimensionality reduction）</h2><p>当今的社会中信息的捕捉量都是呈上升的趋势。各种研究信息数据都在尽可能地捕捉完善，生怕遗漏一些关键的特征值。对于这些数据中包含许多特征变量的数据而言，看似为我们的模型建立提供了充足的<strong>训练材料</strong>。但是这里却存在一个问题，那就是<strong>如何从上百甚至是上千种特征中区分出样本的类别呢？</strong>样本特征的<strong>重要程度</strong>又该如何评估呢？</p>
<ul>
<li>其实随着输入数据特征变量的增多，模型很难拟合众多样本变量（高维度）的数据分类规则。这样训练出来的模型不但<strong>效果差</strong>，而且<strong>消耗大量的时间</strong>。</li>
<li>这个时候，降维算法和别的一些算法（比如<strong>Decision Tree</strong>、<strong>Random Forest</strong>、<strong>主成分分析（PCA）</strong> 和 <strong>因子分析</strong>）就能帮助我们实现根据相关矩阵，压缩维度空间之后总结特征规律，最终再逐步还原到高维度空间的训练模式。</li>
</ul>
<h3 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h3><p>在多元统计分析中，PCA是一种分析、简化数据集的技术，经常用于减少数据集的维数，同时保留数据集中的<strong>对方差贡献最大</strong>的那些特征变量。</p>
<ul>
<li>该算法会根据不同维度的压缩（在这个维度上的<strong>投影</strong>）来测试<strong>各个维度对方差的影响</strong>，从而对每一个维度进行重新排序（影响最大的放在第一维度）。之后只需要取有限个数的维度进行训练，就能够保证模型拟合最佳的数据特征了。</li>
</ul>
<h3 id="因子分析"><a href="#因子分析" class="headerlink" title="因子分析"></a>因子分析</h3><p>该算法主要是从关联矩阵内部的依赖关系出发，把一些重要信息重叠，将错综复杂的变量归结为少数几个不相关的综合因子的多元统计方法。基本思想是：根据<strong>相关性大小</strong>把变量分租，使得同组内的变量之间相关性高，但不同组的变量不相关或者相关性低。每组变量代表一个基本结构，即公共因子。</p>
<h2 id="Gradient-Boost-amp-Adaboost"><a href="#Gradient-Boost-amp-Adaboost" class="headerlink" title="Gradient Boost &amp; Adaboost"></a>Gradient Boost &amp; Adaboost</h2><p>当我们想要处理很多数据来做一个具有高度预测能力的预测模型时，我们会用到Gradient Boost和AdaBoost这两种Boosting算法。<strong>Boosting算法</strong>是一种集成学习算法，它结合了建立在多个基础估计值上的预测结果，来增强单个估计值的准确度。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/eOKOw6J.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="Adaboost"><a href="#Adaboost" class="headerlink" title="Adaboost"></a>Adaboost</h3><p>Bossting能够对一份数据建立多个模型（如分类模型），通常这些模型都比较简单，称为<strong>弱分类器（Weak Learner）</strong>。每次分类都将上一次分错的数据权重值调大（放大的圆圈），然后再次进行分类，最终得到更好的结果。最终所有学习器（在这里值分类器）共同组成完整的模型。</p>
<h3 id="Gradient-Boost"><a href="#Gradient-Boost" class="headerlink" title="Gradient Boost"></a>Gradient Boost</h3><p>与Adaboost不同的是，Gradient Boost在迭代的时候选择梯度下降的方向来保证最后的结果最好。损失函数（Loss function）用来描述模型的误差程度，如果模型没有Over fitting，那么loss的值越大则误差越高。如果我们的模型能够让损失函数值下降，说明它在不断改进，而最好的方式就是让函数在<strong>梯度的方向</strong>上改变。（类似神经网络的<strong>Gradient Descend</strong>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的机器学习算法，几乎可以用在所有的数据问题上：&lt;/p&gt;
&lt;h2 id=&quot;线性回归（Linear-Regression）&quot;&gt;&lt;a href=&quot;#线性回归（Linear-Regression）&quot; class=&quot;headerlink&quot; title=&quot;线性回归（Linear R
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>医疗管理系统</title>
    <link href="http://yoursite.com/2017/08/04/database/"/>
    <id>http://yoursite.com/2017/08/04/database/</id>
    <published>2017-08-04T06:51:50.000Z</published>
    <updated>2017-08-04T06:54:32.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>本系统主要是基于 <code>Struts2 MVC架构</code> + <code>mysql资料库</code> 共同开发的医疗信息管理系统模型。利用JSP打造简易的网页与接口，让用户能够通过系统纪录和查询医疗的细节流程。</p>
<p><a href="https://github.com/EternalFeather/Medical_Management_System_with_Database" target="_blank" rel="external">下載鏈接</a></p>
<h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><ul>
<li><code>操作系统</code>：Windows10</li>
<li><code>资料库</code>：Mysql</li>
<li><code>IDE</code>：Eclipse</li>
<li><code>开发语言</code>：Jsp + Sql + Java</li>
</ul>
<h1 id="SQL-Table"><a href="#SQL-Table" class="headerlink" title="SQL Table"></a>SQL Table</h1><p>资料库端分为五个Table，分别为 <code>Department</code>、<code>Employee</code>、<code>Hospital</code>、<code>Patient</code> 和 <code>Report</code>。</p>
<h2 id="Attribute-Introduction"><a href="#Attribute-Introduction" class="headerlink" title="Attribute Introduction"></a>Attribute Introduction</h2><p><strong>Hospital Table:</strong> 記錄醫院的具體信息</p>
<ul>
<li>Hospital_ID:每間醫院的編號（唯一）</li>
<li>Hospital_Name:醫院的名稱</li>
<li>Hospital_Address:醫院的地理位置</li>
<li>Hospital_Scale:醫院的規模大小</li>
</ul>
<p><strong>Department Table:</strong> 記錄醫院里各個不同部門的具體信息</p>
<ul>
<li>Department_ID:醫院裏面不同部門的編號（唯一）</li>
<li>Department_Subject:部門的名稱</li>
<li>Department_People:部門的人數</li>
<li>Field:部門所掌管的職能</li>
</ul>
<p><strong>Employee Table:</strong> 記錄醫院工作人員的具體信息</p>
<ul>
<li>Doctor_ID:每個員工的編號（唯一）</li>
<li>Doctor_Name:員工的姓名</li>
<li>Doctor_Age:員工的年齡</li>
<li>Doctor_Specialty:員工的專長</li>
</ul>
<p><strong>Patient Table:</strong> 記錄病人的具體信息</p>
<ul>
<li>Patient_ID:每個病人的編號（唯一）</li>
<li>Patient_Name:病人的姓名</li>
<li>Patient_Age:病人的年齡</li>
<li>Patient_Disease:病人的癥狀</li>
</ul>
<p><strong>Report Table:</strong> 記錄病人病歷記錄的具體信息</p>
<ul>
<li>Report_ID:每個病歷記錄的編號（唯一）</li>
<li>Report_Disease:病歷記錄的病人癥狀</li>
<li>Report_PatientName:病歷記錄的病人姓名</li>
<li>Report_Medicine:病歷記錄的病人用藥情況</li>
</ul>
<h1 id="ER-Diagram"><a href="#ER-Diagram" class="headerlink" title="ER Diagram"></a>ER Diagram</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/qdBYNZI.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="Relation-Schema"><a href="#Relation-Schema" class="headerlink" title="Relation Schema"></a>Relation Schema</h1><table>
<thead>
<tr>
<th style="text-align:center">Hospital Schema</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Hospital_ID</td>
<td style="text-align:center">Hospital_Name</td>
<td style="text-align:center">Hospital_Address</td>
<td style="text-align:center">Hospital_Scale</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Department Schema</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Department_ID</td>
<td style="text-align:center">Department_Subject</td>
<td style="text-align:center">Department_People</td>
<td style="text-align:center">Field</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Employee Schema</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Doctor_ID</td>
<td style="text-align:center">Doctor_Name</td>
<td style="text-align:center">Doctor_Name</td>
<td style="text-align:center">Doctor_Specialty</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Patient Schema</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Patient_ID</td>
<td style="text-align:center">Patient_Name</td>
<td style="text-align:center">Patient_Age</td>
<td style="text-align:center">Patient_Disease</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Report Schema</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Report_ID</td>
<td style="text-align:center">Report_Disease</td>
<td style="text-align:center">Report_PatientName</td>
<td style="text-align:center">Report_Medicine</td>
</tr>
</tbody>
</table>
<h1 id="Relationship-Introduction"><a href="#Relationship-Introduction" class="headerlink" title="Relationship Introduction"></a>Relationship Introduction</h1><ul>
<li>每個醫院都會有許多不同的部門，每個部門都是隸屬於某一家醫院。</li>
<li>每個醫院部門都會招聘不同數量的員工，未退休的員工會屬於某一個部門。</li>
<li>所有負責醫療工作的員工都會給病人開具病歷證明，所有的病歷證明都是由醫療工作員工開具的。</li>
<li>所有的病人都有自己的病歷記錄，所有的病歷記錄記錄著該病人的醫療情況。</li>
<li>負責醫療工作的員工會給病人看病，同時醫院的員工也有可能是病人。</li>
</ul>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>配置好sql和server之后，就可以通过localhost或者IP来访问系统网址了，这里用的是Tomcat Server來訪問資料庫系統首頁。。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/OAdFgoI.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/czWAFBo.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>左邊的功能列表可以選擇需要操作的Entity進行不同的資料庫操作。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ukIeIjX.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>以醫院管理為例，進入醫院管理操作介面，系統會自動列出所有的數據庫資料。點擊左上角的<strong>添加</strong>按鈕可以添加新的醫院信息到database；同時可以通過<strong>Search</strong>的選項來索引資料庫裏面的資料；點擊操作欄位的<strong>修改和刪除</strong>可以分別對相應的資料進行修改和刪除；最後點擊右上角的<strong>手動修改和查詢</strong>可以分別通過手動輸入SQL指令來進行修改動作（insert，delete，update）和查詢動作（select）。</p>
<ul>
<li>添加介面：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/PDo43C2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以<strong>添加</strong>醫院的相關信息到數據庫。</p>
<ul>
<li>選擇操作：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/mYQk0G0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>系統會給出相應的<strong>檢索</strong>結果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/UGf1VbP.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>修改和刪除：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/9jEEf1k.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>點擊修改操作系統會自動捕捉當前的資料信息，方便進行<strong>修改</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/EZVj52s.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>點擊刪除操作系統會提示<strong>是否刪除</strong>，點擊確定則會從資料庫移除相應信息。</p>
<ul>
<li>手動修改和刪除：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/eknZV1t.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/fqo6fRa.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>點擊<strong>手動修改和刪除</strong>操作，系統會跳出相應的輸入框，可以通過手動輸入SQL指令來進行Select檢索或者Insert，Update，Delete等操作。</p>
<ul>
<li>Nested Query和Aggregate Query（以醫生管理為例）：<br>點擊Nested Query會跳轉至如下畫面。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/9P6SJ1w.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>分別點擊不同的按鈕可以<strong>跳轉</strong>至相應功能對應的介面。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/Cp7doj5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通過選項可以自動通過Button的方式呼叫資料庫，通過sql指令也可以進行資料庫的操作。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/df2ElPC.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通過選項操作同樣可以用button的方式呼叫資料庫操作，sql指令同樣也能夠進行相應的操作。（注：在sql對於Aggregate操作過程中需要對應下方的欄位進行as重命名）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;本系统主要是基于 &lt;code&gt;Struts2 MVC架构&lt;/
    
    </summary>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
      <category term="System" scheme="http://yoursite.com/tags/System/"/>
    
      <category term="Struts MVC" scheme="http://yoursite.com/tags/Struts-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Word2Vec on Wikipedia</title>
    <link href="http://yoursite.com/2017/08/04/word2vec/"/>
    <id>http://yoursite.com/2017/08/04/word2vec/</id>
    <published>2017-08-04T06:51:25.000Z</published>
    <updated>2017-08-04T07:53:29.800Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道语言在人际交往当中充当了重要的角色，理解语言的编码就能够了解对方所要表达的意思。而机器不同于人，无法从繁杂的文字当中快速提取有用的信息，因此需要借助一个能够代表文字语言的编码单位，也就是我们说的<strong>向量（Vector）</strong>。因此训练Word2Vec的模型，用来计算词语之间的相似度似乎成为了解决文字编码问题的不可或缺的重要途径之一。</p>
<h1 id="配置需求"><a href="#配置需求" class="headerlink" title="配置需求"></a>配置需求</h1><ul>
<li><code>Python3</code></li>
<li><code>Gensim</code> &gt;= 2.3.0 (<strong>沒試過更低的版本</strong>)</li>
<li><code>Opencc</code></li>
<li><code>jieba</code></li>
</ul>
<h1 id="模型训练语料"><a href="#模型训练语料" class="headerlink" title="模型训练语料"></a>模型训练语料</h1><ul>
<li>维基百科官方提供了大约11G的很好的英文語料： <a href="https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2" target="_blank" rel="external">開源數據鏈接</a>。</li>
<li>同時也提供了大約1.5G的中文語料： <a href="https://dumps.wikimedia.org/zhwiki/latest/zhwiki-latest-pages-articles.xml.bz2" target="_blank" rel="external">開源數據鏈接</a>。</li>
</ul>
<p>其主要的文档格式以 <code>.xml</code> 为主。</p>
<h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><ul>
<li>下載相應的Python執行檔：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/EternalFeather/Word2Vec-on-Wikipedia-Corpus.git</div></pre></td></tr></table></figure>
<h2 id="資料前處理"><a href="#資料前處理" class="headerlink" title="資料前處理"></a>資料前處理</h2><p>前處理第一階段需要將wiki的 <code>.xml</code> 格式的數據轉換成 <code>text</code> 格式的數據:</p>
<ul>
<li><p>通過 <code>word2vec_process.py</code> 實現，基本參數包括：</p>
<ul>
<li><code>-data</code>： 輸入的維基百科數據集。</li>
<li><code>-output</code>： 輸出的文件位置和名稱。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python word2vec_process.py -data enwiki-latest-pages-articles.xml.bz2 -output wiki.en.text</div></pre></td></tr></table></figure>
<p><strong>Tips:</strong> </p>
<ul>
<li>如果是中文維基百科的語料訓練時，會存在一些繁體和簡體混雜的中文字，如果想要統一字體格式，就可以使用Opencc將字體進行轉換：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opencc -i wiki.zh.text -o wiki.zh.text.jianti -c zht2zhs.ini</div></pre></td></tr></table></figure>
<ul>
<li>中文的維基百科數據接下來就是需要進行斷詞處理了，這裏使用的<strong>中文斷詞工具</strong>是 <code>jieba</code>。</li>
</ul>
<p>這裏利用了gensim裏面處理維基百科的class <code>WikiCorpus</code>，通過 <code>get_texts</code> function將每篇文章換行輸出成text文本，並且已經完成了去標點的工作。運行之後就能夠得到英文維基百科的數據文檔 <code>wiki.en.text</code>(參數可自行設定名稱)。</p>
<h2 id="模型訓練"><a href="#模型訓練" class="headerlink" title="模型訓練"></a>模型訓練</h2><p>有了文章的text數據集之後，無論是word2vec binary版本還是gensim的word2vec，都可以用來訓練我們的模型，不過後者的運算速度比較快。</p>
<ul>
<li><p>模型的建立通過 <code>word2vec_model.py</code> 實現，基本參數包括：</p>
<ul>
<li><code>-text</code>： 輸入的維基百科文字檔名稱。</li>
<li><code>-vector</code>： 輸出的向量文檔存儲位置和名稱（默認爲 <strong>wiki.en.text.vector</strong>）。</li>
<li><code>-core</code>： 多進程運行使用的cpu數量（默認爲全部）。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python word2vec_model.py -text wiki.en.text -vector wiki.en.text.vector -core 8</div></pre></td></tr></table></figure>
<h2 id="模型測試"><a href="#模型測試" class="headerlink" title="模型測試"></a>模型測試</h2><p>訓練結束之後就能得到一個gensim原始c版本的word2vec的vector格式的模型，這時候我們就可以利用這些模型進行一些文字的評估測試了：</p>
<ul>
<li><p>導入模型進行操作通過 <code>word2vec_eval.py</code> 實現，基本參數包括：</p>
<ul>
<li><code>-vector</code>： 載入的模型位置和名稱。</li>
<li><code>-mode</code>： 想要執行模型的功能名稱（包括 <em>similar<strong>【預測相關的words】、</strong>similarity*</em>【判斷兩個words的相似度】等）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python word2vec_eval.py -vector wiki.en.text.vector -mode similarity</div></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C" target="_blank" rel="external">我愛自然語言處理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道语言在人际交往当中充当了重要的角色，理解语言的编码就能够了解对方所要表达的意思。而机器不同于人，无法从繁杂的文字当中快速提取有用的信息，因此需要借助一个能够代表文字语言的编码单位，也就是我们说的&lt;strong&gt;向量（Vector）&lt;/strong&gt;。因此训练Word
    
    </summary>
    
    
      <category term="Word2Vec" scheme="http://yoursite.com/tags/Word2Vec/"/>
    
      <category term="Embedding" scheme="http://yoursite.com/tags/Embedding/"/>
    
  </entry>
  
  <entry>
    <title>中文情緒字典（Chinese Sentiment Lexicon）</title>
    <link href="http://yoursite.com/2017/08/04/sentiment/"/>
    <id>http://yoursite.com/2017/08/04/sentiment/</id>
    <published>2017-08-04T06:51:16.000Z</published>
    <updated>2017-08-04T07:58:08.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>利用 <code>PMI</code> 和 <code>SOC-PMI</code> 等語言統計分析算法，從現有文章中標記一些seed words，通過半監督式學習找出段落中隱含的其他情緒詞匯，從而建立起完整的情緒字典。</p>
<p>情緒字典的覆蓋範圍包括 <code>名詞</code> 、 <code>動詞</code> 和 <code>形容詞</code> 等部分，每個詞都會有一個正向分數（positive）和一個負向分數（negative）。兩個分數的高低可以判斷這個詞的情緒分布狀況。</p>
<h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><ul>
<li><code>Python2</code></li>
<li><code>JDK</code></li>
<li><code>jieba</code></li>
</ul>
<h1 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h1><ul>
<li>下載情緒字典程式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/EternalFeather/Chinese-Sentiment-Lexicon.git</div></pre></td></tr></table></figure>
<ul>
<li>將預設的Seed Word（也就是自行標記的幾個情緒面向詞匯）放入 <code>SentimentLexicon/data/input/Seedwords.txt</code>  中。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/3KEOqCF.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>將需要提取情緒詞匯的訓練文章放入 <code>SentimentLexicon/data/input/Corpus.txt</code> 中。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/nGJWyIO.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>運行 <code>SL.jar</code> 文件即可開始訓練過程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar &apos;SL.jar&apos;</div></pre></td></tr></table></figure>
<h1 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h1><ul>
<li>得到的結果會儲存在 <code>SentimentLexicon/data/Propagation/FinalMatrix.csv</code> 文件中。 </li>
</ul>
<p><img src="https://i.imgur.com/Ugyr8cq.png" alt=""></p>
<p>可以看出在比較詞的正負向上能夠取得比較可觀的結果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h1&gt;&lt;p&gt;利用 &lt;code&gt;PMI&lt;/code&gt; 和 &lt;code&gt;SOC-PMI&lt;/code&gt; 等語言統計分析算法，從現有文章中標記一些seed wo
    
    </summary>
    
    
      <category term="Sentiment Lexicon" scheme="http://yoursite.com/tags/Sentiment-Lexicon/"/>
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="PMI" scheme="http://yoursite.com/tags/PMI/"/>
    
  </entry>
  
  <entry>
    <title>Gal-game-on-Renpy</title>
    <link href="http://yoursite.com/2017/08/02/gal/"/>
    <id>http://yoursite.com/2017/08/02/gal/</id>
    <published>2017-08-02T07:09:53.000Z</published>
    <updated>2017-08-04T06:55:14.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安裝說明"><a href="#安裝說明" class="headerlink" title="安裝說明"></a>安裝說明</h1><p>Renpy Platform可以用來設計自己專屬的視覺小說遊戲。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/nkF3saW.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><a href="https://pan.baidu.com/s/1kVeIIoR" target="_blank" rel="external">Demo遊戲鏈接</a><br>提取密碼: <code>m0va</code></p>
<h1 id="素材來源"><a href="#素材來源" class="headerlink" title="素材來源"></a>素材來源</h1><p>遊戲使用的圖片、視頻以及音頻的剪輯原素材來源於 <code>FAVORITE</code> 和 <code>YUZUSOFT</code> 遊戲公司，未經授權不得用以商業目的性傳播和使用。大部分圖片經過PS修圖處理，<strong>如需轉載請注明出處</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/7RkEoRe.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="使用說明"><a href="#使用說明" class="headerlink" title="使用說明"></a>使用說明</h1><ul>
<li>將Github上 <code>images.rar</code> 中的三個文件放入下載好的遊戲文件中的 <code>game/images/</code> 目錄中。</li>
<li>運行 <code>.exe</code> 文件即可開始遊戲。</li>
</ul>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><ul>
<li>主界面（會根據劇情不同有所變化）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/kkJKDds.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>CG鑑賞頁面</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/sXbSQeM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/wEylyRQ.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/zz1W2PG.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>設定頁面</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ZdgAa0M.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>載入頁面</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/8MQf1cJ.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>遊戲分支選單</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/PzFMnpP.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>遊戲主題內容部分</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/ydrcpP9.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>遊戲即時選單</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/8Hq7y0e.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>選單 <code>ENCYCLOPEDIA</code> 遊戲介紹和玩法功能簡介</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/oBPr4mH.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/bHGIB3K.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安裝說明&quot;&gt;&lt;a href=&quot;#安裝說明&quot; class=&quot;headerlink&quot; title=&quot;安裝說明&quot;&gt;&lt;/a&gt;安裝說明&lt;/h1&gt;&lt;p&gt;Renpy Platform可以用來設計自己專屬的視覺小說遊戲。&lt;/p&gt;
&lt;figure class=&quot;image-bubb
    
    </summary>
    
    
      <category term="Renpy" scheme="http://yoursite.com/tags/Renpy/"/>
    
      <category term="Gal-game" scheme="http://yoursite.com/tags/Gal-game/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04配置深度學習開發環境（CUDA+CUDNN）</title>
    <link href="http://yoursite.com/2017/08/01/cuda/"/>
    <id>http://yoursite.com/2017/08/01/cuda/</id>
    <published>2017-08-01T08:18:31.000Z</published>
    <updated>2018-01-09T09:24:07.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顯卡規格查詢"><a href="#顯卡規格查詢" class="headerlink" title="顯卡規格查詢"></a>顯卡規格查詢</h1><p>首先需要確定自己顯卡的規格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lspci -vnn | grep VGA -A 12</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/Hqk5wzt.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其中<code>nvidia_375</code>就是顯卡的規格指數，後面會用到。</p>
<h1 id="安裝CUDA"><a href="#安裝CUDA" class="headerlink" title="安裝CUDA"></a>安裝CUDA</h1><p>首先確保本機沒有其他版本的cuda。<br>可以通過執行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get autoremove --purge cuda</div></pre></td></tr></table></figure></p>
<p>前往<code>/usr/local/</code>路徑下確認cuda已經清空，如果殘留有cuda或cuda+版本號的文件，可通過指令進行刪除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -r /usr/local/cuda</div></pre></td></tr></table></figure></p>
<p>如果此時執行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvidia-smi</div></pre></td></tr></table></figure></p>
<p>之後沒有反應，就可以開始進行下一步操作。</p>
<p>前往<a href="https://developer.nvidia.com/cuda-80-ga2-download-archive" target="_blank" rel="external">CUDA 8.0下載</a>頁面選擇好系統參數進行下載。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/uxl5TQY.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="配置CUDA環境"><a href="#配置CUDA環境" class="headerlink" title="配置CUDA環境"></a>配置CUDA環境</h2><p>Installation Instructions:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install cuda-8-0</div></pre></td></tr></table></figure></p>
<h1 id="安裝cuDNN"><a href="#安裝cuDNN" class="headerlink" title="安裝cuDNN"></a>安裝cuDNN</h1><p>前往<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="external">cuDNN下載</a>點擊同意並選擇規格後開始下載。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/VsYqKL0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="配置cuDNN環境"><a href="#配置cuDNN環境" class="headerlink" title="配置cuDNN環境"></a>配置cuDNN環境</h2><p>Installation Instructions:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar xvzf cudnn-8.0-linux-x64-v5.1-ga.tgz</div><div class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</div><div class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</div><div class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</div></pre></td></tr></table></figure></p>
<h3 id="設定環境變數"><a href="#設定環境變數" class="headerlink" title="設定環境變數"></a>設定環境變數</h3><p>接下來到<code>.bashrc</code>檔案：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim ~/.bashrc</div></pre></td></tr></table></figure>
<p>將下面的指令復制到配置文件的末尾：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/lib/nvidia-375</div><div class="line">export CUDA_HOME=/usr/local/cuda</div><div class="line">export PATH=$PATH:/usr/local/cuda/bin</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：其中的/usr/lib/nvidia-375就是之前查詢的顯卡規格。</p>
<h2 id="查看配置結果"><a href="#查看配置結果" class="headerlink" title="查看配置結果"></a>查看配置結果</h2><p>配置完成後可以查看是否成功配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvidia-smi -l</div></pre></td></tr></table></figure>
<p>即可即時查看GPU的運作情況</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/xnyMEH3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="安裝Tensorflow-gpu"><a href="#安裝Tensorflow-gpu" class="headerlink" title="安裝Tensorflow-gpu"></a>安裝Tensorflow-gpu</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install tensorflow-gpu</div></pre></td></tr></table></figure>
<p>安裝之後會加入pip library中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip freeze</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://i.imgur.com/qHCfJgT.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如此以來就可以用GPU操作深度學習的框架了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;顯卡規格查詢&quot;&gt;&lt;a href=&quot;#顯卡規格查詢&quot; class=&quot;headerlink&quot; title=&quot;顯卡規格查詢&quot;&gt;&lt;/a&gt;顯卡規格查詢&lt;/h1&gt;&lt;p&gt;首先需要確定自己顯卡的規格：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
      <category term="CUDA" scheme="http://yoursite.com/tags/CUDA/"/>
    
      <category term="cuDNN" scheme="http://yoursite.com/tags/cuDNN/"/>
    
  </entry>
  
  <entry>
    <title>聊天机器人训练语料整理</title>
    <link href="http://yoursite.com/2017/07/25/Corpus/"/>
    <id>http://yoursite.com/2017/07/25/Corpus/</id>
    <published>2017-07-25T07:15:05.000Z</published>
    <updated>2017-08-04T06:54:46.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dialog-Datasets-for-Training-Chatbot"><a href="#Dialog-Datasets-for-Training-Chatbot" class="headerlink" title="Dialog Datasets for Training Chatbot"></a>Dialog Datasets for Training Chatbot</h1><p>在进行Chatbot的研究过程中，除了要有一个漂亮的模型之外，还需要有大量可供训练的语料来强化我们的聊天机器人。越干净的语料就能训练出越接近人类自然语言回复的Chatbot。</p>
<ul>
<li>目前网上公开的语料大多是一些带有噪音的、数量有限的语料。在这里总结了一些可行的语料以及一些利用爬取工具得到的语料，其中包括：</li>
</ul>
<h1 id="基本公开语料"><a href="#基本公开语料" class="headerlink" title="基本公开语料"></a>基本公开语料</h1><ul>
<li><p><a href="https://github.com/rustch3n/dgk_lost_conv" target="_blank" rel="external">dgk_shooter_min.conv</a><br>中文电影对白语料，噪音大，由于对话未区分说话人，因此对白问答关系难以对应。</p>
</li>
<li><p><a href="https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data/" target="_blank" rel="external">ChatBot多语种聊天语料</a><br>ChatterBot聊天引擎所提供的基本语聊，涵盖语种范围广，但是数量不多，但质量较高，适合模型测试。</p>
</li>
<li><p><a href="https://github.com/karthikncode/nlp-datasets#question-answering" target="_blank" rel="external">DataSets for Natural Language Processing</a><br>这个是人为收集总结的自然语言处理研究论文以及对应的数据资料集，主要覆盖方面包括了： <strong>Question Answering, Dialogue Systems</strong> 以及 <strong>Goal-Oriented Dialogue System</strong> 等。文本都由英文构成，可用于机器翻译和对话模型使用。</p>
</li>
<li><p><a href="https://github.com/rustch3n/dgk_lost_conv/tree/master/results" target="_blank" rel="external">小黄鸡对话机器人训练语料</a><br>这就是网络上流行的小黄鸡对话机器人的训练语料，包括了 <strong>xiaohuangji50w_fenciA.conv.zip （已分词）</strong> 和 <strong>xiaohuangji50w_nofenci.conv.zip （未分词）</strong> 两个部分，分词以 <strong>“/”</strong> 区隔开来，并没有语义上的划分。语料中含有较多表情颜文字，总体对话字数较少，杂讯较多。</p>
</li>
<li><p><a href="https://github.com/Samurais/egret-wenda-corpus" target="_blank" rel="external">白鹭时代中文问答语料</a><br>由白鹭时代官方论坛问答版块的问题及回复组成，回复选取了标注 <strong>“最佳答案”</strong> 的记录为目标。人工审核资料，给每一个问题一个可以接受的答案。数量不多，多为问答模式。</p>
</li>
<li><p><a href="https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html" target="_blank" rel="external">Cornell_Movie-Dialogs_Corpus</a><br>康奈尔大学影视对话资料集，语料包含对话人名称信息，语料为英文，以多轮对话为主。</p>
</li>
</ul>
<h1 id="个人爬取语聊（初步整理）"><a href="#个人爬取语聊（初步整理）" class="headerlink" title="个人爬取语聊（初步整理）"></a>个人爬取语聊（初步整理）</h1><ul>
<li><p><a href="https://github.com/EternalFeather/Chatbot-Training-Corpus/tree/master/news%20corpus" target="_blank" rel="external">中文新闻语料</a><br>利用爬虫从各大新闻网站上爬取的新闻头条和简讯。</p>
</li>
<li><p><a href="https://github.com/EternalFeather/Chatbot-Training-Corpus/tree/master/PTT_charactors" target="_blank" rel="external">PTT八卦版推文</a><br>利用爬虫从社交软体PTT上对于八卦分类板块的内容进行爬取，原始资料为 <a href="">PTT八卦板推文.txt</a> 其中包括一些符号和空格杂讯，过滤杂讯（利用统计方式按比例替换成固定符号，降低资料复杂度）之后，通过 <strong>单字</strong> 或 <a href="https://github.com/EternalFeather/Chatbot-Training-Corpus/tree/master/PTT_words" target="_blank" rel="external">词组</a>（jieba段词） 等不同方式建立问答语料和字典。</p>
</li>
</ul>
<h1 id="License"><a href="#License" class="headerlink" title="License:"></a>License:</h1><p>公开语料的版权归原作者所有，未经允许不得一个人名义投入盈利性活动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dialog-Datasets-for-Training-Chatbot&quot;&gt;&lt;a href=&quot;#Dialog-Datasets-for-Training-Chatbot&quot; class=&quot;headerlink&quot; title=&quot;Dialog Datasets for 
    
    </summary>
    
    
      <category term="Chatbot" scheme="http://yoursite.com/tags/Chatbot/"/>
    
      <category term="Corpus" scheme="http://yoursite.com/tags/Corpus/"/>
    
      <category term="Dialogue" scheme="http://yoursite.com/tags/Dialogue/"/>
    
  </entry>
  
  <entry>
    <title>Python简单学</title>
    <link href="http://yoursite.com/2017/07/25/Python/"/>
    <id>http://yoursite.com/2017/07/25/Python/</id>
    <published>2017-07-25T06:10:56.000Z</published>
    <updated>2017-08-04T06:55:33.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Foundation-Summary"><a href="#Foundation-Summary" class="headerlink" title="Foundation Summary"></a>Foundation Summary</h1><ul>
<li><strong>Print</strong></li>
<li><strong>Calculation Function</strong></li>
<li><strong>Variable</strong></li>
<li><strong>While loop</strong></li>
<li><strong>For loop</strong></li>
<li><strong>If/Elif/Else Condition</strong></li>
<li><strong>Function Definition[Def] with/without parameters</strong></li>
<li><strong>Global or Local Variable</strong></li>
<li><strong>Read or Write files</strong><ul>
<li><code>readlines()</code> and <code>readline()</code></li>
</ul>
</li>
<li><strong>Class</strong><ul>
<li><code>__init__</code> constructor</li>
</ul>
</li>
<li><strong>input</strong></li>
<li><strong>Tuple &amp; List</strong><ul>
<li>Both are iterative</li>
</ul>
</li>
<li><strong>List</strong><ul>
<li><code>append</code> <code>insert</code> <code>remove</code></li>
</ul>
</li>
<li><strong>Multi-dimention List</strong></li>
<li><strong>Dictionary</strong><ul>
<li><code>del(also can used for list)</code></li>
</ul>
</li>
<li><strong>Import</strong></li>
<li><strong>Continue &amp; Break</strong></li>
<li><strong>Error processing[Try/Except]</strong></li>
<li><p><strong>Zip</strong></p>
<ul>
<li>Output is an object<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = [1, 2, 3]</div><div class="line">b = [4, 5]</div><div class="line"># Convert to list</div><div class="line">list(zip(a, b))</div><div class="line"># Also we can use for loop to iterate each elements in object</div><div class="line">for i, j in zip(a,b)</div><div class="line"># Output of list(zip(a, b)) is: [(1, 4), (2, 5)]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Lambda</strong><br>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def fun1(x, y):</div><div class="line">    return(x + y)</div><div class="line">fun2 = lambda x, y : x + y</div><div class="line"># fun1 is the same as fun2</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Map</strong></p>
<ul>
<li>Output is an object<br>Example:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def fun1(x, y):</div><div class="line">    return(x + y)</div><div class="line">list(map(fun1, [1, 2, 3], [4, 5]))</div><div class="line"># Output is: [5, 7]</div><div class="line"># Note: The output of fun1([1], [2]) is: [1, 2]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Copy &amp; Deepcopy</strong></p>
<ul>
<li>python object share address(point)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># ********Copy********:</div><div class="line">a = [1, 2, 3]</div><div class="line">b = a</div><div class="line">b[0] = 11</div><div class="line">a = b = [11, 2, 3]</div><div class="line"># id(a) == id(b) is True</div><div class="line"></div><div class="line">import copy</div><div class="line">c = copy.copy(a)</div><div class="line"># id(a) == id(b) is False</div><div class="line"># Note:</div><div class="line">a = [1, 2, [3, 4]]</div><div class="line">d = copy.copy(a)</div><div class="line"># id(a) == id(d) is False</div><div class="line"># id(a[2]) == id(d[2]) is True</div><div class="line"># Because d[2] == a[2] are both object</div><div class="line"># Note2:</div><div class="line">a = 2</div><div class="line">b = a</div><div class="line">a = 3</div><div class="line"># b = 2 auto copy</div><div class="line"># ********Deepcopy ********:</div><div class="line">e = copy.deepcopy(a)</div><div class="line"># id(a[2]) == id(e[2]) is False</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="Multi-Thread"><a href="#Multi-Thread" class="headerlink" title="Multi-Thread"></a>Multi-Thread</h1><h2 id="Lead-to-Improve-Efficiency"><a href="#Lead-to-Improve-Efficiency" class="headerlink" title="Lead to Improve Efficiency"></a>Lead to Improve Efficiency</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line">import time</div><div class="line"># check the number of threads</div><div class="line">print(threading.active_count())</div><div class="line"># check all the details of threads </div><div class="line">print(threading.enumerate())</div><div class="line"># check which threads are working</div><div class="line">print(threading.current_thread())</div><div class="line"># ********Extend********:</div><div class="line">def thread_job():</div><div class="line">    print(&quot;MSG : This is a new Thread, number = %s\n&quot; % threading.current_thread())</div><div class="line">    for i in range(10):</div><div class="line">        time.sleep(0.1)</div><div class="line">    print(&quot;MSG : T1 Finished.\n&quot;)</div><div class="line">new_thread = threading.Thread(target = thread_job, Name = &apos;T1&apos;)</div><div class="line">def thread_job2():</div><div class="line">    print(&quot;MSG : T2 Start.\n&quot;)</div><div class="line">    print(&quot;MSG : T2 Finished.\n&quot;)</div><div class="line">new2_thread = threading.Thread(target = thread_job2, Name = &apos;T2&apos;)</div><div class="line">new_thread.start()</div><div class="line">new2_thread.start()</div><div class="line"># ********Join********:</div><div class="line"># print(&quot;MSG : Done.\n&quot;)</div><div class="line"># when we run the code &quot;Done&quot; will show before &quot;T2 Finished&quot; </div><div class="line">new2_thread.join()</div><div class="line">print(&quot;MSG : Done.\n&quot;)</div><div class="line"># T1 is slower than T2, so that &quot;Done&quot; will show before &quot;T1 Finished&quot;</div></pre></td></tr></table></figure>
<h2 id="Example-of-queue-using-in-thread"><a href="#Example-of-queue-using-in-thread" class="headerlink" title="Example of queue using in thread:"></a>Example of queue using in thread:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># ********Queue********:</div><div class="line">import threading</div><div class="line">import time</div><div class="line">from queue import Queue</div><div class="line"></div><div class="line">def job(l, q):</div><div class="line">    for i in range(len(l)):</div><div class="line">        l[i] = l[i] ** 2</div><div class="line">        time.sleep(1)</div><div class="line">    # thread can not return value</div><div class="line">    # return l</div><div class="line">    q.put(l)</div><div class="line"></div><div class="line">def multithreading():</div><div class="line">    q = Queue()</div><div class="line">    threads = []</div><div class="line">    data = [[1,2,3], [4,5,6], [7,8,9]]</div><div class="line">    for i in range(3):</div><div class="line">        t = threading.Thread(target = job, args = (data[i], q))</div><div class="line">        t.start()</div><div class="line">        print(&quot;MSG : Number of thread is %s&quot; % threading.active_count())</div><div class="line">        threads.append(t)</div><div class="line">    [t.join() for t in threads]</div><div class="line">    results = []</div><div class="line">    for _ in range(3):</div><div class="line">        results.append(q.get())</div><div class="line">    print(results)</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    multithreading()</div></pre></td></tr></table></figure>
<h2 id="Global-Interpreter-lock-GIL"><a href="#Global-Interpreter-lock-GIL" class="headerlink" title="Global Interpreter lock(GIL):"></a>Global Interpreter lock(GIL):</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># ********GIL********:</div><div class="line"># GIL shows that only one calculation unit can be run at a time</div><div class="line"># Therefore, for example, the efficiency of 4-threading is not equal to normal&apos;s * 4</div><div class="line">import threading</div><div class="line">from queue import Queue</div><div class="line">import copy</div><div class="line">import time</div><div class="line"></div><div class="line">def job(l, q):</div><div class="line">    result = sum(l)</div><div class="line">    q.put(result)</div><div class="line"></div><div class="line">def multi(l):</div><div class="line">    q = Queue()</div><div class="line">    threads = []</div><div class="line">    for i in range(4):</div><div class="line">        t = threading.Thread(target = job, args = (copy.copy(l), q), name = &apos;T%i&apos; % i)</div><div class="line">        t.start()</div><div class="line">        threads.append(t)</div><div class="line">    [t.join() for t in threads]</div><div class="line">    total = 0</div><div class="line">    for _ in range(4):</div><div class="line">        total += q.get()</div><div class="line">    print(total)</div><div class="line">    </div><div class="line">def normal(l):</div><div class="line">    total = sum(l)</div><div class="line">    print(total)</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    l = list(range(1000000))</div><div class="line">    current_time = time.time()</div><div class="line">    normal(l*4)</div><div class="line">    print(&apos;MSG : normal time: &apos;, time.time() - current_time)</div><div class="line">    current_time = time.time()</div><div class="line">    multi(l)</div><div class="line">    print(&apos;MSG : multithreading time: &apos;, time.time() - current_time)</div></pre></td></tr></table></figure>
<h2 id="Lock-example-Squential-operation-multi-thread"><a href="#Lock-example-Squential-operation-multi-thread" class="headerlink" title="Lock example(Squential operation multi-thread)"></a>Lock example(Squential operation multi-thread)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># ********Lock********:</div><div class="line">imort threading</div><div class="line"></div><div class="line">def job1():</div><div class="line">    global A, lock</div><div class="line">    lock.acquire()</div><div class="line">    for i in range(10):</div><div class="line">        A += 1</div><div class="line">        print(&apos;MSG : job1 &apos;, A)</div><div class="line">    lock.release()</div><div class="line">    </div><div class="line">def job2():</div><div class="line">    global A, lock</div><div class="line">    lock.acquire()</div><div class="line">    for i in range(10):</div><div class="line">        A += 10</div><div class="line">        print(&apos;MSG : job2 &apos;, A)</div><div class="line">    lock.release()</div><div class="line">        </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    lock = threading.Lock()</div><div class="line">    A = 0</div><div class="line">    t1 = threading.Thread(target = job1)</div><div class="line">    t2 = threading.Thread(target = job2)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div></pre></td></tr></table></figure>
<h1 id="Multiprocessing"><a href="#Multiprocessing" class="headerlink" title="Multiprocessing"></a>Multiprocessing</h1><h2 id="Create-a-process"><a href="#Create-a-process" class="headerlink" title="Create a process"></a>Create a process</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># ********Extend********:</div><div class="line">import multiprocessing as mp</div><div class="line">import threading as td</div><div class="line"></div><div class="line">def job(a, b):</div><div class="line">    print(a + b)</div><div class="line"></div><div class="line"># processing must run in __main__</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    new_process = mp.Process(target = job, args = (1, 2))</div><div class="line">    new_process.start()</div><div class="line">    new_process.join()</div></pre></td></tr></table></figure>
<h2 id="Example-of-queue-using-in-processing"><a href="#Example-of-queue-using-in-processing" class="headerlink" title="Example of queue using in processing:"></a>Example of queue using in processing:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># ********Queue********:</div><div class="line">import multiprocessing as mp</div><div class="line"></div><div class="line">def job(q):</div><div class="line">    result = 0</div><div class="line">    for i in range(1000):</div><div class="line">        result += i + i ** 2 + i ** 3</div><div class="line">    # return (result)</div><div class="line">    q.put(result)</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    q = mp.Queue()</div><div class="line">    # Don&apos;t forget the &apos;,&apos; after args while the number of parameter is one</div><div class="line">    p1 = mp.Process(target = job, args = (q, ))</div><div class="line">    p2 = mp.Process(target = job, args = (q, ))</div><div class="line">    p1.start()</div><div class="line">    p2.start()</div><div class="line">    p1.join()</div><div class="line">    p2.join()</div><div class="line">    result1 = q.get()</div><div class="line">    result2 = q.get()</div><div class="line">    print(result1 + result2)</div></pre></td></tr></table></figure>
<h2 id="Efficiency-Comparison-normal-multithreading-multiprocessing"><a href="#Efficiency-Comparison-normal-multithreading-multiprocessing" class="headerlink" title="Efficiency Comparison(normal, multithreading, multiprocessing)"></a>Efficiency Comparison(normal, multithreading, multiprocessing)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"># ********Efficiency Comparison********:</div><div class="line">import multiprocessing as mp</div><div class="line">import threading as td</div><div class="line">from queue import Queue</div><div class="line">import time</div><div class="line"></div><div class="line">def job(q):</div><div class="line">    result = 0</div><div class="line">    for i in range(100000):</div><div class="line">        result += i + i ** 2 + i ** 3</div><div class="line">    # return (result)</div><div class="line">    q.put(result)</div><div class="line">    </div><div class="line">def normal():</div><div class="line">    result = 0</div><div class="line">    for _ in range(2):</div><div class="line">        for i in range(100000):</div><div class="line">            result += i + i ** 2 + i ** 3</div><div class="line">    print(&apos;MSG : normal &apos;, result)</div><div class="line">    </div><div class="line">def multiprocess():</div><div class="line">    q = mp.Queue()</div><div class="line">    p1 = mp.Process(target = job, args = (q, ))</div><div class="line">    p2 = mp.Process(target = job, args = (q, ))</div><div class="line">    p1.start()</div><div class="line">    p1.join()</div><div class="line">    p2.start()</div><div class="line">    p2.join()</div><div class="line">    result1 = q.get()</div><div class="line">    result2 = q.get()</div><div class="line">    print(&quot;MSG : Processing &quot;, result1 + result2)</div><div class="line">    </div><div class="line">def multithread():</div><div class="line">    q = Queue()</div><div class="line">    t1 = td.Thread(target = job, args = (q, ))</div><div class="line">    t2 = td.Thread(target = job, args = (q, ))</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div><div class="line">    result1 = q.get()</div><div class="line">    result2 = q.get()</div><div class="line">    print(&quot;MSG : Threading &quot;, result1 + result2)</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    current_time = time.time()</div><div class="line">    normal()</div><div class="line">    print(&quot;MSG : normal time: &quot;, time.time() - current_time)</div><div class="line">    current_time = time.time()</div><div class="line">    multithread()</div><div class="line">    print(&quot;MSG : multithread time: &quot;, time.time() - current_time)</div><div class="line">    current_time = time.time()</div><div class="line">    multiprocess()</div><div class="line">    print(&quot;MSG : multiprocess time: &quot;, time.time() - current_time )</div></pre></td></tr></table></figure>
<h2 id="Processing-Pool"><a href="#Processing-Pool" class="headerlink" title="Processing Pool"></a>Processing Pool</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># ********Pool********:</div><div class="line">import multiprocessing as mp</div><div class="line"></div><div class="line">def job(x):</div><div class="line">    return x * x</div><div class="line"></div><div class="line">def multiprocess():</div><div class="line">    pool = mp.Pool(processes = 3)</div><div class="line">    # type = &apos;list&apos;</div><div class="line">    result = pool.map(job, range(10))</div><div class="line">    print(result)</div><div class="line">    # type = &apos;int&apos; </div><div class="line">    result = pool.apply_async(job, (2, ))</div><div class="line">    print(result.get())</div><div class="line">    # Note: pool.apply_async can only input one number for iterating</div><div class="line">    # type = &apos;object&apos;</div><div class="line">    multi_result = [pool.apply_async(job,(i, )) for i in range(10)]</div><div class="line">    print([result.get() for result in multi_result])</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    multiprocess()</div></pre></td></tr></table></figure>
<h2 id="Shared-memory"><a href="#Shared-memory" class="headerlink" title="Shared memory"></a>Shared memory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ********Shared memory********:</div><div class="line">import multiprocessing as mp</div><div class="line"></div><div class="line">value = mp.Value(&apos;d&apos;, 1)</div><div class="line"># can be only one dimension</div><div class="line">array = mp.Array(&apos;i&apos;, [1,2,3])</div><div class="line"># Value and Array can be share among multiple cores</div></pre></td></tr></table></figure>
<h2 id="Lock-example-avoid-different-cores-processing-out-of-order-with-shared-variable"><a href="#Lock-example-avoid-different-cores-processing-out-of-order-with-shared-variable" class="headerlink" title="Lock example(avoid different cores processing out of order with shared variable)"></a>Lock example(avoid different cores processing out of order with shared variable)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># ********Lock********:</div><div class="line">import multiprocessing as mp</div><div class="line">import time</div><div class="line"></div><div class="line">def job(v, num, l):</div><div class="line">    l.acquire()</div><div class="line">    for _ in range(10):</div><div class="line">        time.sleep(0.1)</div><div class="line">        v.value += num</div><div class="line">        print(v.value)</div><div class="line">    l.release()</div><div class="line"></div><div class="line">def multiprocess():</div><div class="line">    l = mp.Lock()</div><div class="line">    v = mp.Value(&apos;i&apos;, 0)</div><div class="line">    p1 = mp.Process(target = job, args = (v, 1, l))</div><div class="line">    p2 = mp.Process(target = job, args = (v, 3, l))</div><div class="line">    p1.start()</div><div class="line">    p2.start()</div><div class="line">    p1.join()</div><div class="line">    p2.join()</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    multiprocess()</div></pre></td></tr></table></figure>
<h1 id="Data-Processing"><a href="#Data-Processing" class="headerlink" title="Data Processing"></a>Data Processing</h1><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="Numpy-Foundation"><a href="#Numpy-Foundation" class="headerlink" title="Numpy Foundation"></a>Numpy Foundation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ********Numpy Foundation********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">array = np.array([[1,2,3],[2,3,4]])</div><div class="line">print(array)</div><div class="line">print(&quot;MSG : number of dims= &quot;, array.ndim)</div><div class="line"># If only have one dimension, shape will be (num, ) which represent it can be iterated</div><div class="line">print(&quot;MSG : shape= &quot;, array.shape)</div><div class="line">print(&quot;MSG : size= &quot;, array.size)</div></pre></td></tr></table></figure>
<h3 id="Numpy-Array"><a href="#Numpy-Array" class="headerlink" title="Numpy Array"></a>Numpy Array</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># ********Numpy Array********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">a = np.array([[2,3,4], [5,6,7]], dtype = np.int)</div><div class="line">print(a.dtype)</div><div class="line"></div><div class="line">b = np.zeros((3, 4), dtype = np.int32)</div><div class="line">print(b)</div><div class="line"></div><div class="line">c = np.ones((3, 4), dtype = np.int32)</div><div class="line">print(c)</div><div class="line"></div><div class="line"># The output is a list of numbers that are approximate to zero </div><div class="line">d = np.empty((3, 4), dtype = np.int32)</div><div class="line">print(d)</div><div class="line"></div><div class="line">e = np.arange(10, 20, 2)</div><div class="line">f = np.arange(12).reshape((3,4))</div><div class="line">print(e)</div><div class="line">print(f)</div><div class="line"></div><div class="line">g = np.linspace(1, 10, 20)</div><div class="line">print(g)</div></pre></td></tr></table></figure>
<h3 id="Some-Useful-Numpy-Calculation-Formula"><a href="#Some-Useful-Numpy-Calculation-Formula" class="headerlink" title="Some Useful Numpy Calculation Formula"></a>Some Useful Numpy Calculation Formula</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"># ********Numpy Calculation********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">a = np.array([10, 20, 30, 40])</div><div class="line">b = np.arange(4)</div><div class="line">c = a - b</div><div class="line"># Output list composed of int numbers</div><div class="line">print(c)</div><div class="line"># Output list composed of boolean elements</div><div class="line">print(b &lt; 3)</div><div class="line">np.dot(a, b)</div><div class="line">rd = np.arange(2, 6)</div><div class="line"># Output has 2 dimensions(0 -&gt; col; 1 -&gt; row)</div><div class="line">np.sum(rd, axis = 1)</div><div class="line">np.min(rd, axis = 0)</div><div class="line">np.max(rd)</div><div class="line">np.argmin(rd)</div><div class="line">np.mean(rd)</div><div class="line">np.average(rd)</div><div class="line">np.median(rd)</div><div class="line"># Output is [2, 5, 9, 14]</div><div class="line">np.cumsum(rd)</div><div class="line"># Output is [1, 1, 1]</div><div class="line">np.diff(rd)</div><div class="line"># Output composed of multi-dimensional array representing  the row and col number of all nonzero elements in rd array respectively</div><div class="line">np.nonzero(rd)</div><div class="line"># sort among each dimensions independent</div><div class="line">np.sort(rd)</div><div class="line">np.sort(rd.reshape((2, 2)))</div><div class="line"># transpose also we can use rd.T to transpose directly</div><div class="line">np.transpose(rd)</div><div class="line"># matrix multiplication</div><div class="line">(rd.T).dot(rd)</div><div class="line">np.clip(rd, 2, 4)</div><div class="line"># Note: we can use axis to choose 0 -&gt; col or 1 -&gt; row as the target for calculation</div></pre></td></tr></table></figure>
<h3 id="Search-From-Numpy-Array"><a href="#Search-From-Numpy-Array" class="headerlink" title="Search From Numpy Array"></a>Search From Numpy Array</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># ********Numpy Index Search********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">A = np.arange(3, 15).reshape((3, 4))</div><div class="line">A[2] # Output is [11, 12, 13, 14]</div><div class="line">A[2][1] </div><div class="line"># the same as</div><div class="line">A[1, 2]</div><div class="line">A[:, 1]</div><div class="line">A[1, 1:2]</div><div class="line">for row in A:</div><div class="line">    print(row)</div><div class="line"># Trick</div><div class="line">for colume in A.T:</div><div class="line">    print(colume)</div><div class="line"># flat function parse elements from A like a generator</div><div class="line"># Note: A.flat is different from A.flatten()</div><div class="line"># pre-one is an object and the next output a list</div><div class="line">for item in A.flat:</div><div class="line">    print(item)</div></pre></td></tr></table></figure>
<h3 id="Merge-Numpy-Array"><a href="#Merge-Numpy-Array" class="headerlink" title="Merge Numpy Array"></a>Merge Numpy Array</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># ********Merge Numpy Array********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">A = np.array([1, 1, 1])</div><div class="line">B = np.array([2, 2, 2])</div><div class="line"># vertical stack with output [[1, 1, 1], [2, 2, 2]]</div><div class="line">C = np.vstack((A, B))</div><div class="line">print(A.shape, C.shape)</div><div class="line"># Horizontal stack with with output [1, 1, 1, 2, 2, 2]</div><div class="line">D = np.hstack((A, B))</div><div class="line"># Note: transpose function can not convert shape(3,) into shape(,3)</div><div class="line">A_ = A[:, np.newaxis]) # newaxis is an extend dimension</div><div class="line"># If we want to get output by merge col-values like [[1, 2], [1, 2], [1, 2]] we can use:</div><div class="line">E = np.hstack((A[:, np.newaxis], B[:, np.newaxis]))</div><div class="line"># the same as:</div><div class="line">F = np.concatenate((A_, A_), axis = 1)</div><div class="line"># Note: np.concatenate((A, B), axis = 1) will shuffle an error because concatenate will reduce dimension when mergement operation happened, and A or B only have one dimension</div></pre></td></tr></table></figure>
<h3 id="Split-Numpy-Array"><a href="#Split-Numpy-Array" class="headerlink" title="Split Numpy Array"></a>Split Numpy Array</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ********Split Numpy Array********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">A = np.arange(12).reshape((3, 4))</div><div class="line"># every pieces should have the same length</div><div class="line">np.split(A, 2, axis = 1)</div><div class="line"># If you want to split into pieces that in different size</div><div class="line"># Binary split from left to right</div><div class="line">np.array_split(A, 3, axis = 1)</div><div class="line"># Vertical split</div><div class="line">np.vsplit(A, 3)</div><div class="line"># Horizontal split</div><div class="line">np.hsplit(A, 2)</div></pre></td></tr></table></figure>
<h3 id="Numpy-Array-Copy"><a href="#Numpy-Array-Copy" class="headerlink" title="Numpy Array Copy"></a>Numpy Array Copy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># ********Numpy Array Copy********:</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">a = np.arange(4, dtype = np.float32)</div><div class="line">b = a</div><div class="line">c = a</div><div class="line">d = b</div><div class="line">a[0] = 0.3</div><div class="line"># now a = b = c = d = [0.30000001, 1., 2., 3.]</div><div class="line">b is a # result is True</div><div class="line"># Note: copy object connected with point</div><div class="line">b = a.copy() # deep copy</div><div class="line"># or</div><div class="line">import copy</div><div class="line">b = copy.copy(a)</div><div class="line">a is b # result is False</div></pre></td></tr></table></figure>
<h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="Pandas-Foundation"><a href="#Pandas-Foundation" class="headerlink" title="Pandas Foundation"></a>Pandas Foundation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># ********Pandas Data Representation********:</div><div class="line">import pandas as dp</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">s = pd.Series([1, 3, 6, np.nan, 44, 1])</div><div class="line">dates = pd.date_range(&apos;20170101&apos;, periods = 6)</div><div class="line">df = pd.DataFrame(np.random.randn(6, 4), index = dates, columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df1 = pd.DataFrame(np.arange(12).reshape((3, 4)))</div><div class="line">df2 = pd.DataFrame(&#123;&apos;A&apos;: 1., &apos;B&apos;: pd.Timestamp(&apos;20130102&apos;), &apos;C&apos;: pd.Series(1, index = list(range(4)), dtype = &apos;float32&apos;), &apos;D&apos;: np.array([3] * 4, dtype = &apos;int32&apos;), &apos;E&apos;: pd.Categorical([&apos;test&apos;, &apos;train&apos;, &apos;test&apos;, &apos;train&apos;]), &apos;F&apos;: &apos;foo&apos;&#125;)</div><div class="line">print(df2.dtypes)</div><div class="line">print(df2.index)</div><div class="line">print(df2.columns)</div><div class="line">print(df2.values)</div><div class="line"># Only fit to number elements</div><div class="line">print(df2.describe()) # result index includes count, mean, std, min, 25%, 50%, 75%, max...</div><div class="line">print(df2.T)</div><div class="line"># Sort for columns</div><div class="line">print(df2.sort_index(axis = 1, ascending = False))</div><div class="line"># Sort for column values</div><div class="line">print(df2.sort_values(by = &apos;E&apos;))</div></pre></td></tr></table></figure>
<h3 id="Pandas-Data-Sampling"><a href="#Pandas-Data-Sampling" class="headerlink" title="Pandas Data Sampling"></a>Pandas Data Sampling</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># ********Data Sampling********:</div><div class="line">import pandas as dp</div><div class="line"></div><div class="line">df = pd.DataFrame(np.arange(24).reshape((6, 4)), index = pd.date_range(&apos;20130101&apos;, periods = 6), columns = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])</div><div class="line">print(df[&apos;A&apos;]) </div><div class="line"># the same as :</div><div class="line">print(df.A)</div><div class="line">print(df[0: 3], &apos;\n&apos;, df[&apos;20130101&apos;: &apos;20130103&apos;])</div><div class="line"># select by label:</div><div class="line">print(df.loc[&apos;20130102&apos;])</div><div class="line">print(df.loc[&apos;20130102&apos;, [&apos;A&apos;, &apos;B&apos;]])</div><div class="line"># select by position:</div><div class="line">print(df.iloc[3, 1])</div><div class="line">print(df.iloc[[1, 3, 5], 1: 3])</div><div class="line"># mixed selection:</div><div class="line">print(df.ix[:3, [&apos;A&apos;, &apos;C&apos;]])</div><div class="line"># Boolean indexing selection:</div><div class="line">print(df[df.A &gt; 8])</div><div class="line"># multi-conditions(Can not use &apos;and&apos;):</div><div class="line">print(df[df[2] &gt; 3][df[1] &lt; 2])</div></pre></td></tr></table></figure>
<h3 id="Pandas-Value-Config"><a href="#Pandas-Value-Config" class="headerlink" title="Pandas Value Config"></a>Pandas Value Config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ********Pandas change value********:</div><div class="line">import pandas as dp</div><div class="line"></div><div class="line">df = pd.DataFrame(np.arange(24).reshape((6, 4)), index = pd.date_range(&apos;20130101&apos;, periods = 6), columns = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])</div><div class="line">df.iloc[2, 2] = 1111</div><div class="line">df.loc[&apos;20130101&apos;, &apos;B&apos;] = 2222</div><div class="line">df[df[&apos;A&apos;] &gt; 0] = 0</div><div class="line"># add a new column</div><div class="line">df[&apos;F&apos;] = np.nan</div><div class="line">df[&apos;E&apos;] = pd.Series(np.arange(6, dtype = np.int32)+1, index = pd.date_range(&apos;20130101&apos;, periods = 6))</div></pre></td></tr></table></figure>
<h3 id="Pandas-Handling-Nan"><a href="#Pandas-Handling-Nan" class="headerlink" title="Pandas Handling Nan"></a>Pandas Handling Nan</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ********Pandas NaN********:</div><div class="line">import pandas as dp</div><div class="line"></div><div class="line">df = pd.DataFrame(np.arange(24).reshape((6, 4)), index = pd.date_range(&apos;20130101&apos;, periods = 6), columns = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])</div><div class="line">df.iloc[0, 1] = np.nan</div><div class="line">df.iloc[1, 2] = np.nan</div><div class="line"># &apos;any&apos; means we drop the row as long as nan exist, &apos;all&apos; means we drop the row if all the elements are nan</div><div class="line">print(df.dropna(axis = 0, how = &apos;any&apos;)) # how = &#123;&apos;any&apos;, &apos;all&apos;&#125;</div><div class="line">print(df.drop(&apos;A&apos;, axis = 1))</div><div class="line"># replace nan</div><div class="line">print(df.fillna(value = 0))</div><div class="line">print(df.isnull()) # result is a dictionary with &apos;True&apos; and &apos;False&apos;</div><div class="line">print(np.any(df.isnull()) == True)</div></pre></td></tr></table></figure>
<h3 id="Pandas-Read-and-Write"><a href="#Pandas-Read-and-Write" class="headerlink" title="Pandas Read and Write"></a>Pandas Read and Write</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># ********Pandas Read and Write********:</div><div class="line">import pandas as dp</div><div class="line"></div><div class="line"># Some useful function like: read_csv, read_excel, read_sql, read_json ...</div><div class="line"></div><div class="line">df = pd.read_csv(&apos;Sample.csv&apos;, &apos;r&apos;)</div><div class="line"># Sample.csv</div><div class="line"># A,B,C,D</div><div class="line"># 0,1,2,3</div><div class="line"># 4,5,6,7</div><div class="line"># 8,9,10,11</div><div class="line"></div><div class="line"># Save as pickle file</div><div class="line">df.to_pickle(&apos;Sample.pickle&apos;)</div></pre></td></tr></table></figure>
<h3 id="Pandas-Concatenating"><a href="#Pandas-Concatenating" class="headerlink" title="Pandas Concatenating"></a>Pandas Concatenating</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># ********Pandas Concatenating********:</div><div class="line">import pandas as dp</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">df1 = pd.DataFrame(np.zeros((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df2 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df3 = pd.DataFrame(np.ones((3, 4))*2, columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line"># ignore_index will reset the index from top to bottom</div><div class="line">result1 = pd.concat([df1, df2, df3], axis = 0, ignore_index = True)</div><div class="line"></div><div class="line"># concat-join, [&apos;inner&apos;, &apos;outer&apos;]</div><div class="line">df4 = pd.DataFrame(np.zeros((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], index = [1, 2, 3])</div><div class="line">df5 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;], index = [2, 3, 4])</div><div class="line"># use NaN as the default value</div><div class="line">result2 = pd.concat([df4, df5], ignore_index = True, join = &apos;inner&apos;) # &apos;inner&apos; only remain the same parts</div><div class="line"></div><div class="line"># concat-join_axes</div><div class="line">result3 = pd.concat([df4, df5], axis = 1, join_axes = [df4.index]) # result&apos;s index is only the index of df4</div><div class="line"></div><div class="line"># append</div><div class="line">df6 = pd.DataFrame(np.zeros((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df7 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">df8 = pd.DataFrame(np.ones((3, 4)), columns = [&apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;], index = [2, 3, 4])</div><div class="line">result4 = df6.append(df7, ignore_index = True)</div><div class="line">result5 = df6.append([df7, df8])</div><div class="line">s1 = pd.Series([1, 2, 3, 4], index = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</div><div class="line">result6 = df6.append(s1, ignore_index = True)</div></pre></td></tr></table></figure>
<h3 id="Pandas-Merge-concat-without-the-same-parts"><a href="#Pandas-Merge-concat-without-the-same-parts" class="headerlink" title="Pandas Merge(concat without the same parts)"></a>Pandas Merge(concat without the same parts)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># ********Pandas Merge********:</div><div class="line">import pandas as dp</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># merge by index named &apos;key&apos;(may be used in database)</div><div class="line">df1 = pd.DataFrame(&#123;&apos;key&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;, &apos;K3&apos;], &apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;], &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;]&#125;)</div><div class="line">df2 = pd.DataFrame(&#123;&apos;key&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;, &apos;K3&apos;], &apos;C&apos;: [&apos;C0&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;], &apos;D&apos;: [&apos;D0&apos;, &apos;D1&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;)</div><div class="line">result = pd.merge(df1, df2, on = &apos;key&apos;) # we have to make sure these two frames contain the same index named &apos;key&apos;</div><div class="line"></div><div class="line"># consider two keys</div><div class="line">df1 = pd.DataFrame(&#123;&apos;key1&apos;: [&apos;K0&apos;, &apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;], &apos;key2&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K0&apos;, &apos;K1&apos;], &apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;], &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;]&#125;)</div><div class="line">df2 = pd.DataFrame(&#123;&apos;key1&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K1&apos;, &apos;K2&apos;], &apos;key2&apos;: [&apos;K0&apos;, &apos;K0&apos;, &apos;K0&apos;, &apos;K0&apos;], &apos;C&apos;: [&apos;C0&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;], &apos;D&apos;: [&apos;D0&apos;, &apos;D1&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;)</div><div class="line"># default join = &apos;inner&apos;</div><div class="line">result = pd.merge(df1, df2, on = [&apos;key1&apos;, &apos;key2&apos;])</div><div class="line">result2 = pd.merge(df1, df2, on = [&apos;key1&apos;, &apos;key2&apos;], how = &apos;outer&apos;) # how = &#123;&apos;left&apos;, &apos;right&apos;, &apos;outer&apos;, &apos;inner&apos;&#125;</div><div class="line"></div><div class="line"># consider indicator(detail of merge)</div><div class="line">df1 = pd.DataFrame(&#123;&apos;col1&apos;: [0, 1], &apos;col_left&apos;: [&apos;a&apos;, &apos;b&apos;]&#125;)</div><div class="line">df2 = pd.DataFrame(&#123;&apos;col1&apos;: [1, 2, 2], &apos;col_right&apos;: [2, 2, 2]&#125;)</div><div class="line">result = pd.merge(df1, df2, on = &apos;col1&apos;, how = &apos;outer&apos;, indicator = True)</div><div class="line">result1 = pd.merge(df1, df2, on = &apos;col1&apos;, how = &apos;outer&apos;, indicator = &apos;indicator_column&apos;) # rename &apos;indicator&apos;</div><div class="line"></div><div class="line"># merged by index</div><div class="line">df1 = pd.DataFrame(&#123;&apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;], &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;]&#125;, index = [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;])</div><div class="line">df2 = pd.DataFrame(&#123;&apos;C&apos;: [&apos;C0&apos;, &apos;C2&apos;, &apos;C3&apos;], &apos;D&apos;: [&apos;D0&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;, index = [&apos;K0&apos;, &apos;K2&apos;, &apos;K3&apos;])</div><div class="line">result = pd.merge(df1, df2, left_index = True, right_index = True, how = &apos;outer&apos;)</div><div class="line">result1 = pd.merge(df1, df2, left_index = True, right_index = True, how = &apos;outer&apos;)</div><div class="line"></div><div class="line"># handle overlapping</div><div class="line">df1 = pd.DataFrame(&#123;&apos;k&apos;: [&apos;K0&apos;, &apos;K1&apos;, &apos;K2&apos;], &apos;age&apos;: [1, 2, 3]&#125;)</div><div class="line">df2 = pd.DataFrame(&#123;&apos;k&apos;: [&apos;K0&apos;, &apos;K0&apos;, &apos;K3&apos;], &apos;age&apos;: [4, 5, 6]&#125;)</div><div class="line">result = pd.merge(df1, df2, on = &apos;k&apos;, suffixes = [&apos;_boy&apos;, &apos;_girl&apos;], how = &apos;inner&apos;)</div></pre></td></tr></table></figure>
<h3 id="Pandas-Plot-View"><a href="#Pandas-Plot-View" class="headerlink" title="Pandas Plot(View)"></a>Pandas Plot(View)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># ********Pandas Plot********:</div><div class="line">import pandas as dp</div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># Series</div><div class="line">data = pd.Series(np.random.randn(1000), index = np.arange(1000))</div><div class="line">data = data.cumsum()</div><div class="line"># plt.plot(x = horizontal_value1, y = vertical_value)</div><div class="line">data.plot()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># DataFrame</div><div class="line">data = pd.DataFrame(np.random.randn(1000).reshape((250, 4)), index = np.arange(250), columns = list((&quot;ABCD&quot;)))</div><div class="line">data = data.cumsum()</div><div class="line">data.plot()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># scatter -&gt; plt.scatter(x = .., y = ..)</div><div class="line"># plot methods = &#123;&apos;bar&apos;, &apos;hist&apos;, &apos;box&apos;, &apos;kde&apos;, &apos;area&apos;, &apos;scatter&apos;, &apos;hexbin&apos;, &apos;pie&apos;&#125;</div><div class="line">a = data.plot.scatter(x = &apos;A&apos;, y = &apos;B&apos;, color = &apos;DarkBlue&apos;, label = &apos;Class 1&apos;) # only can hold 2 elements</div><div class="line">data.plot.scatter(x = &apos;A&apos;, y = &apos;C&apos;, color = &apos;DarkGreen&apos;, label = &apos;Class 2&apos;, ax = a)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><h2 id="Matplotlib-Foundation"><a href="#Matplotlib-Foundation" class="headerlink" title="Matplotlib Foundation"></a>Matplotlib Foundation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ********Matplotlib Foundation********:</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">x = np.linspace(-1, 1, 50)</div><div class="line">y = x * 2 + 1</div><div class="line">plt.plot(x, y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="Matplotlib-Figure"><a href="#Matplotlib-Figure" class="headerlink" title="Matplotlib Figure"></a>Matplotlib Figure</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ********Matplotlib Figure********:</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">x = np.linspace(-3, 3, 50)</div><div class="line">y1 = 2 * x + 1</div><div class="line">y2 = x ** 2</div><div class="line">plt.figure()</div><div class="line">plt.plot(x, y1)</div><div class="line">plt.figure(num = 3, figsize = (8, 5))</div><div class="line">plt.plot(x, y1)</div><div class="line">plt.plot(x, y2, color = &apos;red&apos;, linewidth = 1.0, linestyle = &apos;--&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="Matplotlib-Setting"><a href="#Matplotlib-Setting" class="headerlink" title="Matplotlib Setting"></a>Matplotlib Setting</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"># ********Matplotlib Setting********:</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">x = np.linspace(-3, 3, 50)</div><div class="line">y1 = 2 * x + 1</div><div class="line">y2 = x ** 2</div><div class="line">plt.figure()</div><div class="line">plt.plot(x, y2)</div><div class="line">plt.plot(x, y1, color = &apos;red&apos;, linewidth = 1.0, linestyle = &apos;--&apos;)</div><div class="line">plt.xlim((-1, 2))</div><div class="line">plt.ylim((-2, 3))</div><div class="line">plt.xlabel(&apos;I am X&apos;)</div><div class="line">plt.ylabel(&apos;I am Y&apos;)</div><div class="line">new_ticks = np.linspace(-1, 2, 5) # steps</div><div class="line">plt.xticks(new_ticks)</div><div class="line">plt.yticks([-2, -1.8, 0, 1.22, 3], [r&apos;$really\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\ good$&apos;]) # alpha need write as &apos;\alpha&apos;</div><div class="line"></div><div class="line"># gca = &apos;get current axis&apos;</div><div class="line">ax = plt.gca()</div><div class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;) # right side of boundarys</div><div class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</div><div class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</div><div class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</div><div class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0)) # &apos;data&apos; can set to &apos;outward&apos; , &apos;axes&apos;... </div><div class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, 0))</div><div class="line"></div><div class="line"># Legend</div><div class="line">x = np.linspace(-3, 3, 50)</div><div class="line">y1 = 2 * x + 1</div><div class="line">y2 = x ** 2</div><div class="line">plt.figure()</div><div class="line">plt.xlim((-1, 2))</div><div class="line">plt.ylim((-2, 3))</div><div class="line">plt.xlabel(&apos;I am X&apos;)</div><div class="line">plt.ylabel(&apos;I am Y&apos;)</div><div class="line">new_ticks = np.linspace(-1, 2, 5) # steps</div><div class="line">plt.xticks(new_ticks)</div><div class="line">plt.yticks([-2, -1.8, 0, 1.22, 3], [r&apos;$really\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\ good$&apos;]) # alpha need write as &apos;\alpha&apos;</div><div class="line">l1, = plt.plot(x, y2, label = &apos;up&apos;) # Don&apos;t forget &apos;,&apos;</div><div class="line">l2, = plt.plot(x, y1, color = &apos;red&apos;, linewidth = 1.0, linestyle = &apos;--&apos;, label = &apos;down&apos;)</div><div class="line">plt.legend(handles = [l1, l2], labels = [&apos;line 1&apos;, &apos;line 2&apos;], loc = &apos;best&apos;) # loc = &#123;&apos;best&apos;, &apos;upper&apos;, &apos;lower right&apos;, &apos;center&apos;...&#125;</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="Matplotlib-Annotation"><a href="#Matplotlib-Annotation" class="headerlink" title="Matplotlib Annotation"></a>Matplotlib Annotation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># ********Matplotlib Annotation********:</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">x = np.linspace(-3, 3, 50)</div><div class="line">y = 2 * x + 1</div><div class="line">plt.figure(num = 1, figsize = (8, 5))</div><div class="line">plt.plot(x, y)</div><div class="line">ax = plt.gca()</div><div class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</div><div class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</div><div class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</div><div class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0))</div><div class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</div><div class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, 0))</div><div class="line"></div><div class="line">X0 = 1</div><div class="line">Y0 = 2 * X0 + 1</div><div class="line"># Point</div><div class="line">plt.scatter(X0, Y0, s = 50, color = &apos;b&apos;)</div><div class="line"># Line</div><div class="line">plt.plot([X0, X0], [Y0, 0], &apos;k--&apos;, lw = 2.5)</div><div class="line"># Choice one</div><div class="line">plt.annotate(r&apos;$2x+1=%s$&apos; % Y0, xy = (X0, Y0), xycoords = &apos;data&apos;, xytext = (+30, -30), textcoords = &apos;offset points&apos;, fontsize = 16, arrowprops = dict(arrowstyle = &apos;-&gt;&apos;, connectionstyle = &apos;arc3, rad = .2&apos;))</div><div class="line"># Choice two</div><div class="line">plt.text(-3.7, 3, r&apos;$This\ is\ some\ text.\ \mu\ \sigma_i\ \alpha_t$&apos;, fontdict = &#123;&apos;size&apos;: 16, &apos;color&apos;: &apos;r&apos;&#125;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Foundation-Summary&quot;&gt;&lt;a href=&quot;#Foundation-Summary&quot; class=&quot;headerlink&quot; title=&quot;Foundation Summary&quot;&gt;&lt;/a&gt;Foundation Summary&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
      <category term="Pandas" scheme="http://yoursite.com/tags/Pandas/"/>
    
      <category term="Matplotlib" scheme="http://yoursite.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>利用LSTM模型进行手写识别</title>
    <link href="http://yoursite.com/2017/07/25/RNN/"/>
    <id>http://yoursite.com/2017/07/25/RNN/</id>
    <published>2017-07-25T04:03:41.000Z</published>
    <updated>2017-08-04T06:55:59.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Recurrent-Neural-Netword-RNN-Using-Tensorflow"><a href="#Recurrent-Neural-Netword-RNN-Using-Tensorflow" class="headerlink" title="Recurrent Neural Netword(RNN) Using Tensorflow"></a>Recurrent Neural Netword(RNN) Using Tensorflow</h1><h1 id="Pre-processing"><a href="#Pre-processing" class="headerlink" title="Pre-processing"></a>Pre-processing</h1><h2 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h2><p>MNIST database of handwritten digits. <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="external">Click here</a><br>Input data: Image shape(28*28)<br>Output label: 0~9 </p>
<h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><ul>
<li>Data_Size<ul>
<li><code>Input_dimension</code>: Dimension of each image</li>
<li><code>Output_dimension</code>: Dimension of predicted label</li>
<li><code>Classes</code>: The number of different outputs</li>
</ul>
</li>
<li>Model_Parameter<ul>
<li><code>Training_iter</code>: The number of iterations for training</li>
<li><code>Batch_size</code>: The length of inputeach epoch</li>
</ul>
</li>
</ul>
<h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><ul>
<li><code>Python 2.7</code></li>
<li><code>Tensorflow 0.12.1</code></li>
</ul>
<h1 id="Model-RNN-LSTM"><a href="#Model-RNN-LSTM" class="headerlink" title="Model(RNN + LSTM)"></a>Model(RNN + LSTM)</h1><p>We use a Recurrent Neural Network with <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="external">LSTM</a> Cell to implement this model.</p>
<ul>
<li>LSTM (Long Short Term Memory):</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/42741-b9a16a53d58ca2b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LSTM_MODEL" title="">
                </div>
                <div class="image-caption">LSTM_MODEL</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://json0071.gitbooks.io/deeplearning/content/LSTM.png" alt="LSTM" title="">
                </div>
                <div class="image-caption">LSTM</div>
            </figure>
<p>LSTM Composed of three gates which called INPUT_GATE, FORGET_GATE and OUTPUT_GATE.</p>
<p>More information about how to implement LSTM Model is <a href="https://www.tensorflow.org/tutorials/recurrent" target="_blank" rel="external">here</a>.</p>
<ul>
<li><strong>Initialize Step</strong></li>
</ul>
<p>First we should initialize the placeholder and weights of our neural network.<br><code>placeholder</code>: just like the <strong>x</strong> of the function:</p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large f(x) = x^2" style="border:none;"></p>
<p><code>weights</code>: the weight for converting input data to output label.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x = tf.placeholder(&quot;float&quot;, [None, n_steps, n_input])</div><div class="line">y = tf.placeholder(&quot;float&quot;, [None, n_classes])</div><div class="line"></div><div class="line">weights = &#123;</div><div class="line">    &apos;out&apos;: tf.Variable(tf.random_normal([n_hidden, n_classes]))</div><div class="line">&#125;</div><div class="line">biases = &#123;</div><div class="line">    &apos;out&apos;: tf.Variable(tf.random_normal([n_classes]))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Training Step</strong></li>
</ul>
<p><strong>First</strong> we define a RNN_Model function.<br>Using linear relationship to combine the output parameters.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def RNN_Model(x, weights, biases):</div><div class="line">    lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(n_hidden, forget_bias = 1.0)</div><div class="line">    output, states = tf.nn.rnn(lstm_cell, x, dtype = tf.float32)</div><div class="line">    return tf.matmul(output[-1], weights[&apos;out&apos;]) + biases[&apos;out&apos;]</div></pre></td></tr></table></figure>
<p><strong>Second</strong> we have to define the loss function and optmizer of our model.<br><code>loss fuction</code>: softmax_cross_entropy<br><code>optimizer</code>: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">prediction = RNN_Model(x, weights, biases)</div><div class="line">result = tf.nn.softmax(prediction)</div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = prediction, labels = y))</div><div class="line">optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)</div></pre></td></tr></table></figure>
<p><strong>Third</strong> in order to evaluate the efficiency of this model, we define the function to calculate accuracy.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">correct_prediction = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div></pre></td></tr></table></figure>
<p><strong>Finally</strong> we can start training after all the initialization.</p>
<ul>
<li>We can use session to run our tensorflow function.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">    sess.run(init)</div><div class="line">    while &quot;./epoch&quot; &lt; training_iters</div><div class="line">        batch_x, batch_y = mnist.train.next_batch(batch_size)</div><div class="line">        batch_x = batch_x.reshape((batch_size, n_steps, n_input))</div><div class="line">        sess.run(optimizer, feed_dict = &#123;x: batch_x, y: batch_y&#125;</div><div class="line">        if &quot;./batch_size&quot;:</div><div class="line">            acc = sess.run(accuracy, feed_dict = &#123;x: batch_x, y: batch_y&#125;)</div><div class="line">            los = sess.run(loss, feed_dict = &#123;x: batch_x, y: batch_y&#125;)</div></pre></td></tr></table></figure>
<p><strong>Tips</strong>: “./“ represent the parameters defined by user own.</p>
<ul>
<li><strong>Testing Step</strong></li>
</ul>
<p>After training we get a weights in the tensorflow session which can be used to predict our test data.</p>
<p><strong>First</strong> generate the testing dataset from mnist generator.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test_data = mnist.test.images[:&quot;./test_length&quot;].reshape(-1, n_steps, n_input)</div><div class="line">res = sess.run(result, feed_dict = &#123;x: test_data&#125;)</div><div class="line">predict_label = sess.run(tf.argmax(res, 1))</div></pre></td></tr></table></figure>
<p><strong>Finally</strong> because tensorflow mnist test dataset have its own ground-truth. So we can estimate if our “predict_label” is correct. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test_label = mnist.test.labels[:&quot;./test_lenght&quot;]</div><div class="line">sess.run(accuracy, feed_dict = &#123;x: predict_label, y: test_label&#125;)</div></pre></td></tr></table></figure>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol>
<li><p>Install tensorflow.</p>
<ul>
<li>If we will run our model on GPU we have to install cuda and cuDNN.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install tensorflow(-gpu)==0.12.1</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Import tensorflow package.</p>
</li>
<li>Import tensorflow mnist dataset and read the dataset as a generator.</li>
<li>Run our model<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python &quot;./model_name&quot;.py</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/aymericdamien/TensorFlow-Examples/" target="_blank" rel="external">Googel Tensorflow Example</a></li>
</ul>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><p>In this experiment we use a simple RNN(LSTM) model to predict the handwritten digits which also catch a good consequence in CNN.<br>RNN model is good for using in NLP processing. But how to explore the most useful <strong>determines</strong> whether our model can get an excellent result or not.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Recurrent-Neural-Netword-RNN-Using-Tensorflow&quot;&gt;&lt;a href=&quot;#Recurrent-Neural-Netword-RNN-Using-Tensorflow&quot; class=&quot;headerlink&quot; title=&quot;Re
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="LSTM" scheme="http://yoursite.com/tags/LSTM/"/>
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
  </entry>
  
</feed>
